
;ENHANCEMENTS TO MAKE
;23. GENERATE INDEX FOR SELPAGE ROM VERSION TO SPEED THINGS UP.
;**********************************************************************
;		TROUBLES?  CONSULT THIS CHART...
;
;PROCESSOR POWER TROUBLES:
;1. MAKE SURE THERE ARENT TOO MANY CONSTANTLY REARMING OR PERMANENTLY
;   REARMED ENTITIES ON SCREEN.   THE ATTACKS TAKE LOTS OF POWER.
;
;ATTACK DOESN'T SEEM TO BE ARMED:
;1. ONCE ARMED, AN ATTACK ONLY TRIGGERS ONCE UNTIL REARMED.  IF AT THE
;   TIME OF TRIGGER IT HITS NO ONE, DON'T EXPECT IT TO STAY "ARMED"
;   UNTIL IT HURTS SOMEONE.  ITS ONLY ARMED FOR 1 CYCLE OF THE ANIMATION
;   TO THE PROPER FRAME THEN IT DISARMS WHETHER IT HITS SOMEONE OR NOT.
;
;PROGRAM CRASHES WILDLY:
;1. CHECK FOR .DBs WHEN THERE SHOULD BE .DRWs AND VICE VERSA.  TRY THESE:
;		SKIPS WITH .DBs FOR DESTINATION
;		.DRWs WITH THE X AND Y OF THE RANGE COMMAND
;2. CHECK FOR TABLE COMMANDS WITH NOT ENOUGH ENTRIES FOR THE REGISTER
;   VALUE.  TRY STORING THE REGISTER IN SOME UNUSED COMMON DATA AREA
;   RAM JUST BEFORE THE TABLE COMMAND.  THEN IF IT CRASHES YOU CAN LOOK
;   AT THE LAST VALUE WITH THE DEBUGGER.  CHECK KUNGFU.LST FOR COMMONDATA
;   TO SEE WHERE THE BASE IS AND THEN ADD YOUR BYTE LOCATION.
;3. MAKE SURE THAT YOU HAVEN'T OVERFLOWED PROGRAM OR BACKGROUND MEMORY.
;THE ASSEMBLER WON'T WARN YOU.  CHECK CODE.SEG (OR OBJ) TO MAKE SURE THAT 
;THE TOP ORG ISN'T OVERFLOWED BY THE BOTTOM ONE.  CHECK MEMORY.SEG
;AT THE BOTTOM AND GO UP UNTIL YOU FIND THE DISCONTINUITY IN THE 
;ORGS.  THATS WHERE YOU BACKGROUND DATA MIGHT OVERFLOW INTO THE CODE
;IN THE SECOND PAGE.
;
;ENTITIES DISAPEAR WHILE ACTIVE FOR NO APPARENT REASON:
;
;1. IF YOU HAVE ENTITIES WHOS ANIMATIONS TAKE UP DIFFERENT NUMBERS OF
;SPRITES, ITS POSSIBLE THAT DURING THE SMOOTH ANIMATION CHANGE OF AN
;ACTIVE ENTITY A CONDITION COMES UP WHERE THERE AREN'T ENOUGH SPRITES
;TO BRING IN THE NEW ANIMATION.  AVOID MAKING ANIMATIONS WHICH TAKE UP
;DIFFERENT AMOUNTS OF SPRITES IF YOU KNOW THAT THE WORLD WHERE THEY ARE
;GOING TO BE USED WILL HAVE FEW SPRITES AVAILABLE.  FOR INSTANCE, IN
;CHALLENGE OF THE DRAGON THE MONGOLIAN GIANT WHO MAKES ROCKS COME CRASHING
;DOWN WOULD HAVE PROBLEMS IF HIS ANIMATIONS DIFFERED IN SIZE BECAUSE HE
;CREATES AS MANY ROCKS AS THERE ARE SPRITES AVAILABLE.  THIS USED TO
;CAUSE HIM TO DISAPPEAR BECAUSE HIS HITTING ANIMATION WAS NOT AS WIDE AS
;HIS WALKING ANIMATION.  THE HITTING MADE ALL SPRITES GET USED UP FOR
;ROCKS AND THEN HE COULDN'T BRING IN HIS WALK. THE SOLUTION WAS TO PAD HIS
;WALK OUT WITH BLANKS BUT IT MADE IT EASIER TO SWORD ATTACK HIM.
;
;HERO GETS INTO JUMP POSITION WHEN HE WASN'T JUMPING OR GETS STUCK IN IT:
;IF YOUR JUMP CODE STARTS BY CHECKING FOR STANDING AND DOES A RESUME IF
;YOU HERO ISN'T STANDING, YOU MUST HAVE -1 FOR THE ANIMATION OR ELSE YOU
;WILL ALWAYS GET THE JUMP IMAGE REGARDLESS IF YOU ARE JUMPING AND THE
;CODE THAT GETS RESUMED WON'T GET RID OF IT.  USE -1 AND THEN SEQUENCE
;THE PICTURE AFTER YOUR CODE DECIDES ITS OK TO JUMP.
;
;***********************************************************
;
;	 CONTROL DATA INFORMATION FOR THE GAME STATE MACHINE.
;
;THIS ASSEMBLY CONTAINS THE SOUNDS, POINT TABLES, MUSIC, AND CONTROL
;DATA TABLES FOR THE NES UNIVERSAL QUEST GAME STATE MACHINE.
;
;THE BACKGROUND DATA SHOULD BE IN <<< YOURBACK.ASM >>>
;(THE DRAWING PROGRAM ND.EXE WILL MAKE THIS FILE).
;
;THE SPRITE AND PALETTE DATA SHOULD BE IN <<< DRAWDATA.ASM >>>
; (THE DRAWING PROGRAM ND.EXE WILL MAKE THIS FILE).
;
;THE SOUND INFO CAN BE IN THIS FILE OR IN A FILE CALLED <<< YOURSND.ASM. >>>
;IF YOU PUT IT INTO YOURSND.ASM IT WILL GO INTO THE SECOND ROM PAGE.
;THAT SHOULD BE BEST SINCE THIS STATE MACHINE SUPPORTS STRIPIZING
;YOUR BACKGROUNDS AND SHOULD LEAVE YOU WITH ROOM IN THE SECOND PAGE.
;YOU MUST HAVE THIS FILE EVEN IF ITS EMPTY.
;
;CODE FOR YOUR ENTITIES MAY BE PUT INTO THE FILE <<< YOURCODE.ASM >>> IF
;YOU WANT TO PUT IT INTO THE SECOND PAGE.   YOU MUST HAVE YOURCODE
;EVEN IF ITS EMPTY.

;
;**************************************************************************

;**************************************************************************
;			HINTS AND GOOD IDEAS
;
;PRIZE MAKING: YOU COULD MAKE PRIZES ATTACK THE HERO AND HAVE THE HERO
;IGNORE THE ATTACK AND HAVE THE PRIZE INCREMENT WHATEVER PRIZE COUNT
;BUT THIS MAKES YOUR HERO HAVE TO USE A -1 ANIMATION OR ELSE HE WOULD
;SKIP INTO HIS HURT ANIMATION.  HERE'S A BETTER WAY:  MAKE YOUR PRIZES
;TARGET THE HERO.  THEN USE A RANGE COMMAND INSIDE THE PRIZE'S CODE
;LOOP AND MAKE THE PRIZE DO EVERYTHING WITHOUT THE HERO EVER KNOWING
;ABOUT IT.  YOU MIGHT HAVE TO MAKE A MAILBOX IN COMMON DATA RAM FOR
;CASES SUCH AS HEALTH INCREMENTING.  THE HERO IS BEST ABLE TO INCREMENT
;HIS OWN HEALTH.  THE PRIZE COULD PUT A NUMBER TO ADD TO HIS HEALTH
;SOMEWHERE AND HE COULD JUST PERIODICALLY USE IT.
;
;CONTINUOUS ATTACKERS:  CONTINUOUSLY ATTACKING THINGS TAKE UP LOTS OF
;PROCESSOR POWER BECAUSE THEY HAVE TO CHECK EVERYTHING ELSE ON THE SCREEN.
;INSTEAD OF MAKING THEM CONSTANTLY REARM, MAKE THEM USE A RANGE COMMAND
;IN CONJUNCTION WITH THE HURT COMMAND TO DO IT MANAULLY.  THIS SLOWS DOWN
;THE PROCESSOR POWER REQUIREMENTS IN TIGHT SPOTS.  OR MAKE THEM ONLY REARM
;WHEN THE ENEMY IS IN A SMALL RANGE.
;
;SHOWING HEALTH AND MEN LEFT:  MAKE AN ENTITY THAT DOES THIS RUNNING
;HALF FREQUENCY.  THEN WHEN YOU WANT AN UPDATE, JUST USE THE CREATE COMMAND
;TO LAUNCH HIM.  HE SHOULD DIE BY HIMSELF WHEN DONE.  THE ONLY PROBLEM WITH
;THIS TECHNIQUE IS THAT YOU MUST MAKE SURE A SLOT IS ALWAYS AVAILABLE FOR
;THIS OR YOUR STATUS BAR MIGHT NOT GET UPDATED.
;**************************************************************************

;THE FOLLOWING 4 BYTES ARE EQUIVALENT TO A TOPSTAT COMMAND AND
;MUST BE HERE TO GET THINGS SET UP AT RESET TIME.  FROM THEN ON, ONLY
;YOUR TOPSTAT COMMAND VALUES ARE IN EFFECT.  THE VALUES HERE ARE PROBABLY
;WHAT YOU WOULD WANT SINCE THEY MAKE A CLEAN CENTERED 24 HIGH BOOT
;SCREEN WITHOUT A STATUS BAR.  BE SURE TO SET THE CHARACTERS SET HERE
;VALID FOR YOUR BOOT WORLD!!!

;First two are how high, third is selector height, forth is grafx bank
; PIXEL AMOUNTS!

DEFTOPSTAT:
	.DB	40,40,0,4	;PUT SAME VALUES HERE AS FOR A TOPSTAT.
				;THIS DEMO ONE MAKES A 4.75 HIGH (5 ROWS)
				;STATUS BAR.  VIEWABLE DATA IS IN ROWS
				;3 AND 4 (THE BOTTOM 2).

	.EQU	STATCHAR,H'FE		;FOR BACKGROUND (BOTTOM OF STAT BAR)
	.EQU	STATSPRITE,H'FE		;FOR THE SPRITE (USUALLY 2 HIGH)

.EQU	CLOCKPHASE,3		;THIS VARIABLE CONTROLS HOW MANY TIMES PER
				;SECOND EACH ENEMY IS MOVED.  YOUR COUNTERS
				;ALSO RUN AT THIS FREQUENCY SO BE CAREFUL.
				;HERE ARE THE VALUES:
				;	    1 = 30 TIMES PER SECOND.  WILL
				;		SLOW DOWN IF MORE THAN 10
				;		ENEMIES LAUNCHED BUT NOT
				;		THAT NOTICABLE.
				;	    3 = 15 TIMES PER SECOND.	
				;	    7 = 7.5 TIMES PER SECOND

.EQU	XSCROLLSPEED,7	;FASTEST THE SCREEN IS ALLOWED TO SCROLL ON X.  
			;DON'T GO ABOVE 8 OR THE HERO WILL BE ABLE 
			;MAKE THE SCREEN SKIP OVER ENEMY LAUNCHES.  

.EQU	ERASECHAR,H'FF	;THE CHAR TO BLANK FILL SCREENS WITH.  MUST BE
			;BLANK IN ALL BACKGROUNDS.

;THIS TABLE CONTAINS THE DEFAULT MOMENTUMS THAT ARE LOADED AT THE 
;START OF EACH WORLD.  THESE 8 BYTES SPECIFY THE EFFECTS THAT THE 
;LEFT, RIGHT, UP AND DOWN ARROW KEYS WILL HAVE ON THE HERO'S X TRAVEL AND Y 
;TRAVEL MOMENTUM.  EACH BYTE IS A SIGNED VALUE FOR THE AMOUNT TO 
;ADD TO A PARTICULAR MOMENTUM VALUE.  THE BYTES ARE:
;LEFTX, LEFTY, RIGHTX, RIGHTY, UPX, UPY, DOWNX, DOWNY.
;+ VALUES ARE RIGHT AND DOWN.  - VALUES ARE UP AND LEFT.  
;THE MAX VALUE IS H'40.  THE NEGATIVE VALUE MAY BE H'FF DOWN TO 
;H'B0.

DEFMOMS:	.DB	H'F4,H'00,H'0C,H'00,H'00,H'F4,H'00,H'0C	;JOYSTICK
			
;THIS IS THE SOUND MADE BY THE DING COMMAND.

PNOISE:	.DB	VOICE3,LOADALL,H'04,H'00,H'83,H'08
	.DB	PAUSE+N4,ENDPLAY

;important crap over here PROBABLY

;************************************************************************
;		ENTITY (SPRITE) CONTROL INFORMATION
;
;THIS TABLE SPECIFIES THE INFORMATION NEEDED TO CONTROL A SPRITE ENTITY.
;ENTITIES INCLUDE THE HERO(S), ENEMIES, BULLETS, PLATFORMS, PRIZES, AND
;SPECIAL EFFECTS.  THERE ARE 16 ALLOWED AT A TIME IN ANY COMBINATION.
;WHEN AN ENTITY IS LAUNCHED, HE IS PUT INTO THE "WAKEUP" MODE WITH
;THE WAKE UP ANIMATION SELECTED AND THE WAKE UP TABLE IN EFFECT.  EACH
;TABLE CAN JUMP TO OR RUN ANOTHER TABLE USING EMBEDDED COMMANDS SO THE
;ENTITY'S FULL BEHAVIOR CAN BE CONTROLLED WITHOUT ASSEMBLY LANGUAGE.  WHEN AN
;ENTITY IS HIT BY AN ATTACK HE GOES INTO HURT MODE AUTOMATICALLY.  WHEN
;THE JOYSTICK IS TIED TO AN ENTITY (HERO MODE) VARIOUS FUNCTIONS ARE
;ACTIVATED AUTOMATICALLY FROM THE JOYSTICK BUTTONS AS SPECIFIED WITH THE
;SPECIAL COMMANDS. 

;A SPECIAL KIND OF ENTITY CALLED "ZERO SPRITES ENTITY" IS ALSO SUPPORTED.
;SETTING BIT H'40 IN THE RECOMMENDED BASE SPRITE FOR THE ENTITY CAUSES
;THIS EFFECT.  THE ENTITY BEHAVES LIKE ANY OTHER EXCEPT THAT IT DOESN'T
;TAKE UP ANY SPRITES (AND NATURALLY IT DOESN'T DISPLAY).  THE DRAWING
;PROGRAM WILL ALLOW YOU TO DEFINE THESE AUTOMATICALLY.

;AT BOOT UP THE FOLLOWING DEFAULTS ARE SET FOR THE ENTITY:
;MOMENTUM LIMIT FOR THE X AXIS IS SET TO DEF_XLIM.
;MOMENTUM LIMIT FOR THE Y AXIS IT IS SET TO DEF_YLIM.
;GRAVITY IS SET TO DEF_GRAV.  
;FRICTION IS SET TO DEF_XFRICT AND DEF_YFRICT.
;BOUNCE IS SET TO DEF_BOUNCE.
;
;
;COMMANDS ARE PROVIDED TO CHANGE THESE DEFAULTS AS DESIRED.
;
;EACH ENTITY SPECIFICATION ENTRY CONTAINS THE FOLLOWING INFORMATION:
;
;1 WORD POINTER TO ANIMATION/MOVEMENT LIST FOR THIS ENTITY.
;1 BYTE FLAG BITS:
;	01 = 	IF SET, FRICTION IS APPLIED AT ALL TIMES.  IF OFF, ONLY WHEN 
;		STANDING ON SOLID.
;	02 = 	DON'T REMOVE ENTITY FROM SCREEN IF IT SCROLLS HIM TO SIDE.
;	04 = 	ENTITY IS A MUST DEFEAT ENTITY FOR USE WITH THE FIGHT IT OUT
;		SCREEN COMMAND FOR THE WORLD TABLE.
;	08 = 	ENTITIES FEET (BOTTOM SCAN LINE) WILL NOT BE ALLOWED TO
;		GO ABOVE SCREEN TOP (0) OR BELOW BOTTOM (240-STATUS BAR 
;		HEIGHT IN PIXELS).
;	10 =	ENTITY WILL NOT BE ALLOWED TO WALK RIGHT OFF VISUAL SCREEN.
;		IF BACKGROUND SCROLLS HIM THERE HOWEVER HE WILL GO THERE.
;		THIS SIMPLY PREVENTS HIM FROM GOING THERE UNDER HIS OWN
;		MOMENTUM POWER.  USED PRIMARILY FOR JOYSTICK ENTITIES.
;	20 =	ENTITIES HEAD (TOP SCAN LINE) WILL NOT BE ALLOWED TO GO
;		ABOVE SCREEN TOP (0) AND THUS NOT INTO THE STATUS LINE.
;	40 = 	ENTITY ATTACKS ONLY TARGETED ENTITIES.  OTHERWISE ENTITY'S
;		ATTACKS WILL BE REPORTED TO ALL WHO ARE HIT.  
;	80 = 	ENTITY WILL TEST THE WORLD FLAGS.  SET THIS ONLY IN THE
;		HERO IF AT ALL POSSIBLE TO PREVENT PROCESSOR POWER DRAIN.
;1 BYTE SOLID CHAR VALUE FOR THIS ENTITY (0=NONE).
;1 BYTE CONTROL AND SCREEN SCROLL FLAG BITS:
;	BITS 03 ARE SCREEN X SCROLL:
;		   00=FULL SCREEN X SCROLL CORRECTION
;		   01=HALF SCREEN X SCROLL CORRECTION 
;		   10=ONE QUARTER X SCREEN SCROLL CORRECTION 
;		   11=NO SCREEN X SCROLL CORRECTION 
;			(DON'T USE ANYTHING BUT 00 FOR A JOYSTICK ENTITY!)
;	BITS 0C ARE SCREEN Y SCROLL:
;		   00=FULL SCREEN Y SCROLL CORRECTION
;		   01=HALF SCREEN Y SCROLL CORRECTION 
;		   10=ONE QUARTER Y SCREEN SCROLL CORRECTION 
;		   11=NO SCREEN Y SCROLL CORRECTION 
;			(DON'T USE ANYTHING BUT 00 FOR A JOYSTICK ENTITY!)
;	BIT 10 = LOW PRIORITY ENTITY.  IF A LAUNCH ENTITY COMMAND
;	         CANNOT FIND A FREE SLOT IT WILL REMOVE ANY ENTITY WITH
;		 THIS BIT SET.  THE ENTITY WILL DISAPPEAR WITH A DIE,0.
;	BIT 20 = LOW EXECUTION PRIORITY.  SLOW THIS ENTITY DOWN IF YOU
;		GET TOO FAR BEHIND.
;	BITS C0 ARE UNUSED AT THIS TIME.  SET THEM TO 0.
;1 BYTE STARTING HEALTH FOR THIS ENTITY. 255 IS MAXIMUM HEALTH.
;
;**********************************************************************

;NOTE:  THESE VALUES WILL HAVE TO BE CHANGED IF YOU CHANGE CLOCKPHASE.


.EQU	DEF_XLIM,24	;64 MAX!
.EQU	DEF_YLIM,64	;64 MAX IF YOUR SOLIDS ARE 1 HIGH, 120 IF 2 HIGH.
.EQU	DEF_GRAV,13
.EQU	DEF_XFRICT,26
.EQU	DEF_YFRICT,0
.EQU	XFCTR,3		;1/15 DELAY AFTER APPLYING X MOMENTUM BEFORE FRICTION
			;EACH TICK HERE ALLOWS 2 INSTRUCTIONS.
.EQU	YFCTR,3		;DELAY AFTER APPLYING Y MOM BEFORE FRICTION KICKS IN
.EQU	DEF_BOUNCE,0	;DEFAULT BOUNCE FACTOR
	

;[H'?,H'?](probably height & width), ?(0), Health

ENTITYTAB:			;ENTITY SPRITE ASSIGNMENT TABLE

	.DRW	COPRINFO	;0=COPYRIGHT NOTICE AND START BUTTON MONITOR
	.DB	0,0,0,0
.EQU	HEROID,1
	.DRW	HEROINFO 	;1 = HERO, JOYSTICK 1
	.DB	H'9A,H'E0,0,20	;HIS HEALTH IS NOT USED.  SEE COMMON DATA 21
.EQU	STATGUYID,2
	.DRW	HEALTHENTITY	;2=STATUS BAR UPDATER.
	.DB	2,0,0,0
.EQU	WORLDGUYID,3
	.DRW	WORLDWAKER	;3=ENTITY TO LAUNCH AT A WORLD START TO DO
	.DB	2,0,0,0		;MISC. STUFF LIKE STATUS LINE COLORS, ETC.
.EQU	SKELETON,4
	.DRW	SKLETON		;4=SKELETON GUY FOR CASTLE  
	.DB	H'2E,H'E0,0,7    
	.DRW	MAGICPRIZE	;5=STICK OF DYNAMITE  
	.DB	0,H'E0,H'20,0
	.DRW	HEALTHPRIZE	;6=HEART OF HEALTH   
	.DB	0,H'E0,H'20,0
	.DRW	MANPRIZE	;7=FREE MAN  
	.DB	0,H'E0,0,0
.EQU	MAGICGUYID,8		;DYNAMITE THAT'S THROWN BY HERO
	.DRW	MAGICTHROW	;8=BOTTLE OF DYNAMITE 	
	.DB	H'0A,H'E0,0,0
	.DRW	LOTSMAGIC	;9=10 DYNAMITES    
	.DB	0,H'E0,H'20,0
	.DRW	SHIELD		;10=HERO'S SHIELD 	   
	.DB	H'40,H'E0,0,0
	.DRW	BOOMERPRIZE	;11=BOOMERRANG	   
	.DB	0,H'E0,H'20,0
	.DRW	TORCHPRIZE	;12=TORCH      
	.DB	0,H'E0,H'20,0
	.DRW	BRASSPRIZE	;13=BRASSKNUCKLES  
	.DB	0,H'E0,H'20,0
	.DRW	FOODPRIZE	;14=SHIELD 
	.DB	0,H'E0,H'20,0
	.DRW	SUCTPRIZE	;15=SUCTION CUPS   
	.DB	0,H'E0,H'20,0
	.DRW	KEYPRIZE	;16=KEY		  
	.DB	0,H'E0,H'20,0
	.DRW 	ROCKGATE	;17=HIDDEN GATE  
	.DB	0,0,0,8
	.DRW 	STATSELECT	;18=STATUS SELECTOR  
	.DB	2,0,H'23,0
.EQU	BOSSMAN,19
	.DRW	DRUGBOSS	;19=BIG BOSS DUDE AT END
	.DB	H'7E,H'E0,0,25		
.EQU	QUIKEIGHT,20
	.DRW	QUIK		;20=FLYING FIGURE             
	.DB	H'72,H'E0,0,0		
.EQU	EAGLEFLY,21
	.DRW	EAGLEBIRD    	;21=EAGLE            
	.DB	H'63,H'E0,H'20,7		
.EQU	WHITEFAKE,22
	.DRW	RIFLEMAN     	;22=ENEMY WITH WHITEHAT MOVEMENTS            
	.DB	H'2E,H'E0,0,7		
.EQU	MONGOLIAN,23
	.DRW	MONGO		;23=ENEMY WITH BIG CLUB            
	.DB	H'6E,H'E7,0,10		
.EQU	KNIFEJUMP,24
	.DRW	JUMPY		;24=ENEMY WITH VALKARY            
	.DB	H'6E,H'E0,0,7		
.EQU	SWORDMAN,25  
	.DRW	SAMURAI		;25=GUY WITH SWORD
	.DB	H'6E,H'E0,0,7
.EQU	GREENCAPE,26
	.DRW	GREENTHUG	;26=GREEN THUG 
	.DB	H'2E,H'E0,0,7
.EQU	FLYBOY,27
	.DRW	WIZZARD		;27=EVIL, FLYING, TERRIBLE PERSON
	.DB	H'3E,H'E0,0,12
.EQU	NINJAFAKE,28
	.DRW	NINJA		;28=MASTER NINJA WITH BOMBS           
	.DB	H'2E,H'E0,0,7  
	
	.DRW	MAPTHING	;29=MAP ICON
	.DB	0,H'E0,0,0		

.EQU	BOLTGUYID,30	;BULLET WHITEHAT SHOOTS
	.DRW	FIRE
	.DB	H'68,0,0,1
.EQU	SHURIGUYID,31		;DAGGER FOR NINJA
	.DRW	SPIN
	.DB	H'68,H'E0,H'20,1	

.EQU	BOMBGUYID,32		;BOMB THAT NINJA THROWS
	.DRW	BOMBER
	.DB	H'7A,H'E0,H'20,0
.EQU	FIREDUMMY,33
	.DRW	TORCHFIRE	;TORCH USED TO LIGHTEN UP ROOM	
	.DB	2,0,0,0
.EQU	BOOMCHUCK,34
	.DRW	BOOMMOVE	;BOOMERRANG THAT IS THROWN
	.DB	H'6A,H'E0,0,1
	.DRW	ARRSHT	     	;35	ARROW BEING FLUNG
	.DB	H'68,H'E0,0,0
.EQU	ARRMAN,36		;ARROW MAN IN CITY
	.DRW	ARROWMAN
	.DB	H'40,H'E0,0,7  
	.DRW	BIGARROW 	;37	ARROW IN WINDOW ROOM
	.DB	H'68,0,0,1
.EQU	WINDOWMAN,38		
	.DRW   SHOOTYA				;38 = Shootya (MAN IN WINDOW ROOM)
	.DB	H'2E,H'E0,0,2				;2 HP (2 kicks, 1 sword)
	.DRW 	GATEKEY		;39 =GATE THAT NEEDS KEY TO OPEN  
	.DB	0,0,0,5
	.DRW	SLASHEM 			;40 = Slashem (FAKE BIRD MAN WITH KNIFE, BIRDFAKE, BRD)
	.DB	H'2E,H'E0,0,3				;3 HP (3 kicks)
.EQU	ROCKGUYID,41		;NEED TO MAKE A ROCK TO FALL SOME DAY
	.DRW	ROCKFALL
	.DB	H'60,H'E0,H'20,5				
.EQU	SMROCKGUYID,42		;SMALL ROCK THAT THE BIG ONE BLOWS UP INTO
	.DRW	SMALLROCK
	.DB	H'60,H'E0,H'20,5
	.DRW	STATGUY	 	;43	MAP CODE
	.DB	H'20,H'E0,0,0
	.DRW	GOOPY		;44
	.DB	H'20,H'E0,0,0
.EQU	SKULLGUYID,45		;THING THROWN BY BIG WIZARD
	.DRW	GRENADE		;45
	.DB	H'28,H'E0,0,0
	.DRW	DRIPPY		;46
	.DB	H'68,H'E0,H'20,0	
	.DRW	GRABBY		;47    GRABS YOU IN WINDOW
	.DB	H'72,H'E0,0,0
.EQU	BIGSPGUYID,48		;THING SHOT BY BIG WIZZARD
.EQU	LITLSPGUYID,48		;THING SHOT BY LITTLE WIZZARD
	.DRW	MACHINEGUN	;48
	.DB	H'68,H'E0,H'20,1	
	
	.DRW	BRIZZY		;49
	.DB	H'60,H'E0,H'20,0
	.DRW	BRIZBIG		;50
	.DB	H'60,H'E0,0,0
	.DRW	HOLDY		;51
	.DB	H'62,H'E0,0,0
	.DRW	BALLDOOD      	;52
	.DB	H'62,H'E0,H'20,0
	.DRW	QUIKSHOT	;53
	.DB	H'40,H'E0,H'20,0
	.DRW	FORKSHOOT	;54
	.DB	H'60,0,0,0
	.DRW	STARMOVE	;55
	.DB	H'62,H'E0,0,0
	.DRW	DUMBLAUNCH	;56
	.DB	H'22,H'E0,0,0
	.DRW	BOSSMECH	;57	ROBOT IN BOSS WORLD
	.DB	H'40,H'E0,0,0
	.DRW	BOSSDROP	;58	SHOT FROM ROBOT 
	.DB	H'40,H'E0,H'20,0
	.DRW	BOOTMOVE	;59	HERO MOVEMENT IN BOOT SCREEN
	.DB	H'00,H'E0,0,0
	.DRW	TEDCODE	     	;60 LITTLE TED MIDGETS
	.DB	H'2E,H'E0,0,7		
.EQU	BAAMGUYID,61	;custom explosion effect after enemies die
	.DRW	EXPLOD			;61 = ^
	.DB	0,H'E0,0,0
	.DRW	DEADGUYE		;62 = cool dead guy
	.DB	0,H'E0,0,0
	.DRW	HORSIE 			;63 = Millie Horsie
	.DB	H'6E,H'E7,0,4				;3 HP, placeholder hitbox from mong
	.DRW	MISSILE 		;64	= Homing missile
	.DB	H'63,H'E0,H'20,7

;.EQU	EAGLEFLY,21
;	.DRW	EAGLEBIRD    	;21=EAGLE            
;	.DB	H'63,H'E0,H'20,7		

;.EQU	BOMBGUYID,32		;BOMB THAT NINJA THROWS
;	.DRW	BOMBER
;	.DB	H'7A,H'E0,H'20,0

;THE ANIMATION/MOVEMENT LIST SPECIFIES THE ANIMATION AND MOVEMENT TABLE
;TO USE FOR THE WAKEUP ANIMATION AND FOR ANY OTHER MODES THAT THE 
;ENTITY CAN ENTER INTO. YOU DON'T HAVE TO HAVE A UNIQUE ANIMATION FOR EACH 
;ENTRY, FOR INSTANCE, THE WAKE UP CAN BE THE SAME AS THE STANDING AND ANY
;OF THE ATTACKS MAY DUPLICATE ANOTHER ATTACK.  THERE IS ONE MAJOR RULE
;FOR THE ARTISTS TO REMEMBER!!!! THE WAKE UP ANIMATION MUST CONTAIN
;THE BIGGEST WIDTH OF THE ANIMATION SEQUENCES.  THE WIDTH MAY VARY
;FROM THEN ON BUT THE HEIGHT CANNOT.  

;REMEMBER THAT THE HERO IS JUST A SPECIAL CASE OF AN ENTITY WHOS
;MOVEMENTS ARE TIED TO THE JOYSTICK.  ALSO, BULLETS ARE SIMPLY
;ENEMIES LAUNCHED FROM ANOTHER ENTITY.  PLATFORMS ARE ALSO JUST
;ENTITIES AS ARE SPECIAL EFFECTS.  ANY SPRITE ON THE SCREEN IS
;JUST ANOTHER CASE OF AN ENTITY WITH A MOVEMENT TABLE.

;WHEN AN ANIMATION IS ACTIVATED, THE INIT OPTIONS FLAG IS USED.
;HERE IS THE FORMAT FOR THE  INIT OPTIONS FLAG BYTE:

;	H'07 = 3 BITS USED WITH THE ALIGN ON X OR Y BITS.  GIVES ALIGN VALUE.
;		TYPICAL VALUE IS 2.  ITS THE COUNT TO SHIFT X LOCATION RIGHT
;		AND RESULT IS USED TO PICK A FRAME.
;	H'08 = UNUSED.  SET TO 0.
;	H'10 = TRUE IF HERO ANIMATION ALIGNS TO Y AXIS
;	H'20 = TRUE IF HERO ANIMATION ALIGNS TO X AXIS
;	H'40 = TRUE IF ANIMATION SHOULD AUTOFREEZE (RUN TO END AND STOP)
;	H'80 = UNUSED. SET TO 0.

;WHEN ENEMIES AND HEROS "ATTACK" WITH EACH OTHER, THE DAMAGE FLAGS
;ARE USED TO QUALIFY IF DAMAGE IS TAKEN BY THE ONE ATTACKED.
;THERE ARE 3 DAMAGE FLAG BYTES.  HERE ARE THEIR FORMATS:

;DAMAGE FLAG #1 = 1 BYTE FRAME # ON WHICH ATTACK IS ACTIVE. SET IT TO -1
;		TO DISABLE ATTACKS.  FOR WALKING, STANDING, ETC.
;		YOU WOULD TYPICALLY DISABLE IT WITH -1. NOTE THAT
;		THE ANIMATION WILL BE CHECKED AT A FREQUENCY OF 4
;		RELATIVE TO THE ANIMATION SO YOUR ANIMATION MUST
;		RUN SLOWER THAN THIS OR YOU MIGHT MISS THE FRAME
;		ON WHICH THE ATTACK IS ACTIVE.  THE ATTACK IS "ARMED"
;		WHEN THE ANIMATION IS INITIALIZED AND TRIGGERS WHEN
;		THIS FRAME NUMBER IS LESS THAN OR EQUAL TO THE CURRENT
;		FRAME #.  AN ATTACK WILL ONLY TRIGGER 1 TIME.  USE COMMAND
;		A6 IF YOU NEED MORE TRIGGERS.
;
;		FOR SPRITES WHICH ARE NOT ANIMATIONS, USE FRAME #0.
;
;		FOR A PERMANENTLY ARMED ATTACK (TAKES LOTS OF PROCESSOR
;		POWER!), USE -2.
;
;DAMAGE FLAG #2 = 1 BYTE HOTSPOT FLAG.  THIS BYTE SPECIFIES THE LOCATION
;		  IN SPACE RELATIVE TO THE ENTITY WHICH IS CONSIDERED
;		  THE ATTACKED AREA WHEN AN ATTACK IS COMPLETED.  THE
;		  DIRECTION THE ENTITY FACES IS THE DIRECTION THAT
;		  YOUR FLAG WILL BE USED. IT IS A NIBBLE ORIENTED FLAG:
;		    BITS 0F = (DISTANCE/2) FROM CENTER OF SPRITE.
;		    BITS F0 = (DISTANCE/4) FROM TOP OF SPRITE.
;
;DAMAGE FLAG #3 = 1 BYTE DAMAGE BITS:
;		    BITS 07 = AMOUNT OF DAMAGE TO APPLY TO HERO OR ENTITY
;			      WHEN THIS ATTACK HITS HIM.  SET 
;			      TO 0 IF DESIRED, THEN ONLY THE HURT SEQUENCE
;			      WILL BE ACTIVATED BUT NO DAMAGE WILL OCCUR.
;			      RANGE IS 0-7 HEALTHS LOST.
;		    BIT  08 = SET TO SELECT HURT NUMBERS 16-31.
;		    BITS F0 = HURT # TO REPORT TO THE ENTITY THAT WAS HURT
;			      BY THIS ATTACK.  ALLOWS HURT # 0-15. SET BIT
;			      08 TO REPORT HURT NUMBERS 16-31.
;DAMAGE FLAG #4 =   BITS 0F = X ATTACK ZONE HALF WIDTH.  THIS IS THE 
;			      DISTANCE/4 FROM THE HOTSPOT REGION WHICH 
;			      IS CONSIDERED TO BE IN THE ATTACK REGION.  
;			      THIS GIVES A TOTAL DISTANCE OF 60 WHICH 
;			      ALLOWS A 120 PIXEL WIDE ATTACK ZONE (FOR BOMBS).
;		    BITS F0 = Y ATTACK ZONE HALF WIDTH.  THIS IS THE 
;			      DISTANCE/4 FROM THE HOTSPOT REGION WHICH 
;			      IS CONSIDERED TO BE IN THE ATTACK REGION.  
;			      THIS GIVES A TOTAL DISTANCE OF 60 WHICH 
;			      ALLOWS A 120 PIXEL WIDE ATTACK ZONE (FOR BOMBS).
;DAMAGE FLAG #5 =   BITS 0F = 	DIRECTION IN WHICH ATTACK IS VALID.  ATTACKS
;				ARE IGNORED UNLESS THEY ARE DIRECTED IN
;				THE DIRECTION YOU SPECIFY.  THERE ARE 4
;				BITS, YOU CAN USE EQUATES TO "OR" THEM
;				IF YOU LIKE (EXAMPLE: UP | DOWN)
;				08H = <UP>
;				04H = <DOWN>
;				02H = <LEFT>
;				01H = <RIGHT> (DIRECTION ENTITIES FACE)
;		    BITS F0 =	UNUSED FOR NOW


;THE ENTRIES IN THE ANIMATION/MOVEMENT LIST WERE DESIGNED TO BE A MINIMUM
;SUBSET ACCORDING TO WHICH WERE MANDITORY (CALLED EXTERNALLY UNDER
;SOME CIRCUMSTANCES) PLUS A FEW THAT SHOULD BE COMMONLY NEEDED.
;FOR INSTANCE, WALKING AND STANDING ARE NEVER ACTIVATED EXTERNALLY
;BUT SHOULD BE COMMON ENOUGH TO BE WORTH HAVING AN ENTRY.  ATTACKING
;IS ACTIVATED EXTERNALLY FOR JOYSTICK DRIVEN ENEMIES BUT ACTUALLY
;EACH ENTITY SHOULD HAVE SEVERAL ATTACKS.  RATHER THAN INCLUDE ENTRIES
;FOR DIFFERENT ATTACKS ITS UP TO YOUR CODE TO BRANCH AND DO IT MANUALLY.

;THE SEQUENCE WAS DESIGNED TO PUT THOSE CALLED AUTOMATICALLY TOWARDS THE
;TOP OF THE LIST IN ORDER OF LIKELYHOOD THAT THEY WILL BE CALLED.  YOU
;CAN "CONTROL" YOUR WORLD SUCH THAT ENTRIES BELOW A GIVEN ONE IN THE LIST
;WILL NOT BE ACTIVATED AND THUS YOU CAN SKIP USING THE MEMORY TO SPECIFY
;THE ENTRIES BELOW THAT LAST ONE YOU NEED.  ENTRIES ARE ONLY CHECKED
;FOR VALIDITY WHEN USED.  WAKEUP IS THE ONLY ENTRY THAT MUST
;ALWAYS BE PRESENT.  AT WAKEUP, ALL INTERRUPTING STATES ARE DISABLED.
;UNLESS YOU ENABLE SOME INTERRUPT EXECUTION WILL STAY IN WAKEUP FOREVER.

;HERE ARE THE CIRCUMSTANCES UNDER WHICH THESE ANIMATION/MOVEMENT ENTRIES
;CAN BE ACTIVATED:

;1. WAKEUP IS AUTOMATIC AT ENTITY LAUNCH.
;2. HURT IS CALLED WHEN AN ATTACK HITS THIS ENTITY.
;3. FALLING IS CALLED THE FIRST TIME A GRAVITIED ENTITY WHICH WAS STANDING
;   ON SOLIDS TRAVELS IN THE DIRECTION OF GRAVITY WITHOUT A SOLID UNDER
;   IT.
;4. WORLD COMMAND IS CALLED WHEN AN ENTITY STEPS ONTO A SCREEN COLUMN
;   THAT HAS A WORLD COMMAND DEFINED AND HE IS BETWEEN THE ROWS SPECIFIED.
;5. JUMPING IS CALLED IF A JOYSTICK DRIVEN ENTITY HAS BUTTON A PRESSED.
;6. ATTACKING IS CALLED WHEN BUTTON B IS PRESSED ON A JOYSTICK ENTITY.
;7. DUCKING IS CALLED WHEN DOWN IS PRESSED ON A JOYSTICK ENTITY.  YOU SHOULD
; USUALLY CHECK IF IT WAS STANDING ON SOLIDS IN YOUR CODE.

;HERE IS THE TABLE FORMAT:

;	1 WORD WAKE UP ANIMATION OR SPRITE NAME. THIS ANIMATION IS 
;	  MANDITORY AND MUST ALSO BE THE LARGEST ANIMATION OR SPRITE
;	  IN THE SERIES SO THAT SPRITES CAN BE ALLOCATED.
;	1 WORD POINTER TO THE WAKE UP MOVEMENT LIST.  THIS LIST IS MANDITORY,
;	  DON'T TRY TO USE -1!!!!!!!!!!
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD HURT BY ATTACK.  USE -1 FOR NO CHANGE.
;	   WHEN NO CHANGE IS SPECIFIED FOR THE ANIMATION, THE INIT FLAG
;	   AND DAMAGE FLAGS ARE ALSO NOT USED.
;	1 WORD POINTER TO THE HURT MOVEMENT LIST. USE -1 FOR NO CHANGE.
;	DON'T USE NO CHANGE FOR INTERRUPT PROCESSES SINCE THEY DISABLE
;	INTS AND WILL LEAVE THEM DISABLED.  USE RESUME INSTEAD.
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD FALLING  (OR -1)
;	1 WORD POINTER TO THE FALLING MOVEMENT LIST (OR -1)
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD WORLD COMMAND ANIMATION (ALMOST ALWAYS -1 FOR NONE)
;	1 WORD POINTER TO THE WORLD COMMAND MOVEMENT LIST (OR -1)
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD JUMPING (OR -1)
;	1 WORD POINTER TO THE JUMPING MOVEMENT LIST (OR -1)
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD ATTACKING (OR -1)
;	1 WORD POINTER TO THE ATTACKING MOVEMENT LIST (OR -1)
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD DUCKING  (OR -1)
;	1 WORD POINTER TO THE DUCKING MOVEMENT LIST (OR -1)
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD STANDING ANIMATION OR SPRITE NAME.  USE -1 FOR NO CHANGE.
;	   WHEN NO CHANGE IS SPECIFIED FOR THE ANIMATION, THE INIT FLAG
;	   AND DAMAGE FLAGS ARE ALSO NOT USED.
;	1 WORD POINTER TO THE STANDING MOVEMENT LIST.  USE -1 FOR NO CHANGE.
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;	1 WORD WALKING (OR -1)
;	1 WORD POINTER TO THE WALKING MOVEMENT LIST (OR -1)
;	INIT FLAG, DAMAGE FLAG #1
;	DAMAGE FLAG #2, DAMAGE FLAG #3

;FOR EACH ANIMATION ABOVE THERE IS A TABLE COMMANDS TO EXECUTE.  THE ANIMATION
;TABLE HAS THE POINTER TO THIS LIST.  YOU CAN SHARE LISTS WITH OTHER 
;ENEMIES. THE TABLE FORMAT CONSISTS OF COMMAND BYTES FOLLOWED BY 
;VARIABLE LENGTH PARAMETERS.

;ALL COMMANDS EXECUTE AT A RATE OF 60 PER SECOND UNLESS THEY CHANGE
;THE ENTITIES MOMENTUM OR ARE TIMING COMMANDS SUCH AS THE DELAY COMMAND
;OR THE FINISH COMMAND.  TO ACHEIVE THIS STEADY RATE, YOUR CLOCKPHASE
;VALUE IS USED TO DETERMINE THE NUMBER OF INSTRUCTIONS.  THUS IF YOU
;HAVE A 3 PHASE CLOCK YOU WILL EXECUTE 3 INSTRUCTIONS EVERY CYCLE.
;CHANGING TO A 2 PHASE CLOCK WILL CHANGE TO YOU 2 INSTRUCTIONS.  THIS
;ALLOWS YOU TO MAKE A CHANGE IN THE CLOCK PHASE WITHOUT SLOWING DOWN
;THE RATE AT WHICH ENTITIES EXECUTE (ALTHOUGH YOU WILL HAVE TO UPDATE
;THEIR MOMENTUM AND DELAY COMMANDS).  

;YOU CAN COUNT HOW MANY CYCLES IT WILL TAKE TO GET TO A GIVEN POINT
;BY TAKING YOU CLOCKPHASE VALUE AND COUNTING THAT MANY INSTRUCTIONS
;PER TICK UNLESS A MOMENTUM CHANGE COMMAND IS ENCOUNTERED.  WHEN
;SUCH A COMMAND IS ENCOUNTERED, THE EXECUTION IS TERMINATED FOR THAT
;CYCLE.  ALSO, SOME COMMANDS SUCH AS FINISH OR DELAY TERMINATE EXECUTION.
;THE DOCUMENTATION FOR EACH COMMAND SIGNALS IF IT IS A TERMINATING
;COMMAND.  IF YOU NEED TO SPEED UP EXECUTION OF SOME POINT IN YOUR
;CODE USE THE <INSTRUCTIONS> COMMAND.

;MOMENTUM ONCE APPLIED WILL BE USED TO MOVE THE ENTITY EVERY CLOCKPHASE
;REGARDLESS OF WHICH FLOW CONTROL COMMANDS ARE EXECUTED.  NOTE THAT
;FRICTION IS NOT APPLIED UNTIL XFCTR COMPLETE PROCESSING CYCLES ARE APPLIED
;TO THE ENTITY WITHOUT ANY CHANGES TO ITS MOMENTUM.  THIS WAS DONE TO
;ALLOW UP TO XFCTR*2 FLOW CONTROL COMMANDS IN THE STREAM BETWEEN MOMENTUM
;APPLICATIONS WITHOUT HAVING FRICTION MAKE THE MOVEMENT JUMPY.  BUT YOU
;DO NEED TO MAKE SURE MOMENTUM COMMANDS SUCH AS ADDJOYX ARE NEVER MORE
;THAN XFCTR*2 APART OR FRICTION WILL MAKE THINGS JUMPY.

;BE SURE TO USE THE EQUATES FOR THE COMMANDS AND NOT THE NUMERICAL VALUE.
;ANYTHING SHOWN IN BRACKETS ( <ACTIVATE> ) IN THE DOCUMENTATION IS AN 
;EQUATE YOU CAN USE FOR THAT FUNCTION.  THE COMMANDS ARE:

;00=	<ACTIVATE> ACTIVATE MODE.  THIS COMMAND WILL ACTIVATE ANY OF THE 
;	ANIMATION/MOVEMENT TABLE MODES.  FOR INSTANCE:  
;	ACTIVATE,EWALK WILL ACTIVATE THE WALKING ANIMATION AND MOVEMENT TABLE.  
;	SINCE ACTIVATE ONLY TAKES AN INDEX RELATIVE TO YOUR ANIMATION/MOVEMENT
;	TABLE, YOU COULD EXTEND IT BY ADDING NEW EQUATES THAT SUIT YOUR
;	OWN PURPOSES.  THEN UNLIKE THE SEQUENCE COMMAND WHICH GOES TO
;	AN ABSOLUTE MEMORY LOCATION, YOU COULD SHARE CODE BETWEEN ENTITIES
;	SINCE THE FINAL DECISION THAT RESULTS IN AN ACTIVATE WILL BE RELATIVE
;	TO THEIR OWN TABLE.  FOR INSTANCE, YOU EWALK CODE COULD END UP
;	DECIDING ON ONE OF 3 ATTACKS.  EACH ENTITY COULD USE THE SAME DECISION
;	MAKING WALKING CODE BUT THE ATTACKS COULD BE VERY DIFFERENT IF
;	THE CODE ENDED WITH DOING 1 OF 3 ACTIVATES WITH ATTACKS ADDED TO
;	THE END OF YOUR OWN LISTS.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE INDEX TO USE
;	USE THE FOLLOWING EQUATES TO SPECIFY THE MODE:

.EQU	EWAKE,0		;WAKE UP.  
.EQU	EHURT,10	;ENTITY HURT 
.EQU	EFALL,20	;FALLING
.EQU	ECMD,30		;WORLD COMMAND
.EQU	EJUMP,40	;JUMPING
.EQU	EATTACK,50	;ATTACKING/SHOOTING
.EQU	EDUCK,60	;DUCKING (DOWN KEY PRESSED)
.EQU	ESTAND,70	;STANDING
.EQU	EWALK,80	;WALKING

;	HERE ARE SOME RECOMMENDED EXTENSIONS AND AN EQUATE YOU COULD USE:

.EQU	ENEAR,90	;FOR A NEAR RANGE ATTACK
.EQU	EMIDDLE,100	;FOR A MIDDLE RANGE ATTACK
.EQU	EFAR,110	;FOR A FAR RANGE ATTACK
.EQU	ECHARGE,120	;FOR A CHARGING ATTACK
.EQU	EPOSE,130	;A POSE (DELAY) BEFORE AN ATTACK
.EQU	EDODGE,140	;TO DODGE ATTACKS
.EQU	ESHOOT,150	;SHOOTING ANIMATION


;NOTES ON ACTIVATE!!! READ THIS:  

;1. IF YOU WANT A DUMB ENEMY THAT GOES INTO SOME HARD LOOP, DON'T USE
;ACTIVATE XXXX (SUCH ACTIVATE,EWAKE) BECAUSE IT TAKES TOO MUCH PROCESSOR
;POWER AND (GET THIS!) EACH TIME AN ACTIVATE IS DONE THE ENTITY "RECENTERS"
;ITSELF RELATIVE TO THE OLD SPRITE.  THIS RECENTERING MAKES IT MOVE AWAY
;FROM THE RIGHT EDGE IF ITS CENTERLINE IS PAST THE EDGE.  THIS CAN MAKE
;YOUR ENEMY REFUSE TO SCROLL OFF THE RIGHT EVEN THOUGH THE BIT TO MAKE
;HIM STAY ON SCREEN IS NOT SET IN ENTITYTAB FLAG BYTE.  SO DON'T ACTIVATE
;EXCEPT IF YOU WANT A NEW ANIMATION OR MOVEMENT LIST.

;2. IF YOU ACTIVATE AN ENTRY WITH NO ANIMATION, THE DAMAGE FLAGS ARE ALSO
;NOT RELOADED.  SO DON'T TRY TO SET UP A HOT SPOT WITHOUT RENAMING THE
;ANIMATION.

;01 = 	<RANGE> MOVE EXECUTE POINTER IF TARGET IS IN RANGE (LESS THAN  
;	DISTANCE).  THE ENTITY MUST ALSO BE FACING THE TARGET.  IF THE
;	ENTITIES MOMENTUM IS ZERO, IT IS CONSIDERED TO BE ALWAYS FACING
;	THE TARGET.  THE ENTITIES CENTERLINES ARE USED FOR THE X,
;	THE BOTTOM PIXEL ROW (ITS FOOT) IS USED FOR THE Y.
;	THIS COMMAND IS FOLLOWED BY 4 BYTES:
;	   	1 WORD NEW POINTER (USED IF TEST PASSES)
;	   	1 BYTE X RANGE IN PIXELS (USE -1 FOR DON'T CARE)
;	   	1 BYTE Y RANGE IN PIXELS (USE -1 FOR DON'T CARE)
;02 = 	<LEDGE> MOVE EXECUTE POINTER IF THERE IS A LEDGE ABOVE. THE CORRECTION
;	WILL BE MADE IF A SOLID LEDGE EXISTS ABOVE THE ENTITY WITHIN THE 
;	HEIGHT SPECIFIED.  3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE NUMBER OF ROWS TO CHECK ABOVE THE ENEMIES FEET.
;		BE CAREFUL, IT USES LOTS OF PROCESSOR POWER.
;
;03 =	<PRECIPICE> MOVE EXECUTE POINTER IF THERE IS A PRECIPICE IN THE 
;	ENEMIES FACING DIRECTION. IF A HOLE IN THE CURRENT SOLID THAT THE 
;	ENTITY IS STANDING ON EXISTS IN THE DIRECTION THE ENTITY IS 
;	TRAVELING THE EXECUTE POINTER IS MOVED. MOMENTUM FOR THE
;	ENTITY WILL BE USED TO INTERPRET THE DIRECTION, NEGATIVE VALUES
;	WILL CHECK TO THE LEFT, PLUS TO THE RIGHT.  THE CHECK FOR A PRECIPICE
;	IS MADE AS FOLLOWS; A PHANTOM COPY OF THE ENTITY IS PLACED RIGHT
;	UP AGAINST THE ENTITIES EDGE IN THE DIRECTION OF TRAVEL PLUS
;	THE AMOUNT YOU SPECIFY IN THE 3RD BYTE.  IT IS PLACED 2 PIXELS
;	DOWN.  IF NO SOLID IS FOUND IN THAT AREA THE EXECUTE POINTER IS
;	MOVED.  OTHERWISE EXECUTION CONTINUES WITH THE NEXT INSTRUCTION.
;	THE ENTITY IS NOT MOVED AS A RESULT OF THIS COMMAND.
;	3 BYTES FOLLOWS THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE AMOUNT TO ADD TO DIRECTION OF TRAVEL SHIFT
;
;	RECOMMENDED USAGE:  IF YOU ARE WALKING 16 OR MORE (MOMENTUM)
;	IN THE DIRECTION OF TRAVEL IT IS SUGGESTED THAT YOU USE
;	A 1 BYTE AMOUNT OF 8 AND WHEN THE PRECIPICE IS TRUE, SET THE
;	THE MOMENTUM DOWN TO 8 WALKING IN THAT DIRECTION (SO THAT YOU DON'T
;	OVERSHOOT THE PRECIPICE).  MAKE THE JUMP BASED ON A BYTE VALUE OF
;	0 HOWEVER.  THE NON-ZERO 1 BYTE AMOUNT SHOULD ONLY BE A SLOW DOWN
;	FLAG.  ITS NOT A GOOD IDEA TO DO AN ACTUAL JUMP ACROSS THE 
;	PRECIPICE BASED ON A NON-ZERO VALUE BECAUSE AN AREA SURROUNDED
;	WITH A SINGLE SOLID IN FRONT OF YOU BUT FILLED WITH NON-SOLID CAN
;	LOOK LIKE A PRECIPICE.
;04 =	<SKIP> SKIP (MOVE) EXECUTE POINTER.  THIS COMMAND IS FOLLOWED BY A 
;	1 WORD NEW OFFSET IN MEMORY TO EXECUTE FROM.  USE THE ASSEMBLERS 
;	ABILITY TO SET A WORD TO THE VALUE OF A LABEL TO FIND THE VALUE.
;05 = 	<RANDOM> MOVE EXECUTE POINTER RANDOM NUMBER IS BELOW A VALUE.  
;	THE RANDOM NUMBER GENERATOR HAS VALUES 0-255.  3 BYTES FOLLOW THIS 
;	COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE RANDOM NUMBER TO BE BELOW (0-255)
;06 =	<MOMLIMIT> SET MOMENTUM LIMIT. YOU MAY ESTABLISH A NEW VALUE UP TO
;	126. 64 IS THE RECOMMENDED MAXIMUM OR ELSE YOU MIGHT BE ABLE TO
;	PASS THROUGH SINGLE HIGH SOLIDS.  2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE NEW X MOMENTUM LIMIT OR <REGISTER> OR -1 = NO CHANGE
;		1 BYTE NEW Y MOMENTUM LIMIT OR <REGISTER> OR -1 = NO CHANGE
;	IF YOU WANT A MOMLIMIT OF 0 YOU MUST LOAD REGISTER.
;07 =	<DELAY> DELAY.  A DELAY SUSPENDS EXECUTION OF FURTHER COMMANDS
;	BUT DURING THIS SUSPENSION THE CURRENT MOMENTUM IS USED
;	AND GRAVITY IS APPLIED.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE TIME IN 1/15 SECOND INTERVALS TO DELAY.  1 IS MINIMUM.
;		   IF 0 <REGISTER> IS USED AS DELAY TIME.
;08 = 	<ADDMOM> ADD TO MOMENTUMS.  THIS COMMAND ALLOWS YOU TO ADD A VALUE
;	TO THE X OR Y MOMENTUM.  THE SIGN OF YOUR VALUE WILL BE ADJUSTED
;	ACCORDING TO YOUR TRACKING YOU HAVE SELECTED WITH XTRACK OR YTRACK
;	IN CONJUNCTION WITH THE TARGET COMMAND.  2 BYTES FOLLOW THIS
;	COMMAND:
;		1 BYTE VALUE TO ADD TO X AXIS MOMENTUM (0=NO CHANGE).
;		1 BYTE VALUE TO ADD TO Y AXIS MOMENTUM (0=NO CHANGE).
;
;	SAMPLE USAGE:   .DB	ADDMOM,4,0    ;SLOWLY ACCELERATES X MOMENTUM.
;
;09 = 	<GRAVITY> SPECIFY GRAVITY (Y AXIS ONLY). YOU CAN TURN GRAVITY OFF WITH
;	A VALUE OF 0.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE NEW GRAVITY VALUE (RECOMMENDED 8 TO 32)
;			USE -1 TO PUT BACK THE DEFAULT VALUE.
;0A = 	<SOLIDSTATE> SET SOLID STATE. USE THIS COMMAND TO TEMPORARILY SUSPEND SOLID
;	CHECKING.  USUALLY USED DURING A JUMP.  THIS COMMAND WILL IMMEDIATLY
;	TURN SOLID CHECKING OFF OR ON BUT WHEN TURNING IT ON IT IS RECOMMENDED
;	TO USE THE CONDITIONAL TURN ON OR ELSE YOUR ENTITY MIGHT GET STUCK
;	IN SOLIDS.  1 BYTE FOLLOWS THIS COMMAND:
;		0 = <REGISTER> TO USE THE REGISTER'S CONTENTS
;	       -1 = <OFF> TURN OFF SOLID CHECKING
;		1 = <ON> TURN ON SOLID CHECKING
;		2 = <SAFE> TURN ON SOLID CHECKING AS SOON AS ITS SAFE (NOT 
;		    OVER SOLID).  EXECUTING THIS COMMAND WHILE THE ENTITY IS
;		    STANDING ON A SOLID RAMP ABOVE A LOWER RAMP WILL CAUSE
;		    HIM TO FALL TO THE LOWER ONE.
;		ANY OTHER VALUE = A NEW SOLID CHAR VALUE TO BE USED.
;
;	IF YOU WANT TO BE ABLE TO JUMP UP THROUGH ALL SOLIDS DO THE FOLLOWING:
;	 1. ISSUE AN INSTRUCTIONS,2 COMMAND, DO SOLIDSTATE,OFF FOLLOWED
;	  BY SOME UPWARDS MOMENTUM.
;	 2. WHEN YOU REACH THE TOP OF THE UPWARD MOMENTUM, DO SOLIDSTATE,SAFE.
;	 3. MAKE ABSOLUTELY SURE THAT YOU TURN SOLIDSTATE,SAFE AT THE TOP
;	  OF YOUR JUMP AND THAT ANY INTERRUPTING ROUTINE SUCH AS HURT DOES
;	  THE SAME JUST TO MAKE SURE.  ITS ALWAYS SAFE TO DO SOLIDSTATE,SAFE
;	  EVEN IF THEY WERE ON.  BUT IF YOU INTERRUPT AND YOUR CODE FAILS TO
;	  DO SAFE, YOU WILL FALL OFF SCREEN BOTTOM.
;
;	IF YOU WANT TO BE ABLE TO JUMP UP THROUGH SOME BUT NOT OTHERS
;	DO THE FOLLOWING:
;	1. ISSUE AN INSTRUCTIONS,2 COMMAND, DO SOLIDSTATE,H'XX USING
;	THE VALUE OF SOLID THAT NEVER GOES OFF.  THEN DO SOME UPWARDS
;	MOMENTUM.
;	2. WHEN YOU REACH THE TOP, DO INSTRUCTIONS,2 FOLLOWED BY 
;	SOLIDSTATE,H'xx AND THEN SOLIDSTATE,SAFE.  xx IS THE VALUE OF
;	SOLID THAT CAN BE JUMPED THROUGH.  
;	3. RULE 3 FROM ABOVE APPLIES JUST AS MUCH.
;
;0B = 	<IDENTIFY> SPECIFY ENTITY TARGET LEVEL. THIS COMMAND IS USED TO ASSIGN 
;	THIS ENTITY TO A SPECIFIC LEVEL FOR THE TARGET COMMANDS.  THERE ARE 
;	UP TO 16 LEVELS (BITS).  YOU SPECIFY A WORD VALUE HERE WITH BIT(S)
;	SET FOR THE LEVEL(S) YOU WISH TO BE ASSOCIATED WITH.  THEN
;	THE SPECIFY TARGET COMMAND IS USED BY OTHER ENTITIES TO DETECT
;	OR IGNORE THE PRESENSE OF YOUR TARGET LEVEL.  FOR INSTANCE, YOU
;	COULD ASSIGN THE HERO ENTITY TO LEVEL 0001.  THEN ENTITIES 
;	CONSIDERED "ENEMIES" COULD SPECIFY A TARGET OF 0001 OR ANY
;	OTHER VALUE WITH BIT 0001 SET AND THEY WOULD CONSIDER YOUR
;	HERO ENTITY SOMETHING TO TRACK.  AT WAKE UP, THIS VALUE IS
;	SET TO 0.   1 WORD FOLLOWS THIS COMMAND:
;		1 WORD IDENTIFICATION LEVEL
;
;	SOME RECOMMENDED BIT POSITIONS ARE DEFINED BELOW ALONG
;	WITH EQUATE NAMES TO USE IF YOU WANT TO TARGET ONLY THEM.
;	WARNING!!!! ITS EASY TO FORGET THAT THE VALUE FOLLOWING THIS
;	COMMAND MUST BE A .DRW!!!!
;
;	0001 = <HERO0> HERO 0
;	0002 = <HERO1> HERO 1
;	0004 = <ENEMY> ENEMY WHO ATTACKS HEROS 
;	0008 = <HELPER> ENEMY WHO ATTACKS ALL BUT HEROS 
;	0010 = <BENIGN> ENTITY WHO ATTACKS ONLY THOSE WHO ATTACK HIM 
;	0020 = <HARMLESS> ATTACKABLE ANIMAL OR PERSON WHO NEVER ATTACKS
;	0040 = <KILLER> ENEMY WHO ATTACKS ANYTHING DEFINED ABOVE 
;	0080 = <DEADLY> UNKILLABLE OBJECT THAT WILL KILL IF CONTACTED (BOMB)
;	0100 = <BULLET0> HERO 0'S PROJECTILE (HERO BULLET)
;	0200 = <BULLET1> HERO 1'S PROJECTILE
;	0400 = <BULLET> ENEMIES PROJECTILE (ENEMY BULLET)
;	0800 = <PLATFORM> TRANSPORT PLATFORM
;	1000 = <HEART> HEALTH OR FUEL
;	2000 = <PRIZE> PRIZE
;	4000 = <SUPPLY> PROJECTILE SUPPLY (BULLETS, BOMBS, ETC)

;THE FOLLOWING BIT IS HARD CODED INTERNALLY TO REFER TO THE LAST ENTITY
;WHO ATTACKED YOU AND INFLICTED DAMAGE.  IT SHOULD NEVER BE USED IN
;THIS COMMAND (LEAVE IT OFF).  IT IS USED ONLY IN THE SPECIFY TARGET
;COMMAND (9C) AND TAKES PRIORITY OVER ALL OTHER BITS.

;	8000 = <ASSAILANT> LAST ENTITY THAT ATTACKED THIS ENTITY

;0C = 	<TARGET> SPECIFY TARGET.  THIS COMMAND IS USED TO SPECIFY THE "TARGET"
;	LEVEL THAT THE ENTITY TRACK AND RANGE COMMANDS WILL TEST.  
;	AT WAKE UP THE TARGET IS SET TO A VALUE OF 0 (NO TARGET).  
;	1 WORD FOLLOWS THIS COMMAND AND BITS ARE SET HERE TO DETECT 
;	THE DESIRED TARGET. SEE COMMAND 1B.

;	FOR MORE COMPLEX TARGETING YOU CAN USE AN "OR" (|) TO ADD THEM
;	UP.  FOR INSTANCE: 
;		.DB TARGET
;		.DRW HERO0 | HERO1 | BENIGN

;0D = 	<XTRACK> SPECIFY X TARGET TRACKING. THIS COMMAND CAUSES ALL X MOMENTUM 
;	COMMANDS (WHEN EXECUTED, NOT AFTER STORAGE) TO BE SIGN CORRECTED 
;	ACCORDING TO THE DIRECTION OF THE DEFINED TARGET.  1 BYTE 
;	FOLLOWS THIS COMMAND:
;		0=<NONE> NO TRACKING AT ALL
;		1=<TOWARDS> TRACK TOWARDS TARGET (ATTEMPTS TO ALIGN THIS
;		  ENTITIES CENTER WITH THE TARGET ENTITIES CENTER)
;		2=<AWAY> TRACK AWAY FROM TARGET
;		3=<ORIGIN> TRACK TOWARDS LAUNCHING COLUMN.  IF THIS ENTITY
;		  WAS LAUNCHED BY ANOTHER ENTITY, YOU WILL GO RIGHT.
;0E = 	<YTRACK> SPECIFY Y TARGET TRACKING.  1 BYTE FOLLOWS THIS COMMAND:
;		0=<NONE> NO TRACKING AT ALL
;		1=<TOWARDS> TRACK TOWARDS TARGET (ATTEMPTS TO ALIGN THIS 
;		  ENTITIES FEET WITH THE TARGET ENTITIES FEET).
;		2=<AWAY> TRACK AWAY FROM TARGET
;		   <ORIGIN> UNAVAILABLE ON YTRACK AT THIS TIME
;0F = 	<WORLD> REQUEST WORLD (FOR WHEN A SPECIAL ENTITY IS KILLED).  1 BYTE
;	FOLLOWS THIS COMMAND:
;		1 BYTE WORLD NUMBER TO REQUEST.	 USE:
;			1-254 FOR A WORLD FROM USE_BACK
;			-1 FOR THE BOOT SCREEN
;			0 <REGISTER> FOR THE ENTITIES REGISTER.
;	 
;10 =	<JOYSTICK> GRAB JOYSTICK (#0 OR 1).  1 BYTE FOLLOWS THIS COMMAND, 
;	THE JOYSTICK NUMBER TO GRAB.   THE JOYSTICK'S MOMENTUM IS NOT 
;	ZEROED SO USE THE ZERO JOYSTICK MOMENTUM COMMAND. ONCE A JOYSTICK 
;	IS GRABBED, THIS ENTITY WILL BE UNDER ITS CONTROL AS FOLLOWS:
;	    1. 	BUTTON A WILL ACTIVATE YOUR JUMPING MODE AND THE RESUME
;		COMMAND WILL BE ENABLED.
;	    2.  BUTTON B WILL ACTIVATE YOUR ATTACKING MODE AND THE RESUME
;		COMMAND WILL BE ENABLED.
;		IT IS RECOMMENDED THAT YOU DECIDE WHICH OF THE ATTACKS IF
;		ANY TO USE OR DECIDE TO SHOOT.  THE RESUME COMMAND
;		WILL RETURN YOU TO THE EXECUTE POINT PREVIOUS TO THE
;		BUTTON PRESS (COMMAND 27).  IT IS RECOMMENDED THAT
;		YOUR ATTACK ROUTINE USE AN ANIMATION PTR OF -1 TO
;		PREVENT THE TEMPORARY SELECTION OF AN ANIMATION WHICH
;		WILL BE DISCARDED IN FAVOR OF THE ONE YOUR CODE DECIDES
;		ON (IT WOULD PUT UP SHOOT BUT YOU MIGHT DECIDE TO
;		ATTACK).
;	    3.  BUTTON DOWN WILL ACTIVATE YOUR DUCKING MODE IF YOU ARE
;		STANDING ON SOLID.  
;	    4.  WORLD COMMAND MODE WILL BE ACTIVATED IF YOU STEP ONTO A 
;		WORLD COMMAND IN THE PROPER ROWS. (STANDARD FOR ALL 
;		ENTITIES REGARDLES OF JOYSTICK IF THE BIT IS SET).
;	    5.  FALLING WILL BE ACTIVATED IF YOUR ENTITY TRAVELS IN
;		THE GRAVITY DIRECTION WITH NO SOLID UNDERNEITH.  ITS
;		THEN SHUT OFF UNTIL THE ENTITY STANDS ON SOLID AGAIN.	
;		(STANDARD FOR ALL ENTITIES REGARDLESS OF JOYSTICK CONTROL).
;	    5.  SCORE 0 WILL BE UPDATED WHEN AN ENTITY IS KILLED BY
;		THE ENTITY UNDER JOYSTICK 0s CONTROL.  SCORE 1 WILL
;		BE UPDATED WHEN AN ENTITY IS KILLED BY THE ENTITY UNDER
;		JOYSTICK 1s CONTROL.  DAMAGE TO EITHER ENTITY WILL
;		BE REFLECTED IN THE APPROPRIATE HEALTH STATUS BAR.
;		SCREEN SCROLL WILL BE ADJUSTED ACCORDING TO THE DEMANDS
;		OF THESE ENTITIES.
;
;11 =	<ADDJOYX> ADD JOYSTICK X MOMENTUM.  THE CURRENTLY STORED X AXIS
;	JOYSTICK MOMENTUM WILL BE ADDED TO YOUR ENTITIES X MOMENTUM,
;	HIS Y WILL NOT BE CHANGED.  TRACKING WILL NOT EFFECT THE VALUE,
;	THE JOYSTICK ARROW KEY PRESSED CONTROLS THE SIGN OF THE MOMENTUM.
;	THE JOYSTICK MOMENTUM WILL BE ZEROED AFTER USAGE.
;12 =	<ADDJOYY> ADD JOYSTICK Y MOMENTUM.  SAME AS ADDJOYX BUT IT
;	WORKS WITH THE Y MOMENTUM.
;13 =	<ZEROJOYX> ZERO JOYSTICK X MOMENTUM
;14 =	<ZEROJOYY> ZERO JOYSTICK Y MOMENTUM
;15 =	<BUTTON> MOVE EXECUTE POINTER IF ANY JOYSTICK BITS ARE SET.  
;	SEE <NOTBUTTON>.  3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE BITS TO BE SET:
;			<A_BUTTON> 
;			<B_BUTTON> 
;			<SELECT> 
;			<START> 
;			<UP> 
;			<DOWN>
;			<LEFT>
;			<RIGHT>
;EXAMPLE:	UP|DOWN  = UP OR DOWN SET.

;16 =   <SEQUENCE> ACTIVATE ANIMATION SEQUENCE AND OPTIONS.  THIS CAN BE USED
;	TO EXTEND THE SIZE OF YOUR TABLE BEYOND THE NUMBER OF ENTRIES
;	IT ALREADY CONTAINS.  
;
;	A POINTER FOLLOWS THIS COMMAND AND IT POINTS TO A STRUCTURE 
;	WITH THE SAME FORMAT AS THE STRUCTURE
;	USED IN THE ANIMATION/MOVEMENT LIST:
;
;	1 WORD PTR THAT POINTS TO:
;	      	1 WORD ANIMATION SEQUENCE (OR -1)
;	      	1 WORD MOVEMENT LIST (OR -1)
;		INIT FLAG, DAMAGE FLAG #1
;		DAMAGE FLAG #2, DAMAGE FLAG #3
;		DAMAGE FLAG #4, DAMAGE FLAG #5
;17 =	<RESUME> RESUME PREVIOUS COMMAND.  THIS COMMAND CAN BE USED TO IGNORE
;	AN EXTERNAL (JOYSTICK OR ENTITY ATTACK) REQUEST TO ACTIVATE
;	A GIVEN MODE.  IT IS IGNORED IF WE ARE NOT CURRENTLY IN A 
;	MODE REQUESTED EXTERNALLY. USE THIS IN COMBINATION WITH SETTING THE
;	ANIMATION TO -1 AND POINT YOUR MOVEMENT LIST TO A DECISION
;	MAKING DATA STREAM WHICH USES COMMAND 26 TO ACTIVATE THE DESIRED
;	ANIMATION OR MODE OR ELSE USES COMMAND 27 (THIS COMMAND) TO
;	IGNORE THE REQUEST.
;
;	RESUME WILL RESTORE THE DELAY COUNTER PRIOR TO THE INTERRUPTION
;	AND IT RESTORES THE INTERRUPT STATE PRIOR TO THE INTERRUPTS. AT
;	THE START OF ANY INTERRUPT (JUMP, ATTACK, DUCK, ETC) ALL INTERRUPTS
;	ARE DISABLED BECAUSE THERE IS ONLY 1 RESUME POINTER.  IT WOULD
;	BE A PROBLEM IF YOU CODE WERE MAKING A DECISION TO RESUME AND
;	ANOTHER INTERRUPT INTERCEDED THUS ERASING YOUR NEEDED RESUME POINTER.
;	FOR THIS REASON, BE CAREFUL WITH RESUMES.  YOU SHOULD ALWAYS THINK
;	ABOUT WHAT WOULD HAPPEN IF AN INTERRUPT TOOK PLACE BEFORE YOUR
;	RESUME COMMAND AND REMEMBER THAT INTERRUPTS ARE DISABLED AT THE
;	START OF AN INTERRUPTING ROUTINE.    ALSO REMEMBER THAT YOUR
;	REGISTER IS NOT SAVED DURING AN INTERRUPT.  YOU SHOULD NOT USE
;	IT IF YOU ARE GOING TO RESUME BECAUSE YOU'LL CHANGE ITS CONTENTS.
;
;	AFTER THE RESUME IS ISSUED, CLOCKPHASE MORE COMMANDS ARE EXECUTED
;	AT THE RESUME POINT.  THIS IS DONE TO KEEP FROM LOCKING OUT
;	YOUR OTHER CODE IN CASES SUCH AS A WORLD COLUMN COMMAND.  THUS
;	IF YOUR CLOCKPHASE IS 3 THEN 3 COMMANDS WILL BE EXECUTED AFTER
;	YOUR RESUME.
;
;	HERE IS A RULE YOU MUST FOLLOW!!!:  INTERRUPTS MUST REMAIN DISABLED
;	FROM THE START OF AN INTERRUPTING ROUTINE UNTIL ANY POINT WHERE
;	A RESUME MIGHT TAKE PLACE.  OTHERWISE, JUST BEFORE YOUR RESUME IS
;	EXECUTED AN INTERRUPTING ROUTINE MIGHT DESTROY THE RESUME POINT
;	AND WHEN YOU FINALLY DID HIT THAT RESUME YOU'D BE IN AN ENDLESS
;	LOOP.
;18 =	<DING> DING.  USED TO MAKE A DING FOR DEBUGGING.
;19 =	<FINISH> WAIT FOR ANIMATION TO FINISH AND FREEZE.  USE THIS FOR 
;	AUTOFREEZE ANIMATIONS SUCH AS ATTACKS THAT YOU WANT TO WAIT TO 
;	COMPLETE VISUALLY BEFORE CONTINUING.  IT IS RECOMMENDED THAT YOU 
;	USE THE DELAY COMMAND AFTER THIS FOR A DURATION OF 2 TO INSURE 
;	THAT THE LAST FRAME OF THE ANIMATION WAS UP LONG ENOUGH TO SEE. OR
;	ADD AN EXTRA FRAME TO THE END THAT SHOWS THE SAME FRAME.
;1A =   <SETCOUNTER> SET COUNTER.  THE COUNTER WILL TICK DOWN AT THE RATE OF 
;	1/15 SECOND AND STOP AT 0.  IF YOU CHANGE CLOCKPHASE TO 1/30 SECOND,
;	YOUR COUNTER (AND ALTERNATE) WILL RUN AT THE NEW SPEED. 
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE COUNTER VALUE.  USE 0 <REGISTER> IF YOU WANT TO GET
;		  THE LOW BYTE OF THE REGISTER. IF YOU ACTUALLY WANTED TO CLEAR
;		  THE COUNTER, PUT 1 HERE AND IT WILL BE CLEAR NEXT CYCLE.
;1B =	<COUNT> MOVE EXECUTE POINTER IF COUNTER IS BELOW OR EQUAL TO A 
;	SPECIFIED VALUE.  SEE <ABOVECOUNT> 3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE COUNTER VALUE TO BE BELOW.
;
;1C =	<FRICTION> SPECIFY FRICTION.  FRICTION VALUES SHOULD BE + AND SMALL
;	(0-32) BUT NEGATIVE FRICTIONS MAY BE USED FOR WEIRD EFFECTS (NOT -1).
;	2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE NEW X FRICTION (-1 FOR NO CHANGE)
;		1 BYTE NEW Y FRICTION (-1 FOR NO CHANGE)
;1D =	<GOTO> ABSOLUTE PUT OF ENTITY TO A SCREEN POSITION.  SEE WORLDGOTO.
;		2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE SCREEN X LOCATION OR <REGISTER> OR -1 FOR NO CHANGE.
;	          (YOU CAN'T USE 0 FOR THE X, LOAD REGISTER WITH 0)
;		1 BYTE SCREEN Y LOCATION FOR THIS ENTITIES FEET.
;		  <REGISTER> FOR REGISTER CONTENT OR -1 FOR NO CHANGE.
;		  (YOU CAN'T USE 0 FOR THE Y, LOAD REGISTER WITH 0).
;		  NOTE: IF YOU TRY TO LOAD REGISTER WITH -1 YOU WILL GET
;		  THE SAME RESULTS AS -1 AS WITH ALL COMMANDS.
;1E =	<DIE> GO AWAY.  THIS COMMAND WILL CAUSE YOUR ENTITY TO GO INACTIVE AND
;	FREE UP THE ENTITY SLOT.  DON'T USE THIS COMMAND ON THE HERO
;	OR YOU WILL LOSE CONTROL OF THE GAME. 1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE FLAG:
;		     0 = DON'T MARK AS KILLED
;		     1 = MARK ENTITY AS HAVING BEEN KILLED
;1F =	<LAUNCH> RELATIVE LAUNCH OF AN ENTITY.  USE THIS COMMAND TO 
;	THROW BULLETS, BOMBS, OR FOR SPECIAL STRUCTURES COMPRISED OF 
;	MULTIPLE ENTITIES SUCH AS WHIPS.  4 BYTES FOLLOW THIS COMMAND:
;		1 BYTE ENTITY NUMBER TO LAUNCH.  USE 0 <REGISTER> TO USE
;		  THE VALUE IN THE ENTITIES REGISTER.  THIS
;		  MEANS YOU CAN'T LAUNCH ENTITY 0 WITH THIS COMMAND!
;		1 BYTE LAUNCH X OFFSET RELATIVE TO THIS ENTITIES LEFT CORNER.
;		1 BYTE LAUNCH Y OFFSET RELATIVE TO THIS ENTITIES TOP.
;		1 BYTE VALUE TO PLACE INTO PARAM2 OF THAT ENTITY.
;20 =	<STANDING> MOVE EXECUTE POINTER IF IN CONTACT WITH SOLID.
;	2 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;
;21 =	<DAMAGE> APPLY DAMAGE TO HEALTH.  THIS COMMAND WILL TAKE THE DAMAGE 
;	REQUESTED WHEN THIS ENTITY WAS LAST ATTACKED AND APPLY IT TO THE 
;	ENTITIES CURRENT HEALTH LEVEL. THE DAMAGE WILL THEN BE CLEARED. IF THE
;	ENTITIES HEALTH GOES TO ZERO IT WILL REMAIN AT ZERO.
;22 =	<ASSESS> MOVE EXECUTE POINTER IF HEALTH IS LESS THAN OR EQUAL TO A
;	VALUE.  THIS COMMAND ALLOWS YOU TO DECIDE WHEN TO EITHER "THROW" 
;	YOUR ENTITY BACK TO PREVENT CONTINUOUS DAMAGE OR WHEN TO MAKE IT
;	DIE. MANY OF THE COMPARE COMMANDS USE LESS THAN ONLY BUT THIS ONE
;	ALSO INCLUDES EQUAL TO SINCE THE MOST COMMON VALUE TO LOOK FOR
;	IS ZERO.  IF YOU WANT MORE CONTROL OVER APPRAISING HEALTH, USE
;	THE FETCHREG COMMAND TO GET THE VALUE. 3 BYTES FOLLOWS THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE HEALTH VALUE TO TEST FOR
;23 =	<ATTACKER> MOVE EXECUTE POINTER IF LAST ATTACKER MATCHES.  EVEN IF
;	HURTING IS DISABLED YOU CAN USE THIS COMMAND.  THE LAST ATTACKER
;	IS SET TO 255 AT ENEMY LAUNCH SO IF YOU ARE CHECKING FOR AN
;	ENTITY OTHER THAN 255 YOU CAN CONTINUALLY LOOP USING THIS COMMAND
;	UNTIL YOU FIND THE ONE YOU WANT. 3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE ENTITY NUMBER FROM ENTITYTAB OF LAST ATTACKER TO 
;		  LOOK FOR.
;24 =	<ATTACK> MOVE EXECUTE POINTER IF GIVEN ATTACK WAS SPECIFIED.  
;	THIS COMMAND ALLOWS YOU TO SEE WHAT ATTACK THE LAST ATTACKER REQUESTED 
;	AGAINST YOUR ENTITY.  THE ATTACK HE REQUESTED WAS SPECIFIED IN HIS 
;	DAMAGE FLAGS AND ALLOWS VALUES 0-F.  3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE ATTACK NUMBER TO MATCH
;25 =	<SPEED> MOVE EXECUTE POINTER IF MOMENTUM IS BELOW OR = TO A GIVEN VALUE.  
;	THIS COMMAND ALLOWS YOU TO MAKE AN ENTITY FLOW INTO A "STANDING"
;	ANIMATION SEQUENCE WHEN HIS MOMENTUM DROPS TOO LOW.  OR YOU CAN
;	DECIDE TO ENTER A RUNNING MODE IF IT GETS TOO FAST.
;	THERE ARE 2 TYPES OF MOMENTUM, X AND Y AXIS.  THIS COMMAND CAN
;	TEST EITHER OR BOTH BUT IT WILL ONLY TEST THE ABSOLUTE VALUE
;	OF THE MOMENTUM, IT CONVERTS NEGATIVE MOMENTUM TO + BEFORE
;	CHECKING.  IF BOTH MOMENTUMS ARE TESTED, BOTH MUST PASS THE
;	TEST.  REMEMBER THAT MOMENTUM IS STORED IN HIGHER RESOLUTION
;	THAN WILL ACTUALLY PRODUCE MOVEMENT. BEFORE MOVING THE ENTITY
;	IT IS DIVIDED BY 8.  4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE X MOMENTUM OR -1 FOR DON'T CARE
;		1 BYTE Y MOMENTUM OR -1 FOR DON'T CARE
;26 =	<REARM> RE-ARM ATTACK.  ATTACKS ARE ARMED WHEN A NEW SPRITE ANIMATION
;	IS LOADED.  THE DAMAGE FLAGS MUST ALSO ENABLE ATTACK.  WHEN THE
;	ATTACK IS TRIGGERED, THAT ENTITY WILL NOT ATTACK AGAIN UNTIL
;	A NEW ANIMATION IS LAUNCHED OR UNTIL THIS COMMAND IS ENCOUNTERED.
;	USE THIS COMMAND IN A LOOP FOR A CONTINUOUS ATTACKER.   REARMING
;	DOES NOT RESET THE ATTACKED BIT USED BY THE <ATTACKED> COMMAND.
;27 =	<ATTACKED> MOVE EXECUTE POINTER IF YOU HAVE ATTACKED SOMEONE.  WHEN AN ENTITY
;	ATTACKS SOME OTHER ENTITY, A BIT IS SET.  YOU CAN TEST THIS AND
;	BRANCH.  THE BIT IS RESET BY THE TEST.  2 BYTES FOLLOWS THIS:
;		1 WORD NEW POINTER
;28 =	<FRAME> MOVE EXECUTE POINTER IF ANIMATION FRAME IS EQUAL TO OR GREATER 
;	THAN. THIS COMMAND IS USED TO MAKE SPECIAL EFFECTS TIMED TO YOUR 
;	ANIMATION WITHOUT RESORTING TO USE OF THE COUNTER.  FOR INSTANCE, AN 
;	ENTITY THAT THROWS A ROCK ON FRAME #3.  YOUR ANIMATION SHOULD BE SELF
;	FREEZING FOR BEST RESULTS.  IF YOU WANT IT TO GO OVER AND OVER,
;	BEST TO WAIT FOR THE FREEZE AND THEN REPEAT THE SAME LOGIC BY
;	USING ACTIVATE WITH THE SAME ANIMATION/MOVEMENT LIST.  3 BYTES
;	FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE FRAME #
;29 =	<DISPLAY> GO INFRONT/BEHIND BACKGROUND.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE.  0=<TOFRONT> .  H'20=<BEHIND> 
;2A =	<WORLDCMD> MOVE EXECUTE POINTER IF PARAM1 PASSED BY A WORLD COMMAND
;	MATCHES A GIVEN VALUE.  WHEN YOUR ENTITY STEPS ONTO A WORLD COMMAND
;	AND IS BETWEEN THE SPECIFIED ROWS IN THE COMMAND, THE LAST 2 BYTES
;	OF THE COMMAND ARE PLACED IN PARAM1 AND PARAM2 FOR YOU TO TEST.
;	SINCE PARAM1 IS RECOMMENDED TO BE THE COMMAND BYTE, THE TEST FOR
;	IT HAS BEEN NAMED WORLDCMD TO CLARIFY YOUR CODE.  THIS COMMAND
;	WILL MOVE THE EXECUTE POINTER IF PARAM BYTE #1 MATCHES THE ONE
;	YOU SPECIFY.  SEE THE KUNGFU.ASM MODULE FOR THE EQUATES TO USE
;	FOR A GIVEN COMMAND AND TRY TO STICK TO THEM FOR READIBILITY.
;	3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE VALUE TO MATCH.
;			EXAMPLE USAGE:  
;			.DB	WORLDCMD	;SEE WHAT THE COMMAND IS
;			.DRW	WALKUP		;YOUR CODE THAT WALKS UP
;			.DB	DOOR		;IF THE COMMAND IS A DOOR
;2B =	<IFPARAM> MOVE EXECUTE POINTER IF PARAM2 IS A GIVEN VALUE.  SEE ABOVE
;	DESCRIPTION, THIS COMMAND TESTS THE SECOND PARAMETER BYTE.
;	3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE VALUE TO MATCH
;2C =   <INSTRUCTIONS> SET INSTRUCTIONS LEFT TO EXECUTE.  THE STATE MACHINE
;	WILL EXECUTE UP TO 2 INSTRUCTIONS PER CYCLE FOR EACH ENTITY.  IF
;	A MOMENTUM COMMAND IS ENCOUNTERED, THE CYCLE WILL END EVEN IF THAT
;	WAS THE FIRST INSTRUCTION (THIS IS DONE TO PACE OUT YOUR MOMENTUM
;	TO A GUARANTEED RATE).  THE INSTRUCTIONS COMMAND ALLOWS YOU TO
;	FORCE THE EXECUTION OF A NUMBER OF INSTRUCTIONS.  YOU CAN FORCE
;	EXECUTION OF THIS MANY INSTRUCTIONS EVEN IF MOMENTUM COMMANDS
;	ARE ENCOUNTERED OR YOU CAN FORCE EXECUTION OF THIS MANY INSTRUCTIONS
;	UNTIL A MOMENTUM COMMAND IS ENCOUNTERED.  THIS IS USEFUL FOR
;	ROUTINES THAT DON'T KNOW IF THEY WERE CALLED AS A SECOND INSTRUCTION
;	FROM ANOTHER PLACE AND THUS HAVE ONE MORE LEFT TO RUN OR IF THEY
;	WERE INTERRUPTED INTO AND HAVE 2. ALSO, YOU CAN BETTER CONTROL
;	SYSTEM STATUS FOLLOWING AN ENABLE BUTTON COMMAND IF YOU CAN
;	GUARANTEE TO FINISH INSTRUCTIONS BEFORE AN INTERRUPT FROM THE
;	BUTTON.  BE CAREFUL WITH THIS COMMAND BECAUSE PROCESSOR POWER IS
;	LIMITED AND ALL OTHER ENTITIES ARE LOCKED OUT UNTIL YOUR INSTRUCTIONS
;	ARE EXECUTED.  ALL 16 ENTITIES HAVE TO EXECUTE WITHIN 1/15 SECOND
;	OR THE MACHINE WILL MISS A CYCLE AND IT WILL LOOK JERKY OR SLOW DOWN.
;
;	PLEASE NOTE THAT THE FOLLOWING COMMANDS WILL CAUSE TERMINATION EVEN
;	IF YOU FORCE EXECUTION WITH A VALUE ABOVE 80H: DIE, WORLD, DELAY,
;	FREEZE, TESTFLAG, RESUME.
;
;	1 BYTE FOLLOWS THIS COMMAND:
;		0-7F TO FORCE EXECUTION OF THAT MANY COMMANDS FOLLOWING
;			THE COMMAND ITSELF. IF MOMENTUM IS ENCOUNTERED, IT
;			WILL ABORT THE REMAINING INSTRUCTIONS.   0 WILL
;			FORCE THIS TO BE THE LAST INSTRUCTION.
;		80-FF TO FORCE EXECUTION OF THAT MANY INSTRUCTIONS (LOW 7 
;		        BITS ONLY) NO MATTER WHAT.  80 IS 0, 81 IS 1, ETC.
;2D =	<SETMOM>  SET MOMENTUM (REPLACE OLD VALUE).  THIS
;	COMMAND IS USED TO SET THE X OR Y MOMENTUM VALUES TO A SPECIFIED
;	VALUE. USE THIS FOR ENTITIES THAT MOVE AT EXACT RATES WITHOUT
;	THE "OVERSHOOTING" OF ENTITIES THAT ADD MOMENTUM.  YOUR MOMENTUM
;	VALUES WILL BE SIGN CORRECTED FOR THE TRACKING YOU HAVE SELECTED
;	WITH XTRACK AND YTRACK IN CONJUNCTION WITH THE TARGET COMMAND.
;	2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE NEW X MOMENTUM VALUE (<NOCHANGE> OR -1 FOR NO CHANGE)
;		1 BYTE NEW Y MOMENTUM VALUE (<NOCHANGE> OR -1 FOR NO CHANGE)
;
;	SAMPLE USAGE:   .DB	SETMOM,0,0	;WILL STOP ENTITY ON X AND Y
;
;2E =	<TESTFLAG> TEST FOR WORLD COLUMN FLAGS.  THIS COMMAND FORCE THE
;	TESTING OF THE ENTITIES CURRENT SCREEN COLUMN POSITION TO SEE IF
;	THERE IS A WORLD COMMAND THERE.  USE THIS FOR SITUATIONS SUCH
;	AS CLIMBING UP A LADDER IN WHICH YOU WISH TO SEE IF THE ENTITY
;	IS STILL ON A LADDER REGION.  ONCE YOU RUN THIS COMMAND, YOUR
;	ENTITY EXECUTION WILL BE ENDED (EVEN IF YOU HAVE FORCED A NUMBER
;	OF COMMANDS TO EXECUTE).  THEN THE NEXT INSTRUCTION WILL BE RUN
;	IF THERE WAS NO COMMAND THERE OR IF THERE WAS THEN YOUR ECMD
;	ROUTINE WILL BE RUN INSTEAD.  
;2F =	<DISABLE> THIS COMMAND IS USED TO DISABLE INTERRUPTION OF YOUR
;	CODE BY EXTERNAL SOURCES.  YOU CAN DISABLE ANY OF THE INTERRUPTING
;	SOURCES INCLUDING THE JOYSTICK BUTTONS.  IF YOU SPECIFY TO
;	DISABLE A GIVEN FUNCTION AND ANOTHER IS ALREADY DISABLED, BOTH
;	WILL NOW BE DISABLED.  A FUNCTION REMAINS DISABLED UNTIL YOU
;	ENABLE IT.  ALSO, ANY INTERRUPTING ROUTINE DISABLES ALL INTERRUPTS
;	AUTOMATICALLY.  WHILE DISABLED, EVENTS THAT WOULD INTERRUPT YOU
;	ARE TOSSED OUT, THEY ARE NOT QUED.  BE CAREFUL DISABLING
;	HURT MODE SINCE YOUR ENTITY BECOMES INVULNERABLE.  1 BYTE
;	FOLLOWS THIS COMMAND:
;		1 BYTE FLAG OF WHAT TO DISABLE:
			.EQU	HURTING,H'01	;(EHURT)
			.EQU	FALLING,H'02	;(EFALL)
			.EQU	TESTING,H'04	;FOR WORLD COMMAND (ECMD)
			.EQU	JUMPING,H'08	;(EJUMP)
			.EQU	ATTACKING,H'10	;(EATTACK)
			.EQU	SELECTING,H'20	;SELECT KEY
			.EQU	DUCKING,H'40	;(EDUCK)
			.EQU	ALL,H'FF	;ALL OF THEM.

;	EXAMPLE: .DB DISABLE,FALLING | JUMPING	;DISABLES FALLING AND JUMPING
;
;30 =	<ENABLE>  THIS COMMAND IS THE OPPOSITE OF DISABLE.  REMEMBER THAT
;	ALL INTERRUPTS ARE DISABLED AT THE START OF A NEW INTERRUPT AND
;	YOU MUST USE THIS COMMAND TO ENABLE THEM OR YOU MUST USE A RESUME.
;	ALSO, WHEN AN ENTITY IS FIRST LAUNCHED, YOUR WAKEUP CODE NEEDS
;	TO ENABLE INTERRUPTS AS DESIRED BECAUSE THEY START OUT DISABLED.
;31 =	<SOUND> THIS COMMAND ALLOWS YOU TO LOAD OR CONTROL EACH OF THE
;	FOUR SOUND CHANNELS AVAILABLE TO THE STATE MACHINE.  YOU SPECIFY
;	THE NEW DESIRED STATE FOR EACH OF THE CHANNELS IN A SINGLE COMMAND.
;	YOU CAN EITHER START MUSIC OR A SOUND EFFECT, SILENCE ONE OR MORE
;	CHANNELS, OR LEAVE ANY OF THEM ALONE.  HOW YOU WANT TO USE THESE 
;	CHANNELS DEPENDS ON YOUR GAME DESIGN.  SUGGESTED USAGES:  
;	CHANNELS 0 AND 1 ARE FOR MUSIC USING VOICES 0 AND 1, CHANNEL 2 IS 
;	FOR BASE AND RYTHM USING VOICE2, CHANNEL 3 IS FOR SOUND EFFECTS 
;	OR PERCUSSION USING VOICE 3. 8 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW MUSIC FOR CHANNEL 0 (-1=DON'T CHANGE, 0=SILENCE)
;		1 WORD NEW MUSIC FOR CHANNEL 1 (OR -1 OR 0)
;		1 WORD NEW MUSIC FOR CHANNEL 2 (OR -1 OR 0)
;		1 WORD NEW MUSIC FOR CHANNEL 3 (OR -1 OR 0)
;	NOTE THAT FOR SOUND EFFECTS LIKE EXPLOSIONS, ANOTHER SLOT TO
;	INTERRUPT THIS ONE IS NEEDED.  USE THE <NOISE> COMMAND.  IT
;	PROVIDES ANOTHER SLOT THAT WILL INTERRUPT ANY OF THESE YET
;	PRESERVE THE MUSIC FOR THE WORLD IN CASE IT USES ALL 4 OF THESE
;	SLOTS.  IT IS RECOMMENDED TO USE THE <NOISE> COMMAND FOR ENEMY
;	NOISES AND THE <SOUND> COMMAND FOR MUSIC.
;32 =	<BOUNCE> THIS COMMAND WILL SPECIFY THE BOUNCE FACTOR FOR THE
;	ENTITY.  YOU CAN SPECIFY A POSITIVE BOUNCE FROM 0 TO 255.
;	THE VALUE YOU SPECIFY IS INCREMENTED PRIOR TO USAGE. 
;	THE MOMENTUM AFTER BOUNCING WILL BE THE RATIO OF THE ORIGINAL
;	VALUE X AS FOLLOWS:  NEW MOMENTUM = (OLD MOMENTUM)*(X+1)/256.
;	THIS MEANS THAT A VALUE OF 255 IS INCREMENTED TO 256 AND PRODUCES
;	A PERMANENT BOUNCE.  A VALUE OF 0 IS AUTOMATICALLY IGNORED AND
;	CONSIDERED THE BOUNCE DISABLE.
;
;	ALL BOUNCE FACTORING TAKES PLACE ONLY WHEN A GIVEN AXIS CONTACTS
;	SOLID AND HAS MOVED PREVIOUSLY.  SO FOR INSTANCE, GRAVITY DOES
;	NOT PRODUCE BOUNCE ON YOUR ENTITY UNLESS IT HITS THE SURFACE.
;	IT WON'T OSCILATE JUST BECAUSE ITS IN CONTACT.  HERE ARE SOME
;	SAMPLE BOUNCE FACTORS AND WHAT THEY DO:
;		255 REVERSES THE ENTITY WITH THE SAME VELOCITY
;		127 REVERSES THE ENTITY WITH HALF THE VELOCITY.
;		 32 REVERSES THE ENTITY WITH 1/8 VELOCITY.
;		  0 CANCELS BOUNCE ENTIRELY
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE BOUNCE FACTOR.
;
;33 =	<SETJOYX> SET JOYSTICK X MOMENTUM.  THE CURRENTLY STORED X AXIS
;	JOYSTICK MOMENTUM WILL REPLACE THE ENTITIES CURRENT X AXIS MOMENTUM
;	AND THE JOYSTICK MOMENTUM WILL BE ZEROED AFTER USAGE.
;34 =	<SETJOYY> SET JOYSTICK Y MOMENTUM.  SAME AS SETJOYX BUT IT
;	WORKS WITH THE Y MOMENTUM.
;35 =	<ACTIVE>  MOVE EXECUTE POINTER IF ENTITY IS ACTIVE.  IF THE
;	SPECIFIED ENTITY IS ACTIVE, THE EXECUTE POINTER IS MOVED.  YOU
;	CAN SPECIFY THE ENTITY BY WORLD COLUMN FLAG THAT LAUNCHED IT OR
;	BY THE NUMBER OF THE ENTRY IN THE ENTITYTAB.  IF THE ENTITY WAS
;	LAUNCHED BY ANOTHER ENTITY, YOU MUST USE THE ENTRY NUMBER FROM
;	ENTITYTAB SINCE NO WORLD COLUMN LAUNCHED IT.  YOU CAN CHECK FOR
;	ENTITIES OF YOUR OWN ID SAFELY, IT WON'T REPORT YOURSELF AS
;	BEING ACTIVE.  5 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE IDENTIFICATION TYPE:
			.EQU	COLUMN,0	;TO SPECIFY BY WORLD COLUMN
			.EQU	ID,1		;TO SPECIFY BY ENTITY #
;		1 WORD NUMBER TO MATCH.  IF FROM ENTITYTAB, ONLY LOW BYTE
;		  IS USED.  IF WORLD COLUMN, FULL WORD.  YOU CAN ALSO SPECIFY
;		  <REGISTER> FOR THE VALUE IN THE REGISTER (USES FULL WORD
;		  IF ID BY COLUMN, BYTE IF BY ID).  SINCE 0 IS <REGISTER>
;		  THIS MEANS YOU CAN'T MATCH 0 UNLESS YOU LOAD THE 
;		  REGISTER WITH 0.
;
;	SAMPLE USAGE:	.DB	ACTIVE
;			.DRW	HAVEBUGS	;SKIP TO HAVEBUGS
;			.DB	ID		;IF ENTITY
;			.DRW	23		;#23 IS ACTIVE
;
;36 =	<HURT>  HURT THE SPECIFIED ENTITY WITH THE SPECIFIED ATTACK
;	AND DAMAGE LEVEL.  THIS COMMAND ALLOWS YOU TO HURT AN ENTITY
;	OR ENTITIES WITHOUT ACTUALLY LAUNCHING AN ATTACK AGAINST THEM.
;	TYPICALLY, YOU WOULD USE IT TO REPORT TO AN ENTITY THAT YOU WANT
;	IT TO GO AWAY.   FOR INSTANCE, YOU MIGHT HAVE A WHIP WEAPON THAT
;	IS ATTACHED TO YOUR ENTITY AND AN UNUSUAL OCCURANCE MAKES IT
;	NECESSARY TO REMOVE IT PREMATURELY.  YOU CAN HURT IT DIRECTLY
;	AND REPORT AN ATTACK NUMBER TO IT THAT IT UNDERSTANDS AS A MESSAGE
;	TO GO AWAY.  IF YOU SPECIFY TO HURT BY ENTITY NUMBER FROM ENTITYTAB,
;	ALL ENTITIES WITH THAT NUMBER ARE HURT.   THIS ROUTINE DOES
;	NOT SET THE BIT SIGNALING THAT YOU ATTACKED SOMEONE NOR DOES IT
;	SET THE LAST VICTIM VARIABLE.  4 BYTES FOLLOW THIS COMMAND:
;		1 BYTE DAMAGE FLAG #3 TO USE, SAME AS IN ANIMATION 
;			TABLE DEFINITION
;		1 BYTE IDENTIFICATION TYPE OF THE ENTITY (<COLUMN> OR <ID>).
;		  	SEE COMMAND <ACTIVE> FOR MEANING OF EACH. YOU
;		        CAN ALSO SPECIFY <ALL> TO HURT ALL ENTITIES ON 
;			SCREEN EXCEPT FOR JOYSTICK ENTITIES.
;		1 WORD NUMBER TO MATCH.  IF FROM ENTITYTAB, ONLY LOW BYTE
;		  IS USED.  IF WORLD COLUMN, FULL WORD.  YOU CAN ALSO SPECIFY
;		  <REGISTER> FOR THE VALUE IN THE REGISTER (ONLY PROVIDES
;		  1 BYTE RANGE, TOP BYTE IS ZEROED). THIS MEANS YOU CAN'T 
;		  MATCH 0 UNLESS YOU LOAD THE REGISTER WITH 0.
;
;37 =	<ADDSCORE> ADD TO THE SCORE.  SCORES ARE ASSIGNED TO JOYSTICKS.
;	THERE ARE 2 SCORES KEPT BY THE STATE MACHINE AND EACH IS 2 BYTES.
;	THIS ALLOWS VALUES UP TO 65535.  TYPICALLY, YOU WOULD MULTIPLY
;	THE SCORE BY 100 WHEN DISPLAYED BY SIMPLY PAINTING 2 ZEROS TO THE
;	RIGHT OF IT.  YOU CAN ADD ANY 1 WORD VALUE TO THE SCORE.  IF THE
;	VALUE IS BELOW H'8000 IT WILL BE TREATED AS A POSITIVE VALUE AND
;	THE SOFTWARE WILL STOP AT 65535 IF OVERFLOW OCCURS.  IF THE VALUE
;	IS ABOVE H'8000, IT WILL BE TREATED AS A NEGATIVE VALUE AND
;	THE SOFTWARE WILL STOP AT 0 UNDER THE ASSUMPTION YOU ARE SUBTRACTING
;	YOUR VALUE FROM THE SCORE AS A PENALTY OF SOME KIND.  SINCE THE SCORE
;	DISPLAY IS ALSO UNDER YOUR CONTROL, YOU COULD ADD SLOWLY AND MAKE
;	A "DINGING" SOUND WITH EACH ADDITION TO SIMULATE A PINBALL MACHINE
;	BONUS EFFECT.   3 BYTES FOLLOW THIS COMMAND:
;		1 BYTE SCORE TO ADD TO:
			.EQU	JOY1,0		;JOYSTICK 0
			.EQU	JOY2,1		;JOYSTICK 1
			.EQU	OURJOY,2	;JOYSTICK OF THIS ENTITY
						;(IF NONE, WILL IGNORE CMD)
			.EQU	KILLERSJOY,3	;JOYSTICK OF LAST ATTACKER
						;(IF NONE, WILL IGNORE CMD)
;		1 WORD VALUE TO ADD TO THE SCORE OR <REGISTER> TO ADD
;		THE FULL WORD REGISTER CONTENTS 

;	SAMPLE USAGES:	.DB	ADDSCORE,KILLERSJOY	;ADDS 2 TO SCORE OF
;			.DRW	2			;LAST ATTACKER.
;
;			.DB	ADDSCORE,OURJOY		;PENALIZES US FOR 
;			.DRW	-5			;5 POINTS.
;
;38 =	<SETSCORE> SET THE SCORE.  FUNCTIONS THE SAME AS ADDSCORE BUT
;	IT REPLACES THE CURRENT VALUE WITH THE VALUE YOU SPECIFY.  USE
;	THIS IN YOUR BOOT WORLD TO INITIALIZE THE SCORE. YOU CAN'T
;	SET TO THE REGISTER, USE PUTSCORE FOR THIS.  3 BYTES FOLLOW
;	THIS COMMAND:
;		1 BYTE SCORE TO SET
;		1 WORD NEW VALUE			
;
;39 =	<SCORE> MOVE EXECUTE POINTER IF SCORE IS GREATER THAN OR EQUAL TO.
;	THIS CODE ALLOWS YOU TO MAKE DECISIONS BASED ON THE SCORE.  
;	5 BYTES FOLLOW THIS COMMAND:
;		1 BYTE SCORE TO TEST (SEE COMMAND 37)
;		1 WORD SCORE TO BE ABOVE OR EQUAL TO
;		1 WORD NEW POINTER
;
;3A =	<ADDHEROS> ADD TO THE HERO COUNT.  HERO COUNTS ARE ASSIGNED TO 
;	JOYSTICKS. THERE ARE 2 HERO COUNT VARIABLES AND EACH IS 1 BYTE.
;	THIS ALLOWS VALUES UP TO 255 HEROS.  YOU CAN ADD A 1 BYTE VALUE
;	TO THE HEROS COUNT.  IF THE VALUE IS BELOW H'80 IT WILL BE TREATED 
;	AS A POSITIVE VALUE AND	THE SOFTWARE WILL STOP AT 255 IF OVERFLOW 
;	OCCURS.  IF THE VALUE IS ABOVE H'80, IT WILL BE TREATED AS A NEGATIVE 
;	VALUE AND THE SOFTWARE WILL STOP AT 0 UNDER THE ASSUMPTION YOU ARE 
;	SUBTRACTING YOUR VALUE FROM THE HERO COUNT.  
;	2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE JOYSTICK'S HERO COUNT TO ADD TO. SEE CMD 37.
;		1 BYTE VALUE TO ADD TO THE HERO COUNT OR <REGISTER> TO
;		  USE THE REGISTER.  YOU CANNOT SPECIFY ABSOLUTE 0 HERE.
;
;	SAMPLE USAGE:	.DB	ADDHEROS,OURJOY,-1	;DECREMENT HERO COUNT
;
;3B =	<SETHEROS> SET THE HEROS COUNT.  FUNCTIONS THE SAME AS ADDHEROS BUT
;	IT REPLACES THE CURRENT VALUE WITH THE VALUE YOU SPECIFY.  USE
;	THIS IN YOUR BOOT WORLD TO INITIALIZE THE HERO COUNT. 2 BYTES FOLLOW
;	THIS COMMAND:
;		1 BYTE JOYSTICK'S HERO COUNT TO SET (SEE CMD 37)
;		1 BYTE NEW VALUE OR <REGISTER> TO
;		  USE THE REGISTER.  YOU CANNOT SPECIFY ABSOLUTE 0 HERE.
;
;3C =	<HEROS> MOVE EXECUTE POINTER IF HEROS COUNT IS GREATER THAN OR EQUAL
;	TO.  THIS CODE ALLOWS YOU TO MAKE DECISIONS BASED ON THE NUMBER
;	OF HEROS LEFT.  USE <GETHEROS> TO GET THE COUNT INTO THE REGISTER.
;	4 BYTES FOLLOW THIS COMMAND:
;		1 BYTE JOYSTICK HERO COUNT TO TEST (SEE COMMAND 37)
;		1 BYTE HERO COUNT TO BE ABOVE OR EQUAL TO
;		1 WORD NEW POINTER
;
;	SAMPLE USAGE:	.DB	HEROS,OURJOY,1 	;IF THERE ARE 1 OR MORE
;			.DRW	CONTINUE	;HEROS, GO TO CONTINUE:
;			.DB	SKIP		;OTHERWISE
;			.DRW	GAME_OVER	;GO TO GAME OVER LOGIC.
;
;3D =	<RESET> MOVE EXECUTE POINTER IF RESET FLAG IS FALSE.  THIS COMMAND
;	ALLOWS YOU TO INITIALIZE VARIABLES AFTER A SYSTEM RESET.  THE
;	RESET VARIABLE IS SET TRUE BY THE STATE MACHINE FOLLOWING A 
;	RESET OF THE NES.  NEXT WORLD #0 IS ACTIVATED.  YOU WORLD 0
;	CODE IS RESPONSIBLE FOR DETECTING THE START BUTTONS AND THE
;	CONTINUE OR SELECT BUTTONS.  IT SHOULD TEST THIS FLAG TO DECIDE
;	WHEN TO ZERO SCORES OR RESET HERO COUNTS OR PRIZES. AFTER YOU
;	USE THIS INSTRUCTION, THE RESET VARIABLE IS SET TO ZERO.  IF
;	YOU PUT THIS COMMAND IN YOUR BOOT LOGIC, SET THE POINTER TO JUMP
;	OVER THE INITIALIZATION VARIABLES AND YOU WILL EXECUTE THEM ONLY
;	IF ITS A RESET.
;	1 WORD FOLLOWS THIS COMMAND:
;		1 WORD NEW POINTER
;
;3E =	<SETREG>  THIS COMMAND ALLOWS YOU TO LOAD THE ENTITIES SINGLE
;	REGISTER WITH A #. THIS REGISTER IS USED TO TAKE SYSTEM VARIABLES OR
;	RANDOM NUMBERS AND USE THEM IN OTHER COMMANDS.  COMMANDS WILL
;	SPECIFY WHEN THEY ACCEPT <REGISTER> AS A PARAMETER.  THIS
;	COMMAND ALLOWS LOADING A FIXED VALUE INTO THE REGISTER.  2
;	BYTES FOLLOW THIS COMMAND:
;		1 WORD NUMERIC VALUE TO LOAD INTO THE REGISTER
;
;3F =	<FETCHREG> THIS COMMAND ALLOWS YOU TO GET STATE MACHINE VARIABLES
;	INTO THE REGISTER FOR USE WITH COMMANDS THAT ACCEPT THE REGISTER
;	AS INPUT.  IF THE VALUE YOU ARE GETTING IS ONLY A BYTE, THE HIGH
;	BYTE OF THE REGISTER IS ZEROED.  1 BYTE FOLLOWS THIS COMMAND TO 
;	SPECIFY WHAT TO GET INTO THE REGISTER:
;		1 BYTE WHAT TO GET:
;			<PARAM2> FOR THE ENTITIES PARAM2
;			<RANDOM> FOR A RANDOM NUMBER
;			<WORLDCMD> FOR THE LAST WORLD COMMAND WE HIT
;			<ATTACKER> FOR THE LAST ATTACKER.  THIS IS SET
;				TO -1 AT LAUNCH SO THAT YOU CAN HAVE AN
;				ENTITY WITH HURTING DISABLED.  EVEN WITH
;				HURTING DISABLED THIS WILL RETURN AN
;				ATTACK AGAINST YOU.
;			<ATTACK> FOR THE LAST ATTACK USED AGAINST THIS
;				ENTITY.  INVALID UNTIL YOU HAVE BEEN ATTACKED
;				AND IT IS NOT CLEARED AT LAUNCH.
;		   	<VICTIM> FOR THE LAST PERSON YOU ATTACKED
;			<WORLD> FOR THE CURRENT WORLD #
;			<HEALTH> FOR THIS ENTITIES HEALTH LEVEL
;			<ENTITY> FOR THIS ENTITIE'S ENTITYTAB NUMBER
;			<FACE> FOR THE DIRECTION THIS ENTITY IS CURRENTLY
;				FACING,  1 BYTE BIT ORIENTED:
				 ;BIT 80H = SET IF ENTITY FACING LEFT
				 ;BIT 40H = SET IF ENTITY UPSIDE DOWN
		
;			<XVISUAL> FOR THIS ENTITIES X LOCATION (CENTER)
;			<YVISUAL> FOR THIS ENTITIES Y LOCATION (FEET)
;			<SLOTS> FOR THE NUMBER OF FREE ENTITY SLOTS
;			<XDIR> FOR A FLAG SIGNALING THE DIRECTION OF
;				THE TARGETED ENTITY.  HERE ARE THE VALUES:
;				0=RIGHT OF YOU OR AT SAME X
;				1=LEFT OF YOU 
;				-1= NONE ON SCREEN
;			<YDIR> FOR A FLAG SIGNALING THE Y DIRECTION OF
;				THE TARGETED ENTITY. HERE ARE THE VALUES:
;				0=BELOW YOU OR ON SAME LEVEL
;				1=ABOVE YOU 
;				-1=NONE ON SCREEN
;			<BEHAVIOR> TO GET THE ENTITIES BEHAVIOR BITS
;			<XMOM> FOR THE ENTITIES CURRENT X MOMENTUM
;			<YMOM> FOR THE ENTITIES CURRENT Y MOMENTUM
;			<DEF_SOLID> FOR THE ENTITIES DEFAULT SOLID VALUE
;			       FROM HIS ENTITYTAB ENTRY.
;			<XLINK> FOR THE CURRENT X VALUE FOR A LINK TO
;				AN ENTITY.
;			<YLINK> FOR THE CURRENT Y VALUE FOR A LINK TO
;				AN ENTITY.
;			<MUSTDEFEAT> FOR THE NUMBER OF MUST DEFEAT ENTITIES
;				STILL ACTIVE (EVEN IF ASLEEP-ASLEEP MEANS
;				THEY ARE WAITING TO COME TO A CERTAIN SCREEN
;				COLUMN AS IN LAUNCH BYTE 5 OF COMMAND F0).
;				IF THE ENEMY USING THIS COMMAND IS MARKED 
;				MUSTDEFEAT, ITS NOT COUNTED.
;			<DAMAGE> FOR THE AMOUNT OF DAMAGE THE LAST ATTACK
;				REQUESTED.  USE THIS BEFORE THE DAMAGE
;				COMMAND SINCE IT CLEARS THIS VALUE.  FETCHREG
;				DOES NOT CLEAR IT.
;			<XDIST> FOR THE X DISTANCE TO THE NEAREST TARGETED
;				ENTITY.  ITS THE ABSOLUTE VALUE.  IF NONE,
;				-1 IS RETURNED.
;			<YDIST> FOR THE Y DISTANCE TO THE NEAREST TARGETED
;				ENTITY.  ITS THE ABSOLUTE VALUE.  IF NONE,
;				-1 IS RETURNED.
;			<ENTITYBITS> FOR THE FLAG THAT IS USED IN THE
;				ENTITITES ENTRY IN ENTITYTAB.
;
;	SAMPLE USAGE:	.DB	FETCHREG,RANDOM		;GET A RANDOM NUMBER
;			.DB	FETCHREG,PARAM2		;GET PARAMETER 2

;40 =	<ANDREG> THIS COMMAND WILL "AND" YOUR 1 WORD VALUE TO THE ENTITIES
;	REGISTER.  FOR INSTANCE, YOU MIGHT WANT A RANDOM NUMBER FROM 0-F
;	INSTEAD OF 0-FF.  YOU COULD FETCH THE RANDOM AND THEN AND IT TO 0F.
;	2 BYTE2 FOLLOW THIS COMMAND:
;		1 WORD VALUE TO AND TO THIS ENTITIES REGISTER
;
;41 =	<COMPARE> THIS COMMAND ALLOWS YOU TO COMPARE THE ENTITIES REGISTER
;	TO AN ABSOLUTE VALUE AND MOVE THE EXECUTE POINTER IF THE REGISTER 
;	IS ABOVE OR EQUAL TO THIS VALUE.  4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 WORD COMPARE VALUE
;42 =	<ADD> THIS COMMAND WILL ADD A 2 BYTE VALUE TO THE ENTITIES REGISTER.
;	ADD A NEGATIVE VALUE TO SUBTRACT.  THIS COMMAND DOES NOT
;	CHECK FOR WRAP ABOVE 1 WORD OR BELOW 0.  2 BYTES FOLLOW THIS COMMAND:
;		1 WORD VALUE TO ADD
;43 =	<SETPAUSE> THIS COMMAND WILL ALLOW YOU TO SET THE CONDITION OF THE
;	PAUSE FUNCTION.  YOU SHOULD SET THIS TO -1 <OFF> TO DISABLE PAUSING 
;	AND 1 <ON> TO ENABLE IT.  IT BEGINS DISABLED AT BOOT.  TYPICALLY,
;	YOUR WORLD 0 CODE SHOULD DISABLE IT AND YOUR WORLD 1 CODE SHOULD
;	ENABLE IT.  YOU CAN LEAVE IT DISABLED AND PUT YOUR CODE INTO
;	AND ENDLESS LOOP MANUALLY TO TAKE CONTROL OF PAUSE BUT THIS IS
;	NOT RECOMMENDED.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE PAUSE STATE DESIRED:
;			<OFF> OR <ON>
;44 =	<TABLE> THIS COMMAND ALLOWS YOU TO SKIP TO A NEW EXECUTION POINT
;	BASED ON THE VALUE IN THE REGISTER.  THE REGISTER IS MULTIPLIED
;	BY 2 AND USED AS AN INDEX INTO YOUR LIST. THE RANGE IS 128 ENTRIES
;	(0-127).  ANOTHER WAY TO LOOK AT IT IS THAT THE NUMBER 
;	IN THE REGISTER WILL BE THE ENTRY YOU 
;	SKIP TO.  0 GETS THE FIRST, 1 THE SECOND, ETC.  A VARIABLE
;	NUMBER OF WORDS FOLLOWS THIS COMMAND.  MAKE SURE YOU HAVE AN 
;	ENTRY FOR EACH POSSIBILITY OR YOU WILL CRASH.  CONSIDER USING
;	THE ANDREG COMMAND FIRST TO LIMIT THE RANGE.  THE HIGH BYTE OF
;	THE REGISTER IS IGNORED BUT YOU SHOULD TRY TO CLEAR IT FOR BEST
;	RESULTS IN THE FUTURE.
;
;	SAMPLE USAGE: 		.DB	FETCHREG,ATTACK	;GET LAST ATTACK
;				.DB	TABLE		;BRANCH BASED ON IT
;				.DRW	HURT0		;IF REG=0
;				.DRW	IGNORE		;IF REG=1
;				.DRW	BLOWUP		;IF REG=2
;				.DRW	PUKE		;IF REG=3
;
;
;45 =	<VICTIM> THIS COMMAND WILL MOVE THE EXECUTE POINTER IF THE LAST
;	PERSON YOU ATTACKED MATCHES THE VALUE YOU SPECIFY.  3 BYTES
;	FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE VALUE TO MATCH.
;46 =	<LOAD> THIS COMMAND WILL LOAD A VALUE FROM THE COMMON DATA
;	AREA INTO THE ENTITIES REGISTER.  THE COMMON DATA AREA HOLDS
;	32 BYTES.  IT IS USED FOR PRIZES, PASSING INFO ABOUT THE PROGRAM,
;	ETC.  A SEPERATE AREA OF COMMON DATA IS ALSO MAINTAINED.  THIS
;	AREA HOLDS A FULL WORD FOR EACH ENTITY.  YOU ACCESS IT BY SPECIFYING
;	<STATE> AS THE COMMON DATA RAM.  ALL OF THE COMMON DATA COMMANDS
;	GO INTO WORD MODE WHEN YOU SPECIFY <STATE>, OTHERWISE THEY OPERATE
;	BYTEWISE. 
;
;	THE HIGH BYTE OF THE REGISTER IS CLEARED BY THIS COMMAND,
;	ONLY 1 BYTE IS LOADED UNLESS <STATE> IS SPECIFIED. 
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE DATA TO BE FETCHED (0-31) OR <STATE> 
		.EQU	STATE,-1
;47 =	<STORE> THIS COMMAND WILL STORE THE ENTITIES REGISTER LOW BYTE INTO
;	A BYTE IN THE COMMON DATA AREA WHICH HOLDS 32 BYTES.  IF <STATE> IS
;	SPECIFIED A FULL WORD IS STORED. 1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE DATA LOCATION TO BE STORED INTO (0-31) OR <STATE> 
;48 =	<ADDDATA> THIS COMMAND ALLOWS YOU TO ADD THE REGISTER TO
;	A BYTE FROM THE COMMON DATA AREA.  THE RESULT IS STORED IN
;	THE REGISTER.  THE ADD WILL BE TO THE FULL WORD IN THE REGISTER
;	BUT ONLY A BYTE IS ADDED FROM THE COMMON DATA AREA RAM UNLESS
;	YOU SPECIFY <STATE> AS THE COMMON DATA AREA RAM.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE DATA LOCATION TO BE ADDED (0-31) OR <STATE> 
;49 =	<NOISE> THIS COMMAND ALLOWS YOU TO USE A SOUND CHANNEL THAT
;	IS SEPERATE FROM THE 4 USED BY THE MUSIC.  THIS SOUND CHANNEL
;	WILL BE LOST IF THE PLAYER PAUSES THE GAME.  ALSO, IT WILL
;	PROBABLY INTERRUPT GAME MUSIC AND SHOULD DEFFINATELY NOT
;	BE INTERRUPTED BY THE SOUND COMMAND.  HERE'S HOW YOU OUGHT TO
;	USE THIS COMMAND:  USE <SOUND> TO MAKE WORLD MUSIC.  THEN
;	PUT SHORT SOUND EFFECTS THAT ARE NOT CRITICAL INTO THIS
;	COMMAND.  KEEP IN MIND THAT ANOTHER <SOUND> COMMAND THAT
;	USES THIS VOICE AND IS RUN WHILE THIS ONE IS IN EFFECT 
;	WILL SUSPEND THIS ONE AND YOUR SOUND EFFECT MIGHT POP BACK 
;	WHEN THE MUSIC RUNS OUT.
;	IF YOU WANT TO <SOUND> AGAIN, THEN SILENCE THIS CHANNEL
;	FIRST FOR BEST SAFETY.  1 WORD FOLLOWS THIS COMMAND:
;		1 WORD NEW SOUND (0=SILENCE, -1 IS NOT SUPPORTED!)
;
;	THIS COMMAND WILL TURN OFF ANY OLD NOISES AND THUS HAS "PRIORITY".
;	USE <LOWNOISE> FOR LOWER PRIORITY STUFF THAT SHOULDN'T INTERRUPT
;	SOMETHING IN EFFECT.
;
;	IF YOU WANT TO TIME SOME SOUND EFFECTS TO A SPECIFIC FRAME
;	OF AN ANIMATION, HERE ARE THE PAUSE DURATIONS IN NMI CYCLES
;	(SAME SPEED AS ANIMATION):
;			PAUSE+N16 = 8 CYCLES
;			PAUSE+N8 = 16 CYCLES
;			PAUSE+N4 = 32 CYCLES, ETC.

;4A =   <SETALT> SET ALTERNATE COUNTER.  THE COUNTER WILL TICK DOWN AT THE 
;	RATE OF 1/15 SECOND AND STOP AT 0. CLOCKPHASE CHANGES WILL ALSO
;	CHANGE THIS SPEED.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE COUNTER VALUE.  USE 0 <REGISTER> IF YOU WANT TO GET
;		  THE REGISTER.  IF YOU ACTUALLY WANTED TO CLEAR
;		  THE COUNTER, PUT 1 HERE AND IT WILL BE CLEAR NEXT CYCLE.
;4B =	<ALTCOUNT> MOVE EXECUTE POINTER IF ALT COUNTER IS BELOW OR EQUAL
;	TO VALUE.  3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE COUNTER VALUE TO BE BELOW.
;
;4C =	<FACE>  FACE SPECIFIED DIRECTION.  THE DEFAULT IS TO FACE TOWARDS
;	THE DIRECTION YOU ARE TRAVELING.  IF YOU SPECIFY FACING A DIRECTION,
;	IT BECOMES PERMANENT TILL YOU CHANGE IT.  1 BYTE FOLLOWS THIS
;	COMMAND:
;		1 BYTE DIRECTION TO FACE:
;				<CURRENT> (H'80) TO MAKE IT STAY THE WAY IT 
;				     IS RIGHT NOW.
;				<TRAVELING> (H'40) TO MAKE IT FACE LEFT/RIGHT 
;				     ACCORDING TO DIRECTION IT IS TRAVELING.
;				<RISING> (H'20) TO MAKE IT TURN IT UPSIDE
;				     DOWN WHEN GOING UP AND RIGHTSIDE UP
;				     WHEN GOING DOWN.
;				<JOYDIR> (H'10) TO MAKE IT FACE LEFT/RIGHT
;				     ACCORDING TO THE LAST JOYSTICK PRESS
;				     OF LEFT OR RIGHT FOR THIS ENTITY.
;				<UP> (8) TO TURN THE SPRITE UPSIDE DOWN
;				<DOWN> (4) TO REVERT THE SPRITE TO THE WAY IT
;				     WAS DRAWN.
;				<LEFT> (2) TO MIRROR THE SPRITE AND LOCK IT
;				     INTO THAT STATE.
;				<RIGHT> (1) TO LOCK THE SPRITE INTO FACING 
;					THE DIRECTION IT WAS DRAWN.
;				<REGISTER> TO USE THE REGISTER'S CONTENTS.
;
;	YOU CAN "OR" THEM TOGETHER IN LOGICAL COMBINATIONS BUT YOU NEED TO
;	REMEMBER THAT THE HIGHEST VALUE BITS HAVE PRIORITY AND ONLY 1
;	BIT IS USED PER AXIS (X OR Y).  FOR INSTANCE:  JOYDIR|UP MAKES
;	IT FACE LEFT/RIGHT ACCORDING TO THE JOYSTICK IT IS ATTACHED TO
;	BUT ITS UPSIDE DOWN.  LEFT|UP IS MIRRORED AND INVERTED FROM THE
;	WAY YOU DREW IT.  CURRENT|JOYDIR|UP IS THE SAME AS CURRENT SINCE
;	THAT TAKES PRIORITY.  YOU MUST "OR" THEM IN A SINGLE COMMAND, THE
;	VALUE YOU SPECIFY REPLACES THE OLD STATE.  YOU CAN USE <REGISTER>
;	HERE IF YOU WANT.
;4D =	<BPALETTE> THIS COMMAND ALLOWS YOU TO CHANGE TO AN ENTIRELY NEW
;	BACKGROUND PALETTE OR TO RESTORE THE WORLD'S DEFAULT PALETTE.   
;	2 BYTES FOLLOWS THIS COMMAND:
;		1 WORD NAME OF NEW PALETTE OR -1 FOR WORLD DEFAULT PALETTE
;4E =	<SPALETTE> THIS COMMAND ALLOWS YOU TO CHANGE TO AN ENTIRELY NEW
;	SPRITE PALETTE OR TO RESTORE THE WORLD'S DEFAULT PALETTE.   
;	2 BYTES FOLLOWS THIS COMMAND:
;		1 WORD NAME OF NEW PALETTE OR -1 FOR WORLD DEFAULT PALETTE
;4F =	<SHAKE> THIS COMMAND ALLOWS YOU TO SPECIFY A SHAKE VALUE FOR
;	THE SCREEN OF FROM -7 TO +7.  THE SCREEN WILL SHIFT UP OR DOWN
;	ACCORDINGLY.  NEGATIVE VALUES SHIFT UP, POSITIVE DOWN.  BE SURE
;	TO RESTORE TO 0 WHEN DONE.   1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE SHAKE VALUE
;50 =	<LOWNOISE> THIS COMMAND IS THE SAME AS <NOISE> EXCEPT THAT IT
;	WON'T STOP A SOUND THAT IS ALREADY IN PROGRESS.  0 IS NOT SUPPORTED.
;	1 WORD FOLLOWS THIS COMMAND:
;		1 WORD NEW SOUND (0, -1 NOT SUPPORTED!)
;51 =	<XVISUAL> THIS COMMAND WILL MOVE THE EXECUTE POINTER IF AN
;	ENTITIES X LOCATION ON THE VISUAL SCREEN IS LESS THAN OR EQUAL TO
;	THE VALUE SPECIFIED.  THE CENTER OF THE ENTITY IS USED FOR THE X.
;	3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTE POINTER
;		1 BYTE X VALUE.
;52 =	<YVISUAL> THIS COMMAND WILL MOVE THE EXECUTE POINTER IF AN
;	ENTITIES Y LOCATION ON THE VISUAL SCREEN IS LESS THAN OR EQUAL TO
;	THE VALUE SPECIFIED.  VALUES WHERE YOUR ENTITY HAS
;	JUMPED ABOVE THE BACKGROUND ARE NEGATIVE AND THIS FUNCTION
;	DOES NOT ADJUST FOR THIS.   THE Y VISUAL LOCATION IS CONSIDERED
;	TO BE THE ENTITIES FEET SO IF YOUR ENTITY CANNOT JUMP SO HIGH THAT
;	HIS BOTTOM PIXEL ROW GOES ABOVE THE SCREEN (RECOMMENDED) YOU WON'T
;	HAVE NEGATIVE VALUES TROUBLES.   TRY SETTING THE WRAP PREVENTION
;	BIT IN THE ENTITY FLAGS TO EASE CHECKING. 3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTE POINTER
;		1 BYTE Y VALUE.
;53 =	<EQUAL> THIS COMMAND ALLOWS YOU TO COMPARE THE ENTITIES REGISTER
;	TO A VALUE AND MOVE THE EXECUTE POINTER IF THE REGISTER IS EQUAL
;	TO THIS VALUE.  4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 WORD COMPARE VALUE
;54 =	<REGINDEX> THIS COMMAND ALLOWS YOU TO INDEX INTO A ROM TABLE USING
;	THE REGISTER AND PICK A VALUE.  THE VALUE IS RETURNED IN THE
;	REGISTER.  THE FULL REGISTER IS USED AND A FULL WORD IS USED.
;	REGINDEX DOES NOT PICK AN ENTRY BASED ON YOUR VALUE.  IT SIMPLY
;	ADDS YOUR REGISTER TO THE TABLE POINTER.  THIS ALLOWS YOU TO
;	GET FROM A BYTE TABLE OR FROM A WORD TABLE.   IN OTHERWORDS,
;	IF YOU HAVE A WORD TABLE YOU MUST MULTIPLY YOUR REGISTER
;	BY 2 IF YOU WANTED AN ENTRY NUMBER.
;	2 BYTES FOLLOW THIS COMMAND:
;		1 WORD OFFSET OF TABLE IN ROM.
;
;55 =	<DISSCROLL> THIS COMMAND ALLOWS YOU TO DISABLE LEFT OR RIGHT SCROLLING.
;	USE THIS TO MAKE A GAME WHERE YOU CAN'T GO BACKWARDS IN THE WORLD.
;   		1 BYTE SCROLLS TO DISABLE:
;			<LEFT> OR <RIGHT>
;
;	SAMPLE:		.DB	DISSCROLL,LEFT
;
;56 =	<ENASCROLL> THIS COMMAND ENABLES THE SCROLLS YOU DISABLED WITH
;	DISSCROLL.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE SCROLLS TO ENABLE.
;
;57 =	<SETCOL> THIS COMMAND ENABLES YOU TO OVERRIDE THE WORLD COLUMN
;	THAT WAS STORED WHEN AN ENTITY WAS LAUNCHED.  THE LAUNCHING WORLD
;	COLUMN OF THE COMMAND F0 OR F5 IS SAVED WHEN AN ENTITY IS LAUNCHED.  
;	YOU NEED THIS INFORMATION FOR SOME COMMANDS SUCH AS <ACTIVE>.  WHEN
;	AN ENTITY IS LAUNCHED MANUALLY (FROM ANOTHER ENTITY) ITS WORLD
;	COLUMN IS SET TO -1 BECAUSE THERE WAS NO ACTUAL WORLD COMMAND.
; 	BECAUSE OF THIS, YOU HAVE ONLY 1 IDENTIFICATION NUMBER POSSIBLE
;	AND IT WILL NOT BE UNIQUE IF OTHER ENTITIES HAVE LAUNCHED ENTITIES.
;	YOU CAN SET UP YOUR OWN UNIQUE WORLDCOLUMN NUMBER BY PUTTING
;	THIS COMMAND IN YOUR WAKEUP SEQUENCE.  BE SURE TO USE A WORLD
;	COLUMN NUMBER BEYOND THE LENGTH OF YOUR WORLD SO THAT WHEN THE
;	ENTITY IS KILLED NO MEMORY RAM WILL BE RESET. 
;	2 BYTES FOLLOW THIS COMMAND:
;		1 WORD WORLD COLUMN TO USE OR <REGISTER>
;
;58 =	<COMPAREDATA> THIS COMMAND ALLOWS YOU TO COMPARE THE REGISTER
;	TO ONE OF THE COMMON DATA AREA BYTES AND MOVE THE EXECUTE POINTER 
;	IF THE REGISTER IS ABOVE OR EQUAL TO THIS VALUE.  IF YOU SPECIFY
;	<STATE> A FULL WORD COMPARE IS MADE.  OTHERWISE ONLY THE
;	LOW BYTE OF THE REGISTER IS COMPARED TO A SINGLE BYTE IN COMMON
;	DATA AREA RAM.  3 BYTES FOLLOW THIS COMMAND:
;		1 BYTE DATA TO BE COMPARED TO (0-31) OR <STATE>
;		1 WORD NEW POINTER
;
;59 = 	<REGMOM> ADD REGISTER TO MOMENTUMS.  THIS COMMAND ALLOWS YOU TO ADD 
;	THE REGISTER TO THE X OR Y MOMENTUM.  THE SIGN OF YOUR VALUE WILL 
;	BE ADJUSTED ACCORDING TO THE TRACKING YOU HAVE SELECTED WITH 
;	XTRACK OR YTRACK IN CONJUNCTION WITH THE TARGET COMMAND.  ONLY
;	THE LOW BYTE OF THE REGISTER IS USED.  2 BYTES 
;	FOLLOW THIS COMMAND:
;		1 BYTE X AXIS SPECIFIER (<REGISTER> OR -1 FOR NO CHANGE).
;		1 BYTE Y AXIS SPECIFIER (<REGISTER> OR -1 FOR NO CHANGE).
;
;	SAMPLE USAGE:   .DB	REGMOM,REGISTER,-1    ;CHANGES X BUT NOT Y
;
;	NOTE: -1 IN THE REGISTER IS THE SAME AS NO CHANGE.
;
;5A =	<EXCHANGE> EXCHANGE REGISTER WITH COMMON DATA RAM.  ONLY THE 
;	LOW BYTE OF THE REGISTER IS EXCHANGED, THE HIGH IS UNCHANGED UNLESS
;	<STATE> IS SPECIFIED. 1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE DATA LOCATION TO BE EXCHANGED WITH OR <STATE> 
;5B =	<XOR> XOR REGISTER WITH FIXED VALUE.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE VALUE TO XOR TO THE REGISTER.
;5C =	<RGB> THIS COMMAND ALLOWS YOU TO SET THE RGB AND MONO BITS THAT
;	CONTROL THE PALETTES.  REMEMBER THAT THIS EFFECTS BOTH SPRITE
;	AND BACKGROUND PALETTES.  UNFORTUNATELY, TO RESTORE THE
;	UNCHANGED PALETTE SET YOU MUST LOAD THE REGISTER WITH 0 AND
;	CALL WITH REGISTER AS THE PARAMETER.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE VALUE TO USE FOR RGB AND MONO BITS:
			.EQU	RED,H'20
			.EQU	GREEN,H'40
			.EQU	BLUE,H'80
			.EQU	MONO,H'01
;			OR <REGISTER> TO USE THE REGISTER'S CONTENTS.
;
;	SAMPLE USAGES:	.DB	RGB,REGISTER	;REGISTER'S CONTENTS
;			.DB	RGB,RED|BLUE	;RED WITH BLUE SET
;5D =	<SETBEHAVIOR> THIS COMMAND ALLOWS YOU TO SET THE INDIVIDUAL 
;	BEHAVIOR BITS.  THESE BITS CAN BE TESTED WITH THE <IFBEHAVIOR> 
;	COMMAND. THE BEHAVIOR BIT NAMES ARE JUST EQUATES.  THE BEHAVIOR BYTE
;	CAN ACCOMODATE 8 OF THEM.  THE VALUES HERE ARE JUST SUGGESTIONS.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE BEHAVIOR BIT TO SET OR <REGISTER>:
			.EQU	INTELLIGENT,H'01 
			.EQU	SHY,H'02
			.EQU	WEAK,H'04
			.EQU	HIJUMPER,H'08
			.EQU	FAST,H'10
			.EQU	MAD,H'20
			.EQU	DYING,H'40
			.EQU	OPTION1,H'80

;IF YOU WOULD LIKE MORE GENERIC BITS TRY THESE:

			.EQU	OPT1,H'01 
			.EQU	OPT2,H'02 
			.EQU	OPT3,H'04 
			.EQU	OPT4,H'08 
			.EQU	OPT5,H'10 
			.EQU	OPT6,H'20 
			.EQU	OPT7,H'40 
			.EQU	OPT8,H'80 

;5E =	<RESETBEHAVIOR> THIS COMMAND ALLOWS YOU TO RESET THE INDIVIDUAL
;	BEHAVIOR BITS.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE BEHAVIOR BIT TO RESET
;		YOU CAN USE <REGISTER> TO USE THE REGISTER'S CONTENTS.
;
;5F =	<IFBEHAVIOR>  IF BEHAVIOR BIT IS SET, MOVE TO NEW EXECUTE POINTER.
;	3 BYTES FOLLOWS THIS COMMAND:
;		1 WORD NEW EXECUTE POINTER
;		1 BYTE BEHAVIOR BIT(S) TO TEST FOR
;60 =	<IFNBEHAVIOR> IF BEHAVIOR BIT IS NOT SET, MOVE TO NEW EXECUTE
;	POINTER.  3 BYTES FOLLOW:
;		1 WORD NEW EXECUTE POINTER
;		1 BYTE BEHAVIOR BIT(S) TO TEST FOR
;61 =	<CREATE> ABSOLUTE LAUNCH OF AN ENTITY.  USE THIS COMMAND TO 
;	CAUSE ENTITIES INDEPENDANT FROM THIS ENTITY TO BE CREATED ON
;	SCREEN.  THE LAUNCH POINT IS ABSOLUTE, NOT RELATIVE TO THIS
;	ENTITY.  4 BYTES FOLLOW THIS COMMAND:
;		1 BYTE ENTITY NUMBER TO LAUNCH.  USE 0 <REGISTER> TO USE
;		  THE VALUE IN THE ENTITIES REGISTER.  THIS
;		  MEANS YOU CAN'T LAUNCH ENTITY 0 WITH THIS COMMAND!
;		1 BYTE LAUNCH X OFFSET ON SCREEN.
;		1 BYTE LAUNCH Y OFFSET ON SCREEN
;		1 BYTE VALUE TO PLACE INTO PARAM2 OF THAT ENTITY.
;62 = 	<STAIR> MOVE EXECUTE POINTER IF THERE IS A STAIR IN FRONT OF YOU.
;	A STAIR IS DETECTED IF YOUR ENTITY CANNOT BE MOVED FORWARD BY
;	8 PIXELS IN HIS TRAVEL DIRECTION WITHOUT HITTING A SOLID BUT
;	HE COULD DO SO IF HE WERE TO JUMP UP.  THE SOFTWARE WILL TEST
;	WHAT WOULD HAPPEN IF YOUR ENTITY MOVED FORWARD 8 PIXELS.  IF
;	HE WOULD BE ON TOP OF SOLID, THE SECOND TEST WILL BE MADE.
;	THE SECOND TEST IS TO MOVE HIM FORWARD BY 8 PIXELS AS BEFORE
;	BUT ALSO MOVE HIM UPWARDS BY THE NUMBER OF 8 PIXEL ROWS (TILES)
;	YOU SPECIFY IN THE 1 BYTE NUMBER OF ROWS IN THE COMMAND.  
;	THIS TIME THE MOVEMENT MUST BE SUCCESSFULLY ON TOP OF A SAFE
;	(NONSOLID) AREA.  IF BOTH TESTS PASS THE EXECUTE POINTER IS MOVED.
;	OTHERWISE EXECUTION CONTINUES WITH THE NEXT INSTRUCTION.
;	3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE NUMBER OF ROWS TO CHECK ABOVE THE ENEMIES FEET FOR
;		  THE TOP OF A POTENTIAL STAIR.
;
;63 =	<ANIMATION> THIS COMMAND ALLOWS YOU TO PICK THE ANIMATION UP FROM
;	ONE OF THE ENTITIES ENTRIES (EWALK, ESTAND, ETC.) WITHOUT ACTIVATING
;	THE TABLE OF MOVEMENTS USED IN THAT ENTRY.  IT IS BEST USED FOR
;	SHARED CODE THAT CAN'T USE THE SEQUENCE COMMAND TO DO THE SAME
;	BECAUSE IT HAS TO PICK FROM THAT ENTITIES TABLE.  2 BYTES FOLLOW
;	THIS COMMAND:
;		1 BYTE ANIMATION INDEX TO PICK (EWAKE, EHURT, EJUMP, ETC)
;		1 BYTE FLAG:
;			1 TO NOT USE THE DAMAGE FLAGS FOR THAT ENTRY
;			2 TO USE THE DAMAGE FLAGS FOR THAT ENTRY.
;64 =   <CHEAT> THIS COMMAND ALLOWS YOU TO ENABLE OR DISABLE CHEAT MODE.
;	IF ENABLED B+SELECT ON THE FIRST JOYSTICK GOES TO THE NEXT WORLD
;	UP TO THE LIMIT SPECIFIED IN USE_BACK.  YOU NEED TO FINISH YOUR
;	GAME BY LOOKING FOR SOME COMBINATION AT SOME POINT TO ENABLE THIS.
;	CHEATER MODE GOES DIRECTLY TO WORLDS POSSIBLY SKIPPING SOME VITAL
;	LOGIC IN YOUR CODE.  USE <IFNCHEAT> TO CATCH THE CHEATERS AS THEY
;	ENTER EACH WORLD. 1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE <OFF> TO DISABLE, <ON> TO ENABLE
;
;	SAMPLE:		.DB	CHEAT,ON	;ENABLES CHEAT MODE
;			.DB	CHEAT,OFF	;DISABLES CHEAT MODE
;
;65 =	<RESETFRICTION> THIS COMMAND ALLOWS YOU TO RESET THE X OR Y AXIS
;	FRICTION COUNTER WITHOUT CHANGING THE MOMENTUM.  YOU CAN EMBED
;	THESE PERIODICALLY IN YOUR COMMAND STREAM TO PRESERVE AN UNKNOWN
;	AMOUNT OF MOMENTUM IN CASES WHERE CODE IS SHARED.  OTHERWISE
;	THE FRICTION WILL EVENTUALLY KICK IN AND ZERO MOMENTUM.  2 BYTES
;	FOLLOW THIS COMMAND:
;		1 BYTE X FRICTION FLAG (0=LEAVE ALONE, 1=RESET FRICTION)
;		1 BYTE Y FRICTION FLAG (0=LEAVE ALONE, 1=RESET)
;
;66 =	<FLOOR> THIS COMMAND ALLOWS YOU TO CHECK FOR A FLOOR BELOW YOU
;	WITHIN A CERTAIN DISTANCE AND TO BRANCH IF ONE IS FOUND.
;	3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE NUMBER OF ROWS TO CHECK BELOW THE ENEMIES FEET.
;		BE CAREFUL, IT USES LOTS OF PROCESSOR POWER.
;
;67 =	<LINK> THIS COMMAND ALLOWS YOU TO LINK YOUR ENTITY TO ANOTHER
;	ENTITY.  YOU SPECIFY THE X AND Y DISPLACEMENT RELATIVE TO THE
;	ENTITIES UPPER LEFT CORNER.  THESE VALUES ARE INVERTED IF THE
;	ENTITY IS MIRRORED OR INVERTED.  THIS COMMAND IS USED FOR
;	"LIMB EXTENSIONS" OR TO THROW WEAPONS CORRECTLY INDEPENDANT
;	OF THE DIRECTION THE ENTITY IS FACING.  YOUR ENTITY WILL ALSO
;	BE MIRRORED OR INVERTED IF THE ENTITY IT IS LINKED TO IS INVERTED.
;	ONCE LINKED, THE LINK IS PERMANENT UNTIL AN UNLINK COMMAND IS
;	ENCOUNTERED.  THE LAUNCHING WORLD COLUMN OR ID IS ONLY CHECKED
;	AT THE TIME THE LINK COMMAND IS ENCOUNTERED.  FROM THEN ON YOUR
;	ENTITY STAYS LINKED TO THAT ENTITY EVEN IF THAT ENTITY CHANGES ITS
;	WORLD COLUMN NUMBER.  IF THE LINKED TO ENTITY DIES, YOUR ENTITY
;	WILL AUTOMATICALLY BE UNLINKED.  
;	DURING A LINK, YOUR COMMAND TABLE IS AUTOMATICALLY EXECUTED BUT
;	ALL MOTION COMMANDS WILL HAVE NO EFFECT ON FINAL SCREEN PLACEMENT.
;	IF THE ENTITY BECOMES UNLINKED BECAUSE THE ORIGINAL ENTITY IS KILLED,
;	THESE COMMANDS WILL SUDDENLY OPERATE.  USE THIS FOR A MULTI-LIMBED
;	MONSTER THAT BREAKES UP INTO DEADLY SMART FRAGMENTS.  OR USE THE
;	<ACTIVE> COMMAND TO MAKE THE LIMB GO AWAY TOO.  
;
;	BECAUSE THE NINTENDO VERSION HAS NO MORE RAM AVAILABLE, THERE IS
;	ONE WEIRD QUIRK OF LINKED ENTITIES.  IF YOU SPECIFY FRICTION 
;	CHANGES DURING LINK THEY WILL BE IGNORED AND WHEN THE ENTITY IS
;	UNLINKED THE FRICTION WILL BE RESTORED TO ITS DEFAULT VALUE.
;	ALL OTHER COMMANDS FUNCTION CORRECTLY FOR A LINKED ENTITY EXCEPT
;	THAT IT WILL NOT MOVE OTHER THAN IN CONCERT WITH THE ONE TO WHOM
;	IT IS LINKED.  YOU CAN SET MOMENTUM WHILE LINKED AND THEN UNLINK
;	IT TO RELEASE IT.  JUST REMEMBER NOT TO ISSUE ANY FRICTION COMMANDS
;	DURING LINK AND ANY FRICTION VALUE CHANGES MUST BE ISSUED AFTER
;	UNLINK.
;
;		5 BYTES FOLLOW THIS COMMAND:
;		1 BYTE OFFSET RELATIVE TO ITS X.  -1 FOR THE CURRENT OFFSET
;		1 BYTE OFFSET RELATIVE TO ITS Y.  -1 FOR THE CURRENT OFFSET
;		1 BYTE IDENTIFICATION TYPE OF THE ENTITY (<COLUMN> OR <ID>).
;		1 WORD NUMBER TO MATCH.  IF FROM ENTITYTAB, ONLY LOW BYTE
;		  IS USED.  IF WORLD COLUMN, FULL WORD.  YOU CAN ALSO SPECIFY
;		  <REGISTER> FOR THE VALUE IN THE REGISTER (ONLY PROVIDES
;		  1 BYTE RANGE, TOP BYTE IS ZEROED). THIS MEANS YOU CAN'T 
;		  MATCH 0 UNLESS YOU LOAD THE REGISTER WITH 0.
;
;	THIS COMMAND WILL TERMINATE AN INSTRUCTIONS COMMAND (TO ALLOW 
;	IMMEDIATE SPRITE POSITIONING).
;
;68 = <UNLINK> THIS COMMAND CANCELS COMMAND 67.  BE CAREFUL TO PUT ALL
;	FRICTION ZEROING COMMANDS AFTER THE UNLINK SINCE THIS COMMAND
;	IS IGNORED UNTIL THEM (REUSE OF INTERNAL MEMORY!).
;
;69 =	<SPAWN> LAUNCH LINKED ENTITY.  USE THIS COMMAND TO 
;	LAUNCH AN ENTITY THAT IS IMMEDIATLY LINKED TO YOURSELF.  THIS
;	IS THE SAME AS USING A LAUNCH COMMAND AND HAVING THAT ENTITY
;	DO A LINK FOR ITS FIRST INSTRUCTION EXCEPT THAT THE INTERMEDIATE
;	WRONG VISUAL POSITION IS SKIPPED.
;	4 BYTES FOLLOW THIS COMMAND:
;		1 BYTE ENTITY NUMBER TO LAUNCH.  USE 0 <REGISTER> TO USE
;		  THE VALUE IN THE ENTITIES REGISTER.  THIS
;		  MEANS YOU CAN'T LAUNCH ENTITY 0 WITH THIS COMMAND!
;		1 BYTE X RELATIVE LINK OFFSET SAME AS FOR COMMAND 67
;		1 BYTE Y RELATIVE LINK OFFSET SAME AS FOR COMMAND 67
;		1 BYTE VALUE TO PLACE INTO PARAM2 OF THAT ENTITY.
;6A =	<HALFFREQ> EXECUTE ENTITY HALF AS FREQUENTLY. THE ENTITY IS
;	UPDATED AND HIS EXECUTION TABLE IS RUN AT HALF SPEED.  DON'T USE
;	THIS FOR LINKED ENTITIES BECAUSE THE EXECUTION OF HALF FREQUENCY
;	ENTITIES IS STAGGERED TO PRESERVE PROCESSOR POWER AND THEY
;	WILL NOT VISUALLY KEEP UP WITH EACH OTHER AT HALF SPEED. 
;
;	WHEN RUNNING HALF SPEED, THE COUNTERS ALSO GO HALF SPEED BUT
;	THE ANIMATION ITSELF (FROM THE DRAWING PROGRAM) RUNS FULL SPEED.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE FLAG.  <OFF> OR <ON>
;6B =	<IFLINKED> MOVE EXECUTE POINTER IF LINKED.  2 BYTES FOLLOW THIS
;	COMMAND:
;		1 WORD NEW EXECUTE POINTER
;6C =	<RELINK> THIS COMMAND ALLOWS YOU TO CHANGE THE RELATIVE X AND
;	Y OFFSETS OF A PREVIOUS LINK.  NO CHECK IS MADE TO MAKE SURE YOU
;	ACTUALLY WERE LINKED SO BE CAREFUL. YOU CAN SPECIFY NO CHANGE
;	AND USING THE REGISTER WITH THIS COMMAND.  TO SET BOTH WITH
;	2 REGISTER VALUES YOU WILL HAVE TO USE 2 OF THESE COMMANDS.
;
;	2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE NEW X OFFSET OR <REGISTER> FOR THE REGISTER OR
;			-1 FOR NO CHANGE.  NOTE THAT YOU CANNOT SPECIFY
;			A VALUE OF 0 SINCE THIS IS THE VALUE OF THE
;			REGISTER EQUATE.
;		1 BYTE NEW Y OFFSET OR <REGISTER> FOR THE REGISTER OR
;			-1 FOR NO CHANGE.  YOU CANNOT SPECIFY 0.
;
;	THIS COMMAND WILL TERMINATE AN INSTRUCTIONS COMMAND (TO ALLOW 
;	IMMEDIATE SPRITE POSITIONING).
;
;6D =	<TOPSTAT> THIS COMMAND ALLOWS YOU TO DISPLAY A TOP OF SCREEN STATUS
;	BAR.  YOU CAN CONTROL THE NUMBER OF ROWS IN THAT STATUS BAR, WHERE
;	THE STATUS BAR BEGINS IN MEMORY, AND ALSO HOW MUCH BACKGROUND IT
;	OVERLAYS.  THE NUMBER OF ROWS DISPLAYED SHOULD BE ONE MORE
;	THAN WHAT YOU ACTUALLY WANT TO USE BECAUSE MOST TVs CROP OFF THE 
;	TOP 1.4 ROWS.  
;
;	THE STATUS BAR REGION (EVERYTHING BELOW THE HEIGHT OF YOUR 
;	CURRENT BACKGROUND) IS CLEARED EACH TIME A NEW WORLD IS ACTIVATED.
;	THUS YOU MUST REPAINT YOUR ENTIRE STATUS LINE EACH TIME A WORLD
;	COMES UP.
;
;	4 BYTES ARE NEEDED TO DETERMINE THE STATUS BAR:  1 BYTE
;	SPECIFIES HOW MANY PIXEL ROWS UP FROM THE BOTTOM OF PAGE 2 VIDEO
;	TO BEGIN THE STATUS BAR.  THE SECOND BYTE SPECIFIES
;	HOW MANY PIXEL ROWS TO DISPLAY FROM THAT AREA BEFORE BEGINNING THE
;	BACKGROUND. THE THIRD SPECIFIES HOW MANY PIXEL ROWS TO CUT OFF
;	FROM THE TOP OF THE BACKGROUND. IT MUST BE A MULTIPLE OF
;	8 PIXELS.  THE FORTH SPECIFIES THE CHARACTER SET BANK TO USE. 
;
;	FOR NOW, THE SECOND AND THIRD BYTES MUST BE SET EQUAL BECAUSE WE
;	HAVE NOT FIGURED OUT HOW TO SCROLL Y IN THE MIDDLE OF PAINTING
;	THE SCREEN.  ALSO, IF YOUR SPRITES MOVE UP INTO THE STATUS LINE
;	AREA YOU CANNOT HAVE A DIFFERENT CHARACTER SET BANK BECAUSE THEY
;	WILL CHANGE TO USE THE NEW BANK.  SET THIS BANK THE SAME AS YOUR
;	GAME BANK IF YOU HAVE SPRITES THAT CAN GO THAT HIGH (THIS MEANS
;	YOUR STATUS LINE CHARACTERS MUST BE COMMON TO ALL BANKS).
;
;	TO USE THE STATUS BAR, YOU MUST HAVE A STATUS BAR CHARACTER AVAILABLE
;	WHICH HAS A SOLID LINE IN ITS BOTTOMMOST ROW.  IF YOU ARE RUNNING
;	2 HIGH MODE IT MUST HAVE A BLANK CHARACTER UNDER THIS IN ALL BANKS.
;	THE LOGIC WILL PLACE THIS CHARACTER VALUE AT THE END OF YOUR STATUS
;	BAR AREA (LAST CHAR IN BOTTOM MOST ROW).  THEN IT WILL MANUALLY
;	SET SPRITE 0 TO THIS SAME CHARACTER VALUE AND PUT IT ON TOP. THE
;	EQUATES STATCHAR AND STATSPRITE AT THE ASSEMBLY TOP CONTROL THIS.
;
;
;	4 BYTES FOLLOW THIS COMMAND:
;		1 BYTE PIXEL ROWS UP FROM BOTTOM OF PAGE 2 VIDEO TO START
;		   THE STATUS BAR DISPLAY (MINUMUM IS 9 IF YOU WANT TO HAVE
;		   ONE).  
;		1 BYTE PIXEL ROWS TO DISPLAY IN THE STATUS BAR (MINIMUM IS 9)
;		1 BYTE PIXEL ROWS TO CUTOFF FROM THE BACKGROUND
;		1 BYTE CHARACTER SET BANK TO USE FOR THE STATUS BAR.   USE
;		   -1 TO USE THE SAME ONE AS THE BACKGROUND.
;
;	TO DISABLE TOP OF SCREEN STATUS BAR, SET ALL 4 BYTES TO 0.
;
;	SAMPLE USAGE:	
;			.DB	TOPSTAT,38,38,0,15	;2 HIGH STATUS BAR
;							;IN VIDEO BANK 7 HI
;			.DB	TOPSTAT,0,0,0,0		;DISABLE TOP OF SCREEN
;							;STATUS BAR SO WE
;							;CAN SCROLL VERTICALLY.
							
;	AT THE CURRENT TIME, ISSUING A TOPSTAT COMMAND WHILE A WORLD
;	IS UP WILL NOT ADJUST THE SPRITES ALREADY ON SCREEN.  YOU WOULD
;	NEED TO DO THIS IF YOU WANTED TO ACTUALLY SHIFT THE BACKGROUND
;	UP OR DOWN BUT NOT IF YOU JUST WANTED TO PULL DOWN A STATUS BAR.
;	MAKE CHANGES TO THE SIZE OF THE STATUS BAR BEFORE YOU ACTIVATE THE
;	WORLD (JUST BEFORE YOU ISSUE THE WORLD,XX COMMAND).
;
;	IF YOU WANT TO MIX WORLDS THAT HAVE NO TOP OF SCREEN STATUS BAR
;	WITH THOSE THAT HAVE ONE, YOU MAY HAVE TO MAKE A FAKE SPRITE TO
;	TAKE UP SPRITE 0 WHEN IN THE WORLDS WITHOUT TOP OF SCREEN STATUS
;	BAR.  SPRITE #0 IS NEEDED FOR A TOP OF SCREEN STATUS BAR.  IF YOU
;	KEEP ENTITIES ALIVE WHEN YOU CHANGE WORLDS, YOU WILL HAVE TO 
;	INSURE THE AVAILABILITY OF SPRITE 0 MANUALLY.
;
;6E =	<WRITEVID>  THIS COMMAND ALLOWS YOU TO WRITE A STRING OF CHARACTERS
;	FROM MEMORY INTO THE STATUS BAR AREA.  YOU SPECIFY THE LOCATION OF
;	DATA IN MEMORY, THE ROW, COLUMN, AND LENGTH TO WRITE.  ROW 0 OF
;	YOUR STATUS LINE MAY NOT BE ALL VISIBLE DEPENDING ON WHETHER YOUR
;	STATUS BAR HEIGHT WAS A MULTIPLE OF 8.  THE MAXIMUM YOU CAN WRITE
;	OUT IN A SINGLE COMMAND IS 32.  YOUR WRITE MUST NOT LAPSE OVER
;	INTO THE NEXT ROW.  THE WRITE IS LIMITED TO 32 DUE TO RAM LIMITATIONS
;	AND THE NECESSITY TO ALLOW THE DATA TO BE IN THE OTHER ROM PAGE.

;	THIS COMMAND WILL HALT YOUR EXECUTION UNTIL IT CAN BE COMPLETED.
;	USUALLY THIS WILL BE IMMEDIATE IF THIS IS A SINGLE THREADED
;	STATUS BAR WRITE BUT IF OTHER LEVELS WRITE TO THE STATUS BAR
;	YOURS MAY HAVE TO WAIT.
;
;	FOR SAFETY, IF YOU ARE GOING TO FOLLOW ANY VIDO COMMAND WITH
;	A WORLD REQUEST BE SURE TO PUT A DELAY OR AT LEAST 1 MORE
;	INSTRUCTION BEFORE THE WORLD REQUEST OR ELSE YOUR VIDEO
;	ACCESS COULD TAKE PLACE AFTER THE WORLD WAS PAINTED.
;
;	6 BYTES FOLLOW THIS COMMAND:
;		1 WORD LOCATION OF DATA TO WRITE IN MEMORY
;		1 BYTE ROW TO WRITE IT TO
;		1 BYTE COLUMN TO WRITE IT TO
;		1 BYTE VIDEO PAGE (0 OR 1) OR <STATVID> FOR STATUS BAR
			.EQU	STATVID,-1
;		1 BYTE LENGTH TO WRITE (32 MAX)
;
;	TO USE THIS ROUTINE TO PUT UP ASCII MESSAGES, YOU MUST POINT
;	IT TO A .DB STATEMENT IN MEMORY THAT HAS THE ASCII VALUES FROM
;	YOUR CHARACTER SET.  THE DEFAULT FOR INHOUSE GAMES IS THAT 0-9
;	ARE BINARY 0-9 AND "A" STARTS AT 10.  THE FOLLOWING BASIC
;	PROGRAM CAN HELP YOU CONVERT ASCII TO THIS FORMAT.  IT TAKES
;	AN INPUT FILE OF "TEXTFILE" AND MAKES MESSAGES.ASM:
;
;	10 OPEN "TEXTFILE" FOR INPUT AS #1
;	20 OPEN "MESSAGES.ASM" FOR OUTPUT AS #2
;	30 INPUT #1,A$
;	40 PRINT #2,";";A$:PRINT #2,".DB ";
;	50 X=LEN(A$)
;	60 FOR Y=1 TO X
;	70 B$=MID$(A$,Y,1)
;	80 IF B$=" " THEN PRINT #2,"64 ";:GOTO 100
;	90 PRINT #2,ASC(B$)-55;
;	100 IF Y=X THEN 110 ELSE PRINT #2,",";
;	110 NEXT Y
;	120 PRINT #2,"":PRINT #2,""
;	130 IF EOF(1) GOTO 140 ELSE GOTO 30
;	140 CLOSE
;	150 SYSTEM
;

;6F =	<FILLVID>  THIS COMMAND ALLOWS YOU TO FILL AN AREA OF THE STATUS
;	BAR OR VIDEO MEMORY WITH A GIVEN CHARACTER. YOU SPECIFY THE
;	ROW, COLUMN, DATA AND LENGTH TO WRITE.  THE MAXIMUM YOU CAN WRITE 
;	IN A SINGLE COMMAND IS 64.
;
;	THIS COMMAND WILL HALT YOUR EXECUTION UNTIL IT CAN BE COMPLETED.
;	USUALLY THIS WILL BE IMMEDIATE IF THIS IS SINGLE THREADED
;	WRITE LOGIC BUT IF OTHER LEVELS WRITE TO THE VIDEO OR STATUS BAR
;	YOURS MAY HAVE TO WAIT.  
;
;	FOR SAFETY, IF YOU ARE GOING TO FOLLOW ANY VIDO COMMAND WITH
;	A WORLD REQUEST BE SURE TO PUT A DELAY OR AT LEAST 1 MORE
;	INSTRUCTION BEFORE THE WORLD REQUEST OR ELSE YOUR VIDEO
;	ACCESS COULD TAKE PLACE AFTER THE WORLD WAS PAINTED.
;
;	5 BYTES FOLLOW THIS COMMAND:
;		1 BYTE ROW TO WRITE IT TO
;		1 BYTE COLUMN TO WRITE IT TO
;		1 BYTE DATA TO WRITE OUT
;		1 BYTE VIDEO PAGE (0 OR 1) OR STATVID FOR STATUS BAR
;		1 BYTE LENGTH TO WRITE
;
;70 =	<SETSTATPAL> THIS COMMAND ALLOWS YOU TO SPECIFY THE PALETTE SET
;	TO BE USED AT A GIVEN SET OF 4 ROWS ON THE STATUS BAR.  THE
;	NINTENDO HARDWARE SPECIFIES PALETTE INFO IN A GROUP OF 8
;	BYTES WHICH CONTROLS 32 WIDE BY 4 HIGH TEXT CELLS (8x8 PIXELS EACH).
;	EACH BYTE IS NIBBLE ORIENTED.  THE BOTTOM MOST 2 ROWS OF
;	YOUR STATUS BAR IS THE START OF A NEW SET OF 4 ROWS BUT
;	THE EXTRA 2 ROWS DO NOT EXIST.  THUS IF YOUR STATUS BAR WERE
;	6 HIGH YOU WOULD NEED TO MAKE 2 SPECIFICATIONS WITH THIS COMMAND
;	TO GET ALL 6 ROWS.  THE FIRST MIGHT SET THE FIRST 4 ROWS AND
;	THE SECOND SETSTATPAL COMMAND MIGHT SET THE BOTTOM 2 WITH THE EXTRA
;	DATA FOR ANOTHER 2 ROWS BEING UNUSED.  THIS COMMAND HAS A FIXED
;	LENGTH AND SPECIFIES THE FULL 8 BYTES THAT CONTROL 4 FULL ROWS.
;	THE ORGANIZATION OF EACH BYTE IS EXPLAINED IN THE MAP BELOW.
;	THE BYTE IS SHOWN AS 8 BITS BUT EACH SET OF 2 BITS IS ASSIGNED
;	A NUMBER FROM 0-3.  THE 33 MEANS THAT THOSE 2 BITS CONTROL AREA
;	3 IN THE ROW MAP SHOWN:
;
;	BYTE = 33221100		RESULT ON THE 4 ROWS:  0011
;						       0011
;						       2233
;						       2233
;
;	THE NEXT BYTE CONTROLS THE DATA ON THE 4 ROWS IMMEDIATLY TO
;	THE RIGHT OF THAT BYTES DATA.  SINCE EACH REGION IS 4 WIDE IT
;	TAKES 8 BYTES TO CONTROL THE ENTIRE 32 WIDE REGION.  THE VALUE
;	IN THE 2 BIT NIBBLE AT THAT POSITION CONTROLS WHICH PALETTE IS USED.
;	FOR INSTANCE, IF NIBBLETTE 33 WERE SET TO 01 BINARY THEN THE
;	REGION 2 ROWS DOWN AND 2 COLUMNS TO THE RIGHT WOULD USE THE
;	SECOND SET OF PALETTE COLORS FROM THE BACKGROUND'S 4 SETS.  THIS
;	CORRESPONDS TO THE SECOND SET OF 4 PALETTE COLORS IN YOUR DRAWING
;	PROGRAM FOR THAT BACKGROUND.
;
;	THIS COMMAND IS ALREADY VERY MACHINE SPECIFIC SO THE COMMAND
;	ITSELF REQUIRES YOU TO MAKE YOUR OWN CALCULATIONS ABOUT WHERE
;	THE DATA GOES.  RATHER THAN NUMBER ROWS FROM THE TOP DOWN, YOU
;	MUST SPECIFY GROUPS OF 4 ROWS TO SET FROM THE BOTTOM UP WITH THE
;	BOTTOM MOST ROW CONTROLLING ONLY 2.  THUS IN THE ROW BYTE
;	FOR THIS COMMAND SPECIFYING 0 WOULD SET THE PALETTE FOR THE
;	BOTTOMMOST 2 ROWS OF YOUR STATUS LINE.  SPECIFYING 1 WILL SET
;	THE NEXT 4 ROWS UP.  YOU MUST DO THIS EVEN IF YOU ARE ONLY
;	USING ANOTHER 2 OF THEM.  YOU CAN GO ALL THE WAY TO THE TOP
;	OF THE PALETTE AREA WHICH IS EQUAL TO A ROW INDEX HERE OF 7
;	BUT IT IS UNLIKELY YOUR STATUS LINE WILL GO ABOVE INDEX 2.
;
;	9 BYTES FOLLOW THIS COMMAND:
;		1 BYTE 4 ROW SET UP FROM THE BOTTOM TO SET (0,1,2, ETC.)
;		8 BYTES OF DATA TO WRITE OUT
;
;71 =	<RDIVIDE> THIS COMMAND ALLOWS YOU TO DIVIDE YOUR REGISTER BY
;	A VALUE IN COMMON DATA AREA RAM.  THE RESULT IS RETURNED
;	IN THE REGISTER WITH THE REMAINDER STORED BACK IN THE COMMON
;	DATA AREA RAM LOCATION.  REMEMBER THAT SINCE THE COMMON DATA
;	AREA RAM IS SHARED, IF YOU ARE GOING TO USE AN ABSOLUTE LOCATION
;	THAT IS NOT YOUR <STATE> LOCATION YOU MUST USE AN INSTRUCTIONS
;	COMMAND TO MAKE SURE THE ENTIRE SEQUENCE IS COMPLETE AND YOU
;	HAVE YOUR DESIRED RESULT SAFE IN YOUR REGISTER OR STATE VARIABLE
;	BEFORE ANOTHER ENTITY CAN PROCESS.  ALSO, YOUR RESULT MUST
;	FIT INTO A SINGLE REGISTER.  YOUR FULL REGISTER IS USED FOR
;	THE DIVIDE BUT THE MAXIMUM VALUE IS H'8000 AND THE RESULT
;	MUST FIT INTO A SINGLE REGISTER.  THE HIGH BYTE IS CLEARED.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE COMMON DATA AREA BYTE TO DIVIDE BY (0-31) OR <STATE>
;72 =	<RMULTIPLY> THIS COMMAND ALLOWS YOU TO MULTIPLY YOUR REGISTER'S
;	LOW BYTE BY A VALUE IN COMMON DATA AREA RAM.  THE RESULT IS
;	RETURNED IN REGISTER (FULL WORD). IF YOU SPECIFY <STATE> ONLY
;	THE LOW BYTE OF THE STATE WORD IS USED FOR THE MULTIPLY.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE COMMON DATA AREA BYTE TO USE FOR THE MULTIPLY OR 
;		 <STATE>
;73 =	<GETHEROS> GET THE HEROS COUNT INTO THE REGISTER.	
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE JOYSTICK HERO COUNT TO GET
;74 =	<SHOWSCORE> SHOW THE SCORE AT THE SPECIFIED LOCATION.  THIS
;	COMMAND ASSUMES THAT THE DIGITS 0-9 ARE AVAILABLE IN CHARACTERS
;	0-9+BASENUM (EQUATE DEFINED HERE).  IT WILL DISPLAY THE 1 WORD
;	SCORE VALUE AT THE SCREEN ROW AND COLUMN YOU SPECIFY IN THE
;	VIDEO PAGE YOU SPECIFY.  IT ONLY PUTS DOWN THE DIGITS, YOU
;	MUST HAVE THE PALETTE INFO ALREADY IN YOUR BACKGROUND.  IF
;	YOU SPECIFY A VIDEO PAGE OF <STATVID>, THIS COMMAND WILL PUT THE DATA
;	INTO YOUR STATUS LINE REGION AT THE ROW AND COLUMN SPECIFIED.
;	LEADING ZERO SUPPRESSION WILL TAKE PLACE WITH THIS COMMAND
;	BUT IT IS DONE BY PUTTING "ERASECHAR" IN PLACE OF THE ZERO
;	DIGITS.
;
;	THIS COMMAND WILL WAIT FOR THE SCREEN WRITE BUFFER TO BE AVAILABLE
;	WHICH SHOULD NORMALLY BE IMMEDIATLY BUT IT IS POSSIBLE THAT
;	YOUR EXECUTION OF THIS ENTITY'S CODE WILL SUSPEND TILL DONE.
;	4 BYTES FOLLOW THIS COMMAND:
;		1 BYTE SCORE TO DISPLAY (SEE COMMAND 37)
;		1 BYTE ROW OF VIDEO MEMORY OR STATUS LINE MEMORY
;		1 BYTE COLUMN OF VIDEO MEMORY OR STATUS LINE MEMORY
;		1 BYTE VIDEO PAGE (0 OR 1) OR <STATVID> FOR STATUS LINE MEMORY.
;
		.EQU	BASENUM,0	;BASE NUMBER FOR ASCII "0"

;75 =	<SHOWREG> SHOW THE REGISTER AT THE SPECIFIED LOCATION.  THIS
;	COMMAND ASSUMES THAT THE DIGITS 0-9 ARE AVAILABLE IN CHARACTERS
;	0-9+BASENUM (EQUATE DEFINED HERE).  IT WILL DISPLAY THE 1 WORD
;	REGISTER VALUE AT THE SCREEN ROW AND COLUMN YOU SPECIFY IN THE
;	VIDEO PAGE YOU SPECIFY.  IT ONLY PUTS DOWN THE DIGITS, YOU
;	MUST HAVE THE PALETTE INFO ALREADY IN YOUR BACKGROUND.  IF
;	YOU SPECIFY A VIDEO PAGE OF <STATVID>, THIS COMMAND WILL PUT THE DATA
;	INTO YOUR STATUS LINE REGION AT THE ROW AND COLUMN SPECIFIED.
;	LEADING ZERO SUPPRESSION WILL TAKE PLACE WITH THIS COMMAND
;	BUT IT IS DONE BY PUTTING "ERASECHAR" IN PLACE OF THE ZERO
;	DIGITS.  THERE WILL BE 5 DIGITS MAX.
;
;	THIS COMMAND WILL WAIT FOR THE SCREEN WRITE BUFFER TO BE AVAILABLE
;	WHICH SHOULD NORMALLY BE IMMEDIATLY BUT IT IS POSSIBLE THAT
;	YOUR EXECUTION OF THIS ENTITY'S CODE WILL SUSPEND TILL DONE.
;	3 BYTES FOLLOW THIS COMMAND:
;		1 BYTE ROW OF VIDEO MEMORY OR STATUS LINE MEMORY
;		1 BYTE COLUMN OF VIDEO MEMORY OR STATUS LINE MEMORY
;		1 BYTE VIDEO PAGE (0 OR 1) OR <STATVID> FOR STATUS LINE MEMORY.
;
;76 =	<SETHEALTH> SET THIS ENTITIES HEALTH.  YOU CAN SET THIS ENTITIES
;	HEALTH TO A FIXED VALUE TO USE <REGISTER> TO USE THE REGISTER
;	CONTENTS.  YOU CANNOT SET THE HEALTH TO ZERO UNLESS YOU LOAD
;	THE REGISTER AND SPECIFY THAT.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE VALUE TO SET THE HEALTH TO OR <REGISTER>
;77 = 	<SOUNDBUSY> THIS COMMAND ALLOWS YOU TO BRANCH IF ONE OF THE SPECIFIED
;	SOUND CHANNELS IS STILL PLAYING.  6 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER IF THE CHANNEL IS STILL BUSY
;			1 BYTE <ON> OR <DONTCARE> TO CHECK CHANNEL 0
;			1 BYTE <ON> OR <DONTCARE> TO CHECK CHANNEL 1
;			1 BYTE <ON> OR <DONTCARE> TO CHECK CHANNEL 2
;			1 BYTE <ON> OR <DONTCARE> TO CHECK CHANNEL 3
;78 =	<REGSOUND> THIS COMMAND ALLOWS YOU TO EXECUTE COMMAND <SOUND>
;	FROM A TABLE INDEXED WITH A REGISTER.  THE TABLE MUST CONTAIN
;	AN ENTRY FOR EACH POSSIBLE REGISTER VALUE PASSED TO THIS
;	COMMAND.  EACH ENTRY MUST HAVE ALL 8 BYTES AS IN THE <SOUND>
;	COMMAND.  THE REGISTER WILL BE MULTIPLIED BY 8 AND USED
;	AS AN INDEX INTO THE TABLE TO GET THE LOCATION OF THE ACTUAL
;	MUSIC DATA.  2 BYTES FOLLOW THIS COMMAND:
;		1 WORD POINTER TO THE TABLE.
;
;	SAMPLE USAGE:		.DB	SETREG,2,0	;GET ENTRY #2
;				.DB	REGSOUND
;				.DRW	MUSICTAB
;				.DB	SKIP
;				.DRW	OVERTABLE
;
;			MUSICTAB:	.DRW	MEL1,MEL2,MEL3,0
;					.DRW	MEL1,-1,-1,-1
;					.DRW	LOVE1,LOVE2,0,0
;
;79 =	<HIDEALL> THIS COMMAND ALLOWS YOU TO MAKE ALL OTHER ENTITIES
;	GO AWAY AS IF THEY HAD EXECUTED A DIE,0 COMMAND.  YOUR ENTITY
;	WILL NOT GO AWAY.  NO BYTES FOLLOW THIS COMMAND.
;
;7A =	<HOWMANY> THIS COMMAND ALLOWS YOU TO FIND OUT HOW MANY OF
;	A GIVEN ENTITY ARE CURRENTLY ACTIVE.  YOU SPECIFY THE ENTITY
;	NUMBER FROM ENTITYTAB AND THE QUANTITY ACTIVE AT THIS MOMENT
;	(INCLUDING SLEEPERS WAITING FOR THEIR POSITION ON SCREEN) IS
;	RETURNED IN THE REGISTER.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE ENTITY NUMBER OR <REGISTER> FOR THE ENTITY IN 
;		 THE REGISTER (FOR ENTITY 0, LOAD THE REGISTER WITH 0 AND
;		 SPECIFY REGISTER)
;7B =	<TESTSOLID> THIS COMMAND ALLOWS YOU TO TEST A POTENTIAL MOVEMENT
;	OF YOUR ENTITY AND SEE IF SOLID EXISTS IN THE PATH.  YOU CAN
;	ALSO USE IT TO SEE IF YOU WOULD MATERIALIZE ON SOLID IF YOU WERE
;	TO TURN SOLIDS ON AT THIS POINT BY SIMPLY SPECIFYING A MOVEMENT
;	OF 0 FOR BOTH X AND Y.  USE THIS COMMAND FOR ODD SITUATIONS NOT
;	COVERED BY THE LEDGE, PRECIPICE, STAIRS, OR FLOOR COMMANDS.
;	THE VALUE YOU SPECIFY FOR X AND Y WILL BE ADDED TO THE CURRENT
;	ENTITY POSITION AND THE BRANCH WILL BE TAKEN IF THE ENTITY
;	WOULD THUS BE PLACED OVER SOLIDS.  BE SURE THAT SOLIDSTATE IS
;	ON WHEN YOU MAKE THIS CALL SINCE IT ONLY USES YOUR CURRENT STATE.
;	4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTION POINTER
;		1 BYTE X OFFSET
;		1 BYTE Y OFFSET
;7C =	<WIPEOUT> THIS COMMAND WIPES THE CURRENT BACKGROUND BY FILLING
;	IT WITH "ERASECHAR" AND THEN REQUESTS THE WORLD SPECIFIED.
;	IT IS SIMILAR TO THE <WORLD> COMMAND EXCEPT THAT IT WIPES OUT
;	THE SCREEN.   IT CAN BE CALLED FROM EITHER OR HALFWAY THROUGH
;	BOTH VIDEO PAGES.  AFTER THE WIPE, ALL SOUNDS ARE STOPPED.
;	1 BYTE FOLLOWS THIS COMMAND:
;			1-254 FOR A WORLD FROM USE_BACK
;			-1 FOR THE BOOT SCREEN
;			0 <REGISTER> FOR THE ENTITIES REGISTER.
;7D =	<THROWBACK> THIS COMMAND PROVIDES A MORE RELIABLE WAY OF BEING
;	THROWN BACK BY AN ENEMIES ATTACK.  IF YOU TRY TO USE XTRACK,AWAY
;	YOU MAY BE THROWN THE WRONG DIRECTION DUE TO A CROSS OVER OF
;	CENTERLINE ON THE ATTACK.  THIS COMMAND SHOULD BE ISSUED AS SOON
;	AS POSSIBLE IN YOUR HURT CODE TO PREVENT THE ATTACKER FROM 
;	SWITCHING DIRECTIONS AND MESSING UP YOUR USAGE.  THROWBACK
;	WILL SIGN CORRECT YOUR MOMENTUM ACCORDING TO THE DIRECTION
;	THE ATTACKING ENTITY IS FACING.  IF IT IS FACING LEFT, YOUR
;	MOMENTUM WILL BE NEGATED.  Y MOMENTUM SPECIFIED HERE WILL NOT
;	BE SIGN CORRECTED, IT WILL BE APPLIED AS SPECIFIED.  2 BYTES
;	FOLLOW THIS COMMAND:
;		1 BYTE X VALUE TO SIGN CORRECT AND USE OR <REGISTER>
;		  TO USE THE REGISTER'S CONTENTS.  -1 FOR NO CHANGE.
;		1 BYTE Y VALUE TO APPLY WITHOUT SIGN CORRECTION OR
;		  <REGISTER> FOR THE REGISTER'S CONTENTS OR -1 FOR NO
;		  CHANGE.
;7E =	<GETCOLUMN>  THIS COMMAND WILL TAKE THIS ENTITIES COLUMN NUMBER
;	IN THE WORLD AND PUT IT INTO THE ENTITIES WORD REGISTER.
;7F =	<TABLEVID>  THIS COMMAND ALLOWS YOU TO WRITE A STRING OF CHARACTERS
;	FROM MEMORY INTO THE STATUS BAR AREA USING THE REGISTER TO 
;	INDEX INTO A TABLE.  IT IS THE SAME AS THE WRITEVID EXCEPT THAT
;	YOU POINT TO A TABLE OF WORDS AND THE REGISTER IS INDEXED INTO
;	THAT TABLE TO GET THE ACTUAL POINTER TO THE TABLE.  THE REGISTER
;	IS LIMITED TO 0-127.  THE LENGTH OF DATA YOU CAN WRITE IS LIMITED
;	TO 32.
;
;	6 BYTES FOLLOW THIS COMMAND:
;		1 WORD LOCATION OF TABLE.  REGISTER*2 IS USED AS AN INDEX
;		  TO PICK A WORD FROM THE TABLE.  THIS WORD IS USED JUST
;		  AS IF A WRITEVID COMMAND WERE EXECUTED.
;		1 BYTE ROW TO WRITE IT TO
;		1 BYTE COLUMN TO WRITE IT TO
;		1 BYTE VIDEO PAGE (0 OR 1) OR <STATVID> FOR STATUS BAR
;		1 BYTE LENGTH TO WRITE (32 LIMIT)
;80 =	<LIMIT> THIS COMMAND ALLOWS YOU TO EASILY LIMIT THE REGISTER'S
;	TOP VALUE.  IF THE REGISTER IS OVER THE VALUE YOU SPECIFY, IT
;	WILL BE SET TO THAT VALUE.  USE THIS PRIOR TO A TABLE ORIENTED
;	COMMAND.  2 BYTES FOLLOW THIS COMMAND:
;		1 WORD VALUE TO LIMIT THE REGISTER TO
;
;81 =	<MOVEIN> THIS COMMAND WILL ADD THE MOMENTUM YOU SPECIFY ON THE
;	SPECIFIED AXIS IN THE DIRECTION YOUR ENTITY IS FACING.  FOR
;	INSTANCE, IF YOUR ENTITY IS FACING RIGHT POSITIVE MOMENTUM IS
;	ADDED IF SOME X MOMENTUM IS SPECIFIED.  IF FACING LEFT, NEGATIVE
;	MOMENTUM WOULD BE ADDED.  USE THIS TO JUMP IN DURING AN ATTACK
;	SEQUENCE.  2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE VALUE FOR THE X AXIS OR -1 FOR NONE OR <REGISTER>
;		1 BYTE VALUE FOR THE Y AXIS OR -1 FOR NONE OR <REGISTER>
;
;82 =	<NOTEQUAL> THIS COMMAND ALLOWS YOU TO COMPARE THE ENTITIES REGISTER
;	TO A VALUE AND MOVE THE EXECUTE POINTER IF THE REGISTER IS NOT EQUAL
;	TO THIS VALUE.  4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 WORD COMPARE VALUE

;83 =	<PALCLR> THIS COMMAND ALLOWS YOU TO OVERRIDE AN INDIVIDUAL COLOR
;	OF EITHER PALETTE.  USE THE PALETTE COMMANDS WITH -1 TO RESTORE.
;	IF YOU OVERRIDE THE COLOR OF A BLINKING PALETTE, THE NEXT BLINK
;	WILL RESTORE THE CORRECT COLOR.  USE THIS COMMAND FOR SPECIAL
;	EFFECTS THAT MUST BE COMMON TO ALL WORLDS AND CAN'T USE SPECIAL
;	PALETTES TO ACHIEVE THIS.   2 BYTES FOLLOW THIS COMMAND:
;		1 BYTE PALETTE COLOR TO EFFECT (0-15 FOR BACKGROUND,
;	          16-31 FOR SPRITE)
;		1 BYTE COLOR TO USE (0-3F).  NEVER USE 0D!
;84 =	<SETSELECT> THIS COMMAND ALLOWS YOU TO SPECIFY WHAT INTERRUPT IF
;	ANY WILL BE GENERATED BY THE SELECT BUTTON.  THE SELECT BUTTON
;	IS TIED TO A JOYSTICK.  YOU MUST HAVE TAKEN OVER A JOYSTICK TO
;	USE THIS COMMAND.  THE SELECT BUTTON CAN GENERATE ANY CONDITION
;	THAT THE <ACTIVATE> COMMAND CAN GENERATE.  THE ONLY DIFFERENCE
;	IS THAT INTERRUPTS WILL BE DISABLED WHEN THE SELECT BUTTON
;	ISSUES THE ACTIVATE.  YOU CAN SET SELECT TO GENERATE THE SAME
;	INTERRUPT AS ANOTHER JOYSTICK BUTTON IF DESIRED (SUCH AS ATTACK)
;	AND THEN LET YOUR CODE DECIDE WHAT TO DO ABOUT IT.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE <ACTIVATE> INDEX TO USE SUCH AS EDUCK, EATTACK, ETC.
;
;85 =	<CDIVIDE> THIS COMMAND ALLOWS YOU TO DIVIDE YOUR REGISTER BY
;	A CONSTANT.  THE RESULT IS RETURNED IN THE REGISTER,
;	THE REMAINDER IS DISCARDED.  THE REGISTER IS LIMITED TO 
;	H'8000 AND THE RESULT MUST BE ONE BYTE.  THE HIGH BYTE IS CLEARED.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE CONSTANT VALUE TO DIVIDE BY
;86 =	<GETJOYHEALTH> THIS COMMAND ALLOWS YOU TO FETCH THE HEALTH LEVEL
;	OF A GIVEN JOYSTICK ENTITY.  THE VALUE IS RETURNED IN YOUR
;	REGISTER, THE HIGH BYTE IS CLEARED.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE JOYSTICK SPECIFIER (JOY1, JOY2, OURJOY, KILLERSJOY)
;87 =	<SETJOYHEALTH> THIS COMMAND ALLOWS YOU TO SET THE HEALTH LEVEL
;	OF A GIVEN JOYSTICK ENTITY.  THE VALUE IS SET TO THE VALUE IN YOUR
;	REGISTER (LOW BYTE ONLY).  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE JOYSTICK SPECIFIER (JOY1, JOY2, OURJOY, KILLERSJOY)
;88 = 	<ENTITYBITS> THIS COMMAND ALLOWS YOU TO CHANGE THE ENTITIES FLAG BYTE
;	WHICH IS SPECIFIED IN ENTITYTAB.  THIS IS THE BYTE THAT SPECIFIES
;	IF AN ENTITY CAN SCROLL OFF THE SCREEN, WHETHER IT TESTS WORLD COLUMN
;	COMMANDS, ETC.  YOU CAN GET THIS BYTE WITH FETCHREG, MODIFY IT, 
;	AND PUT IT BACK WITH THIS COMMAND.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE VALUE TO SET IT TO OR <REGISTER> TO USE THE REGISTER.
;89 =	<WORLDGOTO> ABSOLUTE PUT OF ENTITY TO AN ABSOLUTE POSITION WITHIN
;	A GIVEN WORLD.  THIS COMMAND ALLOWS YOU TO PUT YOUR ENTITY AT
;	ANY ROW AND COLUMN (8 PIXELS) WITHIN ANY WORLD.  IF THE WORLD OR
;	LEFTMOST SCREEN COLUMN CHANGES ALL ENTITIES OTHER THAN YOUR ENTITY
;	AND ANY OTHER JOYSTICK ENTITY ARE REMOVED AND THE WORLD LAUNCH FLAGS 
;	AT THE NEW POSITION ARE USED.  IF THE SCREEN LOCATION AND WORLD DO 
;	NOT CHANGE AS A RESULT  OF THIS COMMAND THE ENTITIES ARE LEFT ALONE.  
;
;	TWO PLAYER GAMES POSE A PROBLEM FOR THIS COMMAND.  YOU MUST NOT ISSUE
;	THE COMMAND UNTIL YOUR ENTITIES COME TO SOME AGREEMENT VIA SOME
;	FORM OF INTERCOMMUNCIATION.  THIS COMMAND SIMPLY DOES NOT MAKE
;	ANOTHER JOYSTICK ENTITY GO AWAY BUT THAT DOESN'T MEAN IT MIGHT
;	NOT END UP AT AN ILLEGAL POSITION IN THE NEW WORLD.  
;
;	THIS COMMAND IS REGISTER ORIENTED IN ORDER TO ALLOW YOU TO ISSUE
;	IT FROM A PARAMETER PASSED IN A WORLD COMMAND.   YOUR REGISTER IS
;	MULTIPLIED BY 7 AND ADDED TO THE OFFSET YOU GIVE.  THE RESULT IS
;	USED AS IN INDEX INTO THE TABLE POINTED TO BY THE OFFSET.  AFTER
;	ISSUING THE COMMAND YOUR NEXT COMMAND IS EXECUTED.  REMEMBER THAT
;	THE WORLDGOTO DOES NOT STOP EXECUTION OF YOUR ENTITY, IT CONTINUES
;	TO FUNCTION IN THE NEW WORLD AT THE INSTRUCTION FOLLOWING THIS
;	COMMAND.  2 BYTES FOLLOW THIS COMMAND:
;		1 WORD POINTER TO THE TABLE OF GOTO LOCATIONS
;
;	EACH ENTRY IN THE TABLE CONSISTS OF 6 BYTES:
;		1 BYTE WORLD OR <NOCHANGE> (-1) 
;		1 BYTE SCREEN Y TEXT ROW LOCATION TO PUT THE ENTITIES TOP AT
;		  (JUST LIKE THE LAUNCH WORLD COMMANDS.
 ;		1 BYTE NEW TOP OF SCREEN LOCATION OR <DONTCARE> (-1) FOR
;		  FLOATING.  IF STRIP MODE, JUST USE 0.
;		1 WORD LEFTMOST SCREEN COLUMN OR <DONTCARE> (-1) FOR FLOATING
;		1 WORD SCREEN X COLUMN TO PUT THE ENTITIES LEFT AT (JUST LIKE
;		  THE LAUNCH WORLD COMMANDS).
;
;	SAMPLE USAGE:		.DB	FETCHREG,PARAM2	
;				.DB	WORLDGOTO
;				.DRW	WARPBASE	
;
;			WARPBASE:	.DB	7,3,0	    ;WORLD 7, ROW 3
;					.DRW	DONTCARE,32 ;COLUMN 32
;
;					.DB	NOCHANGE,24,0 ;CURRENT WORLD
;					.DRW	32,48	    ;COL 48 CENTERED
;8A = <REBORN> THIS COMMAND ALLOWS YOU TO RESET (ALLOW TO BE LAUNCHED)
;	ALL OR ANY OF THE PERMENENT ENTITY DEATH MEMORY BITS.  THERE ARE UP
;	TO 255 ENTITIES THAT CAN BE PERMANENTLY KEPT TRACK OF.  WHEN AN
;	ENTITY IS LAUNCHED, SETTING A NUMBER IN THE PERMANENT MEMORY INDEX
;	BYTE WILL CAUSE A CHECK OF THIS MEMORY TO BE MADE.  IF THAT ENTITY
;	HAS PREVIOUSLY DIED THEN IT WILL NOT BE LAUNCHED.  THE MEMORY IS
;	NOT AUTOMATICALLY INITIALIZED, YOU SHOULD DO THIS WITH YOUR OWN
;	LOGIC.  YOU SPECIFY SPECIFICALLY WHICH TO 0-254 ENTITY MEMORY BITS
;	YOU WANT TO RESET THUS ALLOWING THAT ENTITY TO LAUNCH IF ENCOUNTERED.
;	OR SPECIFY <ALL> FOR ALL BITS.  YOUR PROGRAM CAN DECIDE IF IT WANTS
;	TO USE THIS MEMORY FOR THE ENTIRE GAME OR JUST LEVEL BY LEVEL OR
;	IN ANY COMBINATION.  IF AN ENTITY DIES WITH THE DIE,0 COMMAND, 
;	PERMANENT MEMORY IS NOT CHANGED.  USE THIS FOR ENTITIES THAT SIMPLY
;	GO OFF SCREEN AND HAVE NOT BEEN KILLED.  USE DIE,1 TO MAKE THEM
;	PERMANENTLY DEAD.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE SPECIFYING PERMANENT MEMORY BIT TO RESET (0-254)
;			OR <ALL> TO RESET ALL OF THEM.
;8B = <IFNCHEAT>  IF NOT CHEAT MODE ENTRY.  THIS COMMAND WILL BRANCH IF
;	THE CURRENT WORLD WAS NOT ENTERED THROUGH CHEAT MODE.  WHEN CHEAT
;	MODE (B+SELECT) ENTERS A WORLD A FLAG IS SET.  USING THIS COMMAND
;	WILL RESET THE FLAG.  PUT YOUR CODE THAT IS VITAL TO EXECUTE
;	BELOW THIS INSTRUCTION AND BRANCH OVER IT IF ITS NOT CHEAT MODE
;	ENTERED.  2 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTION POINT IF NOT CHEAT MODE ENTERED WORLD
;8C = <WHOSLINKED> RETURN ENTITYTAB NUMBER (ID) OF FIRST ENTITY FOUND TO
;	BE LINKED TO THIS ENTITY.  THE REGISTER IS LOADED WITH THE ID.
;	-1 IS RETURNED IF NONE.  
;8D = <GETSCORE> GET THE SCORE.  THIS COMMAND ALLOWS YOU TO GET A SCORE
;	SO YOU CAN SAVE IT OUT AS A HIGH SCORE.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE SCORE TO GET (SEE CMD 37)
;8E = <PUTSCORE> PUT THE SCORE.  THIS COMMAND ALLOWS YOU TO PUT THE
;	REGISTER INTO EITHER SCORE.  1 BYTE FOLLOWS THIS COMMAND.
;		1 BYTE SCORE TO PUT (SEE CMD 37)
;8F = <SWAP> THIS COMMAND WILL SWAP THE LOW AND HIGH BYTES OF THE REGISTER.
;
;90 = <PEEK> THIS COMMAND WILL LOAD YOUR REGISTER FROM A LOCATION IN MEMORY.
;	THE BYTE AT THAT LOCATION IS RETURNED IN
;	YOU REGISTER AND THE REGISTER'S HIGH BYTE IS CLEARED.  2 BYTES
;	FOLLOW THIS COMMAND:
;		1 WORD OFFSET IN MEMORY
;
;	SAMPLE		.DB	PEEK
;			.DRW	ROMPAGE		;READS VARIABLE ROMPAGE
;91 = <POKE> THIS COMMAND WILL TAKE YOUR REGISTER'S LOW BYTE AND STORE
;	IT INTO THE MEMORY LOCATION YOU SPECIFY.  IT IGNORES THE REGISTER'S
;	HIGH BYTE.  2 BYTES FOLLOW THIS COMMAND:
;		1 WORD OFFSET IN MEMORY
;
;	SAMPLE		.DB	SETREG
;			.DRW	1      
;			.DB	POKE
;			.DRW	STATDELAY	;SET THE STATUS LINE DELAY
;						;TO THE LOWEST VALUE.
;92 = <NOTBUTTON> MOVE EXECUTE POINTER IF SPECIFIED JOYSTICK BITS ARE 
;	NOT SET.  SEE <BUTTON> FOR BITS.  IF ANY OF THE BITS ARE
;	SET THE EXECUTE POINTER WILL NOT BE MOVED. 3 BYTES FOLLOW THIS 
;	COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE BITS TO BE OFF
;93 =	<ABOVECOUNT> MOVE EXECUTE POINTER IF COUNTER IS ABOVE A 
;	SPECIFIED VALUE.  SEE <COUNT> 3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE COUNTER VALUE TO BE ABOVE.
;94 =	<IFXEDGE> MOVE EXECUTE POINTER IF WITHIN EDGE OF SCREEN ON
;	X AXIS.  YOU DEFINE THE DISTANCE FROM THE SIDE OF THE SCREEN WHICH
;	IS CONSIDERED THE EDGE.  3 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW POINTER
;		1 BYTE DISTANCE FROM EDGE FOR CENTERLINE OF SPRITE (IN PIXELS)
;95 =	<CASE> MOVE EXECUTE POINTER IF REGISTER IS EQUAL TO A VALUE IN THE
;	CASE LIST.  THIS COMMAND ALLOWS YOU TO CHECK THE REGISTER FOR 
;	SPECIFIC AND ARBITRARY VALUES.  FOR EACH VALUE YOU PROVIDE A
;	NEW EXECUTE LOCATION.  IF THE LIST DOES NOT CONTAIN THE REGISTER'S
;	VALUE, EXECUTION IS CONTINUED FOLLOWING THIS COMMAND.  A VARIABLE
;	NUMBER OF WORDS FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTION POINT, 1 WORD REG VALUE TO MATCH
;			REPEAT FOR ALL VALUES DESIRED
;		1 WORD OF 0 TO SIGNAL END OF LIST.
;
;	SAMPLE USAGE:		.DB	FETCHREG,ENTITY	;GET THE ENTITY
;				.DB	CASE		;CATCH SPECIAL ONES
;				.DRW	MAKEFIRE,5	;IF DRAGON
;				.DRW	MAKEROCKS,32	;IF MONGOLIAN
;				.DRW	FART,44		;IF DOG
;				.DRW	0		;END OF LIST
;96 =	<EDGEMOM> THIS COMMAND ALLOWS YOU TO ADD MOMENTUM TO THE ENTITY
;	WHICH IS CORRECTED FOR THE EDGE OF THE SCREEN YOU ARE NEAREST.
;	USE POSITIVE MOMENTUM TO REPEL AWAY FROM THE NEAREST EDGE
;	AND NEGATIVE TO ATTRACT TOWARDS IT.  IT WORKS FOR BOTH THE TOP AND
;	SIDES.  USE 0 TO MAKE NO CHANGE ON A GIVEN AXIS.  THE MOMENTUM
;	IS ADDED TO YOUR CURRENT MOMENTUM AFTER CORRECTION.  2 BYTES
;	FOLLOW THIS COMMAND:
;		1 BYTE MOMENTUM TO ADD TO X AXIS
;		1 BYTE MOMENTUM TO ADD TO Y AXIS
;97 =	<ANDDATA> THIS COMMAND WILL "AND" YOUR 1 WORD VALUE TO A COMMON
;	DATA AREA LOCATION.  SINCE THE REGISTER IS 1 WORD, 2 BYTES AT THE
;	COMMON DATA AREA LOCATION ARE FETCHED UNLIKE OTHER COMMANDS. 
;	THE RESULT OF THE AND IS STORED IN THE 1 WORD REGISTER.
;		1 BYTE DATA LOCATION TO BE ANDED (0-31) OR <STATE> 
;98 =	<STATREQUEST> THIS COMMAND ALLOWS YOU TO SAVE AND HIDE THE CURRENT
;	ENTITIES AND ENTER ANOTHER WORLD.  YOU CAN THEN RETURN FROM THAT
;	WORLD AND RESTORE THE CURRENT CONDITION.  IT IS NOT A PERFECT 
;	SAVE DUE TO MEMORY CONSTRAINTS.  FOR INSTANCE, ANY WRITEVIDS YOU
;	HAVE DONE WILL NOT BE RESTORED.  ALSO, YOU NEED TO CHECK FOR
;	FREE ENTITY SLOTS BEFORE EXECUTING THIS COMMAND TO INSURE THAT
;	YOUR NEW WORLD WILL BE ABLE TO LAUNCH WHATEVER ENTITIES IT
;	NEEDS.  USE THIS COMMAND TO PUT UP A "MAP" OR MESSAGE DURING
;	WORLD PLAY.  WHILE YOU ARE IN THE OTHER WORLD, YOU MAY USE THE
;	<WORLD> COMMAND TO REQUEST OTHER WORLDS BUT YOU MAY NOT USE
;	<WORLDGOTO> OR <STATREQUEST> OR <HIDEALL>. 
;
;	ON RETURN, THE ENTITY WILL EXECUTE AT THE INSTRUCTION FOLLOWING
;	THIS COMMAND. THE PRIOR CONDITION OF YOUR WORLD WILL BE RESTORED
;	IN SO FAR AS SYSTEM VARIABLES GO BUT ANY COMMON DATA AREA RAM
;	OR STATUS BAR CHARACTERS YOUR PROGRAM USES WHICH HAVE BEEN CHANGED
;	WILL NOT BE RESTORED.  YOU MUST LAUNCH AN ENTITY TO DO THIS
;	IMMEDIATLY AFTER THIS COMMAND. 1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE WORLD TO GO TO AFTER SAVING (SAME AS THE <WORLD> CMD.
;99 =	<ENDREQUEST> THIS COMMAND WILL RETURN FROM A WORLD INVOKED WITH
;	<STATREQUEST>.  YOU MUST INSURE THAT YOU WILL ISSUE THIS COMMAND
;	EVENTUALLY OR THE STATE MACHINE WILL GET MESSED UP.  YOU CAN HOWEVER
;	REQUEST OTHER STATUS MAP WORLDS WHILE IN THE STATUS WORLD SO LONG
;	AS THE NUMBER OF ENTITIES THEY LAUNCH DOES NOT EXCEED THE AVAILABLE
;	SLOTS NOT IN USE TO SAVE THE ORIGINAL WORLD'S ENTITIES.
;9A =	<IFREQUEST> THIS COMMAND ALLOWS YOU TO SHARE A WORLD AND HAVE IT
;	BE BOTH FOR NORMAL REQUESTING AND <STATREQUEST>ING.  YOUR BRANCH
;	IS TAKEN IF WE HAVE ISSUED A STATREQUEST WITHOUT AN ENDREQUEST.
;	2 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTE POINTER
;9B =	<USERSUB> THIS COMMAND ALLOWS YOU TO CALL A USER SUBROUTINE TO
;	DO SPECIAL TASKS SUCH AS CREATING A BACKGROUND LIST IN RAM FOR
;	USE WITH THE BACKGROUND INIT FUNCTION.  FOR INSTANCE, YOU
;	COULD PUT A BACKGROUND LIST IN STATE OR PERMANENT ENTITY MEMORY.
;	THEN YOUR BOOT SCREEN WOULD POINT TO A REAL (ROM BASED) BACKGROUND
;	LIST BUT YOUR FIRST WORLD WOULD POINT TO THE RAM BASED LIST.
;	FROM THEN ON YOU WOULD SIMPLY REQUEST WORLD 1 AND GENERATE A NEW
;	MAP WHEN YOU WANTED THE NEXT WORLD. 
;
;	YOU DO NOT NEED TO PRESERVE ANY REGISTERS IN YOUR ROUTINE.
;	INTERRUPTS MAY COME IN WHILE YOUR ROUTINE IS RUNNING, YOU
;	SHOULD NOT CODE SOMETHING THAT CARES ABOUT THAT.  USE
;	AN RTS TO RETURN.  1 WORD FOLLOWS THIS COMMAND:
;		1 WORD OFFSET OF USER SUB IN THIS ROM PAGE -1.
;
;	SAMPLE:		.DB	USERSUB
;			.DRW	MYROUTINE-1	;DON'T FORGET THE -1!!!
;
;9C =	<ROTATION> THIS COMMAND ALLOWS YOU TO TURN SPRITE ROTATION
;	ON OR OFF.  THE SPRITES ROTATE WHEN THERE ARE TOO MANY ON 
;	A LINE.  THIS TAKES PROCESSOR POWER.  IF YOU HAVE IT TURNED
;	OFF, THE EXTRA SPRITES WILL SIMPLY NOT DISPLAY.  1 BYTE
;	FOLLOWS THIS COMMAND:
;		1 BYTE <ON> OR <OFF>.
;9D =	<LOWEXEC> THIS COMMAND ALLOWS YOU TO CONTROL THE EXECUTION
;	PRIORITY BIT IN THE ENTITYTAB FLAG BITS.  THAT BIT IS IN 
;	THE THIRD BYTE, BIT H'20.  WHEN ON, THE ENTITY HAS LOW
;	PRIORITY ON EXECUTION.  IF THE STATE MACHINE GETS BEHIND
;	ON ENTITY EXECUTION THOSE WITH THIS BIT SET GET EXECUTED HALF
;	AS OFTEN AS THEY NORMALLY DO.  1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE <ON> OR <OFF>  (ON MAKES LOW EXECUTION PRIORITY).
;9E =	<XVIRTUAL> THIS COMMAND WILL MOVE THE EXECUTE POINTER IF AN
;	ENTITIES X LOCATION WITHIN THE LARGER VIRTUAL BACKGROUND IS LESS 
;	THAN OR EQUAL TO THE VALUE SPECIFIED.  THE CENTER OF THE ENTITY IS 
;	USED FOR THE X.  THE X POSITION NEEDS TO BE 1 WORD SINCE BACKGROUNDS
;	ARE VERY LONG.  THE VALUE IS SPECIFIED IN PIXELS.  THE LEFTMOST
;	PIXEL OF THE BACKGROUND IS 0.  4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTE POINTER
;		1 WORD X VALUE.
;9F =	<YVIRTUAL> THIS COMMAND WILL MOVE THE EXECUTE POINTER IF AN
;	ENTITIES Y LOCATION WITHIN THE LARGER VIRTUAL BACKGHROUND IS LESS
;	THAN OR EQUAL TO THE VALUE SPECIFIED.  VALUES WHERE YOUR ENTITY HAS
;	JUMPED ABOVE THE BACKGROUND ARE NEGATIVE AND THIS FUNCTION
;	DOES NOT ADJUST FOR THIS.   THE Y VIRTUAL LOCATION IS CONSIDERED
;	TO BE THE ENTITIES FEET SO IF YOUR ENTITY CANNOT JUMP SO HIGH THAT
;	HIS BOTTOM PIXEL ROW GOES ABOVE THE SCREEN (RECOMMENDED) YOU WON'T
;	HAVE NEGATIVE VALUES TROUBLES.   TRY SETTING THE WRAP PREVENTION
;	BIT IN THE ENTITY FLAGS TO EASE CHECKING. THE VALUE IS SPECIFIED
;	IN PIXELS AND SINCE THE VIRTUAL BACKGROUNDS CAN BE UP TO 
;	1920 PIXELS HIGH 1 FULL WORD IS NEEDED FOR THE PIXEL LOCATION.
;	THE TOPMOST PIXEL OF THE BACKGROUND IS 0. 4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTE POINTER
;		1 WORD Y VALUE.

;A0 =	<BVIRTUAL> THIS COMMAND WILL MOVE THE EXECUTE POINTER IF AN
;	ENTITIES Y LOCATION WITHIN THE LARGER VIRTUAL BACKGHROUND IS LESS THAN
;	OR EQUAL TO THE NUMBER OF PIXELS YOU SPECIFY FROM THE BOTTOM OF 
;	THE BACKGROUND. ITS LIKE YVIRTUAL EXCEPT THAT ITS ADAPTED SO THAT 
;	YOU CAN USE THE BOTTOM OF THE SCREEN AS PIXEL 0 INSTEAD OF THE TOP.  
;	THIS IS COMMONLY NEEDED.  THUS YOU CAN THINK OF THIS COMMAND
;	AS NUMBERING FROM THE BOTTOM INSTEAD OF THE TOP BUT OTHERWISE
;	THE SAME AS <YVIRUTAL>. 4 BYTES FOLLOW THIS COMMAND:
;		1 WORD NEW EXECUTE POINTER
;		1 WORD Y VALUE
;
;A1 =	<BLOAD> THIS COMMAND WILL LOAD A BYTE FROM THE COMMON DATA
;	AREA INTO THE ENTITIES REGISTER WITHOUT ZEROING THE HIGH REGISTER.
;
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE DATA TO BE FETCHED (0-31).  <STATE> IS ILLEGAL.
;A2 =   <LINKMOM> SET MOMENTUM TO MATCH THAT OF THE ENTITY TO WHOM YOU
;	ARE LINKED.  NO BYTES FOLLOW.
;A3 = 	<DISTANCE> MOVE EXECUTE POINTER IF TARGET IS WITHIN SPECIFIED
;	DISTANCE (LESS THAN DISTANCE).  IT DOES NOT MATTER WHICH DIRECTION
;	YOUR ENTITY IS FACING OR IF IT IS MOVING.  THE ENTITIES CENTERLINES 
;	ARE USED FOR THE X, THE BOTTOM PIXEL ROW (ITS FOOT) IS USED FOR THE Y.
;	THIS COMMAND IS FOLLOWED BY 4 BYTES:
;	   	1 WORD NEW POINTER (USED IF TEST PASSES)
;	   	1 BYTE X RANGE IN PIXELS (USE -1 FOR DON'T CARE)
;	   	1 BYTE Y RANGE IN PIXELS (USE -1 FOR DON'T CARE)
;A4 =	<LINKFACE> THIS COMMAND ALLOWS YOU TO FORCE YOUR LINKED ENTITY
;	TO HONOR ITS <FACE> SPECIFICATION.  NOTE THAT IF YOUR FACE
;	SPECIFICATION REQUIRES FACING THE DIRECTION OF TRAVEL, THIS
;	IS THE DIRECTION OF MOMENTUM AND YOU SHOULD PUT
;	A <LINKMOM> COMMAND IS A LOOP WHILE IT IS LINKED IF YOU WANT
;	TO FACE THE WAY THE ONE TO WHICH IT IS LINKED IS TRAVELING.
;	ALSO, THE RELATIVE LINK CALCULATIONS ARE CORRECTED FOR THE
;	DIRECTION THE ENTITY TO WHOM YOU ARE LINKED IS FACING REGARDLESS
;	OF WHETHER YOU USE THIS COMMAND.   THE BEST USE OF THIS
;	COMMAND IS TO MAKE YOUR ENTITY FACE UPSIDE DOWN WHILE LINKED.
;	ANY OTHER USE IS UP IN THE AIR.
;	1 BYTE FOLLOWS THIS COMMAND:
;		1 BYTE <ON> OR <OFF>.  ON MEANS IT USES <FACE> VALUE. 
;A5 =	<READCHAR> THIS COMMAND ALLOWS YOU TO READ THE BACKGROUND CHARACTER
;	UNDER YOUR SRITE.  YOU SPECIFY THE X AND Y DISPLACEMENT FROM
;	THE TOP LEFT OF THE SPRITE.  THE CHARACTER UNDER THAT POSITION IS
;	RETURNED IN THE LOW BYTE OF YOUR REGISTER AND THE HIGH BYTE IS
;	CLEARED.  NEGATIVE VALUES ARE SUBTRACTED FROM YOUR CURRENT LOCATION
;	BUT IT WRAPS AT 0 BYTEWISE.  YOUR REGISTER'S LOW BYTE IS USED 
;	FOR THE X AND THE REGISTER'S HIGH BYTE IS USED FOR THE Y.
;A6 =	<REGLAUNCH> RELATIVE LAUNCH OF AN ENTITY USING THE REGISTER.  
;	USE THIS COMMAND TO LAUNCH AN ENTITY 
;	THROW BULLETS, BOMBS, OR FOR SPECIAL STRUCTURES COMPRISED OF 
;	MULTIPLE ENTITIES SUCH AS WHIPS.  THE LOW BYTE OF YOUR REGISTER
;	IS ASSUMED TO CONTAIN THE X OFFSET AND THE HIGH THE Y.  THESE
;	ARE USED THE SAME AS FOR THE LAUNCH COMMAND.  2 BYTES FOLLOW 
;	THIS COMMAND:
;		1 BYTE ENTITY NUMBER TO LAUNCH.  
;		1 BYTE VALUE TO PLACE INTO PARAM2 OF THAT ENTITY.
;A7 =	<WHOSTHERE> SEE IF ENTITY EXISTS AT POINT RELATIVE TO YOUR ENTITY.
;	THIS COMMAND ADDS YOUR LOW REGISTER TO YOUR ENTITIES X OFFSET ON
;	VISUAL SCREEN AND THE HIGH REGISTER TO ITS Y OFFSET.  IT THEN
;	RETURNS THE FIRST ENTITY IT FINDS AT THAT SPOT ON SCREEN OR
;	A FULL WORD OF -1 IF NONE.  THE ENTITY NUMBER RETURNED IS
;	A FULL WORD OF THE ENTITY NUMBER FROM ENTITYTAB.  
;	AN ENTITY IS CONSIDERED TO BE AT THAT POINT IF IT IS WITHIN
;	8 PIXELS OF THE POINT YOU SPECIFY EVEN IF THAT POINT IS NOT
;	TOUCHING THE ENTITY.  IF THE POINT TOUCHES THE ENTITY, ITS
;	COUNTED AS THERE NO MATTER HOW FAR AWAY THE BORDER IS.
;	NO BYTES FOLLOW THIS COMMAND.
;A8 =	<ALIGNXY> THIS COMMAND WILL TAKE AN X SCREEN OFFSET IN THE
;	LOW BYTE OF YOUR REGISTER, A Y IN THE HIGH, AND WILL ADJUST
;	BOTH TO BE ON THE UPPER LEFT PIXEL OF THAT SCREEN ROW AND 
;	COLUMN.  USE THIS TO EXACTLY ALIGN REGLAUNCH OVER A SCREEN
;	ROW AND COLUMN REGARDLESS OF THE SCREEN'S ODD PIXEL SHIFT.
;	NO BYTES FOLLOW THIS COMMAND.
;A9 =	<MOVEOVER> THIS COMMAND ALLOWS YOU TO MOVE YOUR SPRITE WITHOUT
;	HAVING TO RELY ON MOMENTUM AND FIXED TIMING.  YOU SPECIFY
;	THE AMOUNT TO MOVE ON THE X AND Y (SIGNED VALUE).  2 BYTES
;	FOLLOW THIS COMMAND:
;		1 BYTE X DISPLACEMENT
;		1 BYTE Y DISPLACEMENT
;			OR
;		1 FULL WORD OF <REGISTER> TO USE LOW REG FOR X AND
;			HIGH REG FOR Y.

;THE FOLLOWING EQUATES ARE USED TO DEFINE THE COMMAND LANGUAGE RECOMMENDED
;IN THE DOCUMENTATION ABOVE.  SOME EQUATES ARE SPECIFIED IN THE COMMAND
;BLOCK FOR EASE OF UPDATE.

.EQU	ACTIVATE,H'00
.EQU	RANGE,H'01
.EQU	LEDGE,H'02
.EQU	PRECIPICE,H'03
.EQU	SKIP,H'04
.EQU	SLOTS,H'04
.EQU	RANDOM,H'05
.EQU	MOMLIMIT,H'06
.EQU	DELAY,H'07
.EQU	XDIR,H'07
.EQU	YDIR,H'08
.EQU	ADDMOM,H'08
.EQU	GRAVITY,H'09
.EQU	SOLIDSTATE,H'0A
.EQU	OFF,-1
.EQU	DONTCARE,-1
.EQU	NOCHANGE,-1
.EQU	ON,1
.EQU	SAFE,2
.EQU	IDENTIFY,H'0B
.EQU	BEHAVIOR,H'0B
.EQU	HERO0,H'0001
.EQU	HERO1,H'0002
.EQU	ENEMY,H'0004
.EQU	HELPER,H'0008
.EQU	BENIGN,H'0010
.EQU	HARMLESS,H'0020
.EQU	KILLER,H'0040
.EQU	DEADLY,H'0080
.EQU	BULLET0,H'0100
.EQU	BULLET1,H'0200
.EQU	BULLET,H'0400
.EQU	PLATFORM,H'0800
.EQU	HEART,H'1000
.EQU	PRIZE,H'2000
.EQU	SUPPLY,H'4000
.EQU	ASSAILANT,H'8000
.EQU	TARGET,H'0C
.EQU	XTRACK,H'0D
.EQU	NONE,H'00
.EQU	TOWARDS,H'01
.EQU	AWAY,H'02
.EQU	ORIGIN,H'03
.EQU	YTRACK,H'0E
.EQU	WORLD,H'0F
.EQU	JOYSTICK,H'10
.EQU	ADDJOYX,H'11
.EQU	XMOM,H'11
.EQU	ADDJOYY,H'12
.EQU	YMOM,H'12
.EQU	ZEROJOYX,H'13
.EQU	DEF_SOLID,H'13
.EQU	ZEROJOYY,H'14
.EQU	BUTTON,H'15
.EQU	SEQUENCE,H'16
.EQU	XLINK,H'16
.EQU	RESUME,H'17
.EQU	YLINK,H'17
.EQU	DING,H'18
.EQU	MUSTDEFEAT,H'18
.EQU	FINISH,H'19
.EQU	XDIST,H'19
.EQU	SETCOUNTER,H'1A
.EQU	YDIST,H'1A
.EQU	COUNT,H'1B
.EQU	FRICTION,H'1C
.EQU	GOTO,H'1D
.EQU	DIE,H'1E
.EQU	LAUNCH,H'1F
.EQU	STANDING,H'20
.EQU	DAMAGE,H'21
.EQU	ASSESS,H'22
.EQU	ATTACKER,H'23
.EQU	ATTACK,H'24
.EQU	SPEED,H'25
.EQU	REARM,H'26
.EQU	ATTACKED,H'27
.EQU	FRAME,H'28
.EQU	DISPLAY,H'29
.EQU	TOFRONT,H'00
.EQU	BEHIND,H'20
.EQU	WORLDCMD,H'2A
.EQU	IFPARAM,H'2B
.EQU	INSTRUCTIONS,H'2C
.EQU	SETMOM,H'2D
.EQU	TESTFLAG,H'2E
.EQU	DISABLE,H'2F
.EQU	ENABLE,H'30
.EQU	SOUND,H'31
.EQU	BOUNCE,H'32
.EQU	SETJOYX,H'33
.EQU	SETJOYY,H'34
.EQU	ACTIVE,H'35
.EQU	HURT,H'36
.EQU	ADDSCORE,H'37
.EQU	SETSCORE,H'38
.EQU	SCORE,H'39
.EQU	ADDHEROS,H'3A
.EQU	SETHEROS,H'3B
.EQU	HEROS,H'3C
.EQU	RESET,H'3D
.EQU	SETREG,H'3E
.EQU	REGISTER,H'00
.EQU	PARAM2,H'00
.EQU	HEALTH,H'01
.EQU	ENTITY,H'02
.EQU	FETCHREG,H'3F
.EQU	ANDREG,H'40
.EQU	COMPARE,H'41
.EQU	ADD,H'42
.EQU	SETPAUSE,H'43
.EQU	TABLE,H'44
.EQU	VICTIM,H'45					    
.EQU	LOAD,H'46
.EQU	STORE,H'47
.EQU	ADDDATA,H'48
.EQU	NOISE,H'49
.EQU	SETALT,H'4A
.EQU	ALTCOUNT,H'4B
.EQU	FACE,H'4C
.EQU	CURRENT,H'80
.EQU	TRAVELING,H'40
.EQU	RISING,H'20
.EQU	JOYDIR,H'10
.EQU	BPALETTE,H'4D
.EQU	SPALETTE,H'4E
.EQU	SHAKE,H'4F
.EQU	LOWNOISE,H'50
.EQU	XVISUAL,H'51
.EQU	YVISUAL,H'52
.EQU	EQUAL,H'53
.EQU	REGINDEX,H'54
.EQU	DISSCROLL,H'55
.EQU	ENASCROLL,H'56
.EQU	SETCOL,H'57
.EQU	COMPAREDATA,H'58
.EQU	REGMOM,H'59
.EQU	EXCHANGE,H'5A
.EQU	XOR,H'5B
.EQU	RGB,H'5C
.EQU	SETBEHAVIOR,H'5D
.EQU	RESETBEHAVIOR,H'5E
.EQU	IFBEHAVIOR,H'5F
.EQU	IFNBEHAVIOR,H'60
.EQU	CREATE,H'61
.EQU	STAIR,H'62
.EQU	ANIMATION,H'63
.EQU	CHEAT,H'64
.EQU	RESETFRICTION,H'65
.EQU	FLOOR,H'66
.EQU	LINK,H'67
.EQU	UNLINK,H'68
.EQU	SPAWN,H'69
.EQU	HALFFREQ,H'6A
.EQU	IFLINKED,H'6B
.EQU	RELINK,H'6C
.EQU	TOPSTAT,H'6D
.EQU	WRITEVID,H'6E
.EQU	FILLVID,H'6F
.EQU	SETSTATPAL,H'70
.EQU	RDIVIDE,H'71
.EQU	RMULTIPLY,H'72
.EQU	GETHEROS,H'73
.EQU	SHOWSCORE,H'74
.EQU	SHOWREG,H'75
.EQU	SETHEALTH,H'76
.EQU	SOUNDBUSY,H'77
.EQU	REGSOUND,H'78
.EQU	HIDEALL,H'79
.EQU	HOWMANY,H'7A
.EQU	TESTSOLID,H'7B
.EQU	WIPEOUT,H'7C
.EQU	THROWBACK,H'7D
.EQU	GETCOLUMN,H'7E
.EQU	TABLEVID,H'7F
.EQU	LIMIT,H'80
.EQU	MOVEIN,H'81
.EQU	NOTEQUAL,H'82
.EQU	PALCLR,H'83
.EQU	SETSELECT,H'84
.EQU	CDIVIDE,H'85
.EQU	GETJOYHEALTH,H'86
.EQU	SETJOYHEALTH,H'87
.EQU	ENTITYBITS,H'88
.EQU	WORLDGOTO,H'89
.EQU	REBORN,H'8A
.EQU	IFNCHEAT,H'8B
.EQU	WHOSLINKED,H'8C
.EQU	GETSCORE,H'8D
.EQU	PUTSCORE,H'8E
.EQU	SWAP,H'8F
.EQU	PEEK,H'90
.EQU	POKE,H'91
.EQU	NOTBUTTON,H'92
.EQU	ABOVECOUNT,H'93
.EQU	IFXEDGE,H'94
.EQU	CASE,H'95
.EQU	EDGEMOM,H'96
.EQU	ANDDATA,H'97
.EQU	STATREQUEST,H'98		
.EQU	ENDREQUEST,H'99			
.EQU	IFREQUEST,H'9A
.EQU	USERSUB,H'9B
.EQU	ROTATION,H'9C
.EQU	LOWEXEC,H'9D
.EQU	XVIRTUAL,H'9E		; (DON'T COMMENT OUT UNLESS YVIRTUAL ALSO)
.EQU	YVIRTUAL,H'9F
.EQU	BVIRTUAL,H'A0
.EQU	BLOAD,H'A1
.EQU	LINKMOM,H'A2
.EQU	DISTANCE,H'A3		
.EQU	LINKFACE,H'A4
.EQU	READCHAR,H'A5
.EQU	REGLAUNCH,H'A6
.EQU	WHOSTHERE,H'A7
.EQU	ALIGNXY,H'A8
.EQU	MOVEOVER,H'A9

;YOU CAN COMMENT OUT ANY THESE DEFINES AND THE REQUIRED CODE WILL
;NOT ASSEMBLE.  USE THIS TO FREE UP MEMORY IN EMERGENCY CASES.

;DEFINE( XDISPLAY,-1)
;DEFINE( XADDSCORE,-1)
;DEFINE( XSETSCORE,-1)
;DEFINE( XSCORE,-1)
;DEFINE( XVICTIM,-1)
;DEFINE( XDISSCROLL,-1)
;DEFINE( XSETCOL,-1)
;DEFINE( XCOMPAREDATA,-1)
;DEFINE( XRGB,-1)
;DEFINE( XSHOWSCORE,-1)
;DEFINE( XGETSCORE,-1)
;DEFINE( XPUTSCORE,-1)
;DEFINE( XPEEK,-1)
;DEFINE( XPOKE,-1)
;DEFINE( XEDGEMOM,-1)
;DEFINE( XUSERSUB,-1)
;DEFINE( XLOWEXEC,-1)
;DEFINE( XXVIRTUAL,-1)		; (DON'T COMMENT OUT UNLESS YVIRTUAL ALSO)
;DEFINE( XYVIRTUAL,-1)
;DEFINE( XBVIRTUAL,-1)
DEFINE( XBLOAD,-1)
;DEFINE( XLINKMOM,-1)
;DEFINE( XLINKFACE,-1)
DEFINE( XREADCHAR,-1)
DEFINE( XREGLAUNCH,-1)
;DEFINE( XWHOSTHERE,-1)
;DEFINE( XALIGNXY,-1)
;DEFINE( XMOVEOVER,-1)

;***************** WORLD SPECIFICATION INFO ************************
;THE WORLDS ARE COMPOSED OF BACKGROUND SPECIFICATIONS (NAMES) STRUNG
;TOGETHER AND TERMINATED WITH A -1.   A WORLD SHOULD BE THOUGHT OF
;AS A SINGLE OR MULTIPLE BACKGROUNDS LOGICALLY LINKED TOGETHER
;TO MAKE A SINGLE SCROLLABLE ENTITY.  BACKGROUNDS ARE JUST DEFFINITIONS
;OF WHAT DATA TO USE IN A PARTICULAR SPOT IN A WORLD.  
;WHEN YOUR ENTITY IS RUNNING THROUGH A WORLD, THE DATA USED TO MAKE
;THAT WORLD IS CHOSEN BY INDEXING INTO THIS LIST AND FINDING OUT
;WHERE IN WHAT BACKGROUND YOUR ENTITY IS.   THE REMAINING DATA FOR
;THE WORLD (PALETTES, CHARACTER SET, WORLD COMMANDS) IS TAKEN FROM THE
;INDIVIDUAL TABLES AND THERE IS A SINGLE ENTRY FOR EACH WORLD.  YOU
;CAN REUSE BACKGROUNDS AS MANY TIMES AS YOU WANT.  THE LENGTH LIMIT
;FOR A WORLD IS 8192 COLUMNS (256 FULL 32 WIDE SCREENS).  YOU MAY HAVE
;AS MANY ENTRIES IN THE LIST AS YOU WANT.  THE MINIMUM WIDTH FOR
;AN ENTRY IS 4 AND ALL ENTRIES MUST BE A MULTIPLE OF 4 WIDE (4, 8, 12, 16, 
;ETC.)  DON'T MAKE ONES THAT ARE NOT A MULTIPLE OF 4 OR YOU'LL BE SORRY!
;*******************************************************************

;THIS TABLE IS THE POINTER TO THE BACKGROUND LIST FOR A GIVEN WORLD
USE_BACK:			

.EQU	OVERWORLD,-1		;FOR GAME OVER

	.DRW	BTAB	  	;0 BOOT


	.DRW	WJ1_0		;1
	; .DRW	WC1_0		;2
	; .DRW	WC4_0		;3
	; .DRW	WC3_0		;4
	; .DRW	WJ3_0		;5
	; .DRW	WC2_0		;6
	; .DRW	WT1_0		;7
	; .DRW	WJ2_0	        ;8
 	; .DRW	WD1_0 		;9
	; .DRW	WDU2_0		;10
	; .DRW	WDU4_0		;11							   	
	; .DRW	WDU1_0 		;12
	; .DRW	WDU3_0 		;13
	; .DRW	WT4_0		;14
	; .DRW	WP2_0		;15
	; .DRW	WT3_0		;16
	; .DRW	WC5_0		;17
	; .DRW	WT2_0		;18
 	; .DRW 	WP1_0		;19
	; .DRW	WT5_0		;20
	; .DRW	WD2_0		;21
	; .DRW    ENDS            ;22    BIG MAN BOSS HIDE-OUT


	; .DRW	WC4_1		;23
	; .DRW	WC3_1		;24
	; .DRW	WJ3_1		;25
	; .DRW	WC2_1		;26
	; .DRW	WT1_1		;27
	; .DRW	WJ2_1	        ;28
 	; .DRW	WD1_1 		;29
	; .DRW	WDU2_1		;30
	; .DRW	WDU4_1		;31							   	
	; .DRW	WDU1_1 		;32
	; .DRW	WDU3_1 		;33
	; .DRW	WT4_1		;34
	; .DRW	WP2_1		;35
	; .DRW	WT3_1		;36
	; .DRW	WC5_1		;37
	; .DRW	WT2_1		;38
	; .DRW 	WP1_1		;39
	; .DRW	WT5_1		;40
	; .DRW	WD2_1		;41


	; .DRW	WC4_2		;42
	; .DRW	WC3_2		;43
	; .DRW	WC2_2		;44
	; .DRW	WT1_2		;45
	; .DRW	WJ2_2	        ;46
 	; .DRW	WD1_2 		;47
	; .DRW	WDU2_2		;48
	; .DRW	WDU1_2 		;49
	; .DRW	WDU3_2 		;50
	; .DRW	WT4_2		;51
	; .DRW	WP2_2		;52
	; .DRW	WT3_2		;53
	; .DRW	WC5_2		;54
	; .DRW	WT2_2		;55
	; .DRW 	WP1_2		;56
	; .DRW	WT5_2		;57
	; .DRW	WD2_2		;58


	; .DRW	WC4_3		;59
	; .DRW	WC3_3		;60
	; .DRW	WC2_3		;61
	; .DRW	WT1_3		;62
	; .DRW	WJ2_3	        ;63
	; .DRW	WDU2_3		;64	 SECRET ROOM
	; .DRW	WDU1_3 		;65
	; .DRW	WDU3_3 		;66
	; .DRW	WT4_3		;67
	; .DRW	WP2_3		;68
	; .DRW	WT3_3		;69
	; .DRW	WC5_3		;70
	; .DRW	WT2_3		;71
	; .DRW 	WP1_3		;72
	; .DRW	WT5_3		;73

; ;                 WINDOW ROOMS

	; .DRW	WIND0		;74
	; .DRW	WIND1		;75
	; .DRW	WIND2		;76
	; .DRW	WIND3		;77
	; .DRW	WIND4		;78
	; .DRW	WIND5		;79
	; .DRW	WIND6		;80
	; .DRW	WIND7		;81
; ;		    SPECIAL ROOM
	; .DRW	DIERM0		;82
	; .DRW	DIERM1		;83
	; .DRW	DIERM2		;84
	; .DRW	DIERM3		;85
	; .DRW	DIERM4		;86
	; .DRW	DIERM5		;87
	; .DRW	MESS		;88 	END MESSAGE
	; .DRW	MAPRM		;89

.EQU	MAX_WORLD,90 		;FIRST ILLEGAL WORLD # FOR CHEAT MODE

BTAB:	.DRW	BOOTSCRN,-1  	;0 BOOTSCRN

WJ1_0:
	.DRW	WRD1A,WRD1B,WRD1B,WRD1B
	.DRW	WRD1ROCK,WRD1B,WRD1B,WRD1ROCK
	.DRW	WRD1RVST,WRD1RVTR,WRD1RIVR,WRD1RVLD			;river start
	.DRW	WRD1RVTS,WRD1RVT2,WRD1RVT2,WRD1RVT2
	.DRW	WRD1RVTE,WRD1RIVR,WRD1RVLD,WRD1RVTS
	.DRW	WRD1RVTE,WRD1RVTR,WRD1RIVR,WRD1RVEN			;river end
	.DRW	WRD1B,WRD1RVST,WRD1RVEN,WRD1B,WRD1ROCK			;island 1 and 2, rockjump
	.DRW	WRD1RVST,WRD1RIVR,WRD1RIVR,WRD1RVEN				;river
	.DRW	WRD1B,WRD1B,WRD1RVST,WRD1RVTS,WRD1RVTE				;dickhead isle & river start
	.DRW	WRD1RVLD,WRD1RVTR,WRD1RVTS,WRD1RVT2
	.DRW	WRD1RVTE,WRD1RVTS,WRD1RVT2,WRD1RVTE
	.DRW	WRD1RVTS,WRD1RVTE,WRD1RVTR,WRD1RIVR,WRD1RIVR
	.DRW	WRD1RVLD,WRD1RVEN,WRD1B,WRD1CAVE,-1
; WC1_0:	.DRW	C1A,C1C,C1D,C1D,C1E,C1E,C1E,C1E
	; .DRW	C1D,C1D,C1C,C1D,C1E,C1E,C1D,C1D,C1E,C1G
	; .DRW	C1D,-1

; WC4_0:	.DRW	C4A,C4B,C4B,C4D,C4D,C4D,C4B,C4B,C4D,C4B,C4B,C4D,C4D
	; .DRW	C4B,C4B,C4B,C4D,C4D,C4D,C4B,C4B,C4B,C4C,-1

; WC3_0:	.DRW	C3A,C3B,C3B,C3B,C3B,C3B,C3B,C3C,C3B,C3B,C3B,C3B,C3B
	; .DRW	C3B,C3B,C3B,C3C,-1

; WJ3_0:	.DRW	J3A,J3B,J3B,J3B,J3B,J3B
	; .DRW	J3B,J3B,J3B,J3B,J3B,J3B,J3B
	; .DRW	J3B,J3B,J3B,J3B,J3C,J3A,-1

; WC2_0:	.DRW	C2E,C2F,C2D,C2B,C2B,C2C,C2F,C2F,C2F,C2B,C2F
	; .DRW   	C2F,C2D,C2B,C2B,C2B,C2C,C2F
	; .DRW	C2F,C2F,C2B,C2F,C2F,C2D,C2B,C2F,C2C,C2F,C2B
	; .DRW	C2B,C2C,C2F,C2F,C2F,C2B
	; .DRW	C2F,C2D,C2B,C2E,-1

; WT1_0:	.DRW	T1E,T1B,T1B,T1B,T1B,T1C,T1B,T1B,T1B,T1B
	; .DRW	T1B,T1B,T1C,T1B,T1B,T1B,T1B,T1B,T1C,T1B
	; .DRW	T1B,T1B,T1B,T1B,T1A,-1

; WJ2_0:	.DRW	J2A,J2C,J2C,J2C,J2C,J2C,J2C,J2D,J2C,J2C,J2C,J2C,J2D,J2C,J2C
	; .DRW	J2A,J2C,J2C,J2C,J2C,J2C,J2C,J2D
	; .DRW	J2B,-1

; WD1_0:	.DRW	D1D,D1B,D1C,D1C,D1B,D1B,D1B,D1B,D1B,D1C,D1C,D1C,D1C
	; .DRW	D1C,D1C,D1B,D1B,D1B,D1B,D1B,D1B,D1C,D1C,D1C,D1C,D1C
	; .DRW	D1C,D1B,D1B,D1B,D1B,D1B,D1B,D1C,D1C,D1C,D1D,-1

; WDU2_0:	.DRW	DU2B,DU2C,DU2C,DU2E,DU2E,DU2E,DU2E,DU2D,DU2D,DU2D,DU2C,DU2B
	; .DRW	DU2C,DU2D,DU2D,DU2C,DU2E,DU2E,DU2C,DU2D,DU2D,DU2C,DU2E,DU2B
	; .DRW	-1

; WDU4_0:	.DRW	DU4C,DU4D,DU4D,DU4D,DU4A,DU4B,DU4D,DU4D,DU4A,DU4D,DU4D
	; .DRW	DU4D,DU4A,DU4D,DU4D,DU4D,DU4B,DU4A,DU4D,DU4A,DU4D,DU4D
	; .DRW	DU4D,DU4A,DU4D,DU4A,DU4C,-1

; WDU1_0:	.DRW	DU1E,DU1C,DU1C,DU1C,DU1C,DU1F,DU1B,DU1B,DU1G,DU1A,DU1B,DU1A,DU1C,DU1C,DU1C,DU1C,DU1D,DU1C,DU1C,DU1F,DU1B,DU1B,DU1G
	; .DRW	DU1A,DU1B,DU1A,DU1C,DU1C,DU1B,DU1B,DU1C,DU1C,DU1D,-1

; WDU3_0:	.DRW	DU3F,DU3B,DU3B,DU3B,DU3B,DU3C,DU3B,DU3B,DU3B,DU3B,DU3B
	; .DRW	DU3B,DU3B,DU3B,DU3A,DU3B,DU3B,DU3B,DU3B,DU3B,DU3D,-1

; WT4_0:	.DRW	T4A,T4B,T4B,T4B,T4D,T4D,T4D,T4B,T4B,T4B,T4D
	; .DRW	T4D,T4D,T4B,T4A,T4B,T4D,T4D,T4D,T4B,T4B,T4B
	; .DRW	T4B,T4D,T4B,T4E,-1

; WP2_0:	.DRW	P2A,P2D,P2C,P2C,P2C,P2C,P2C,P2D,P2C,P2C,P2C,P2D,P2C,P2C
	; .DRW	P2C,P2C,P2C,P2B,P2C,P2C,P2D,P2C,P2C,P2F,P2C,P2C,P2C,P2E,-1

; WT3_0:	.DRW	T3A,T3B,T3B,T3B,T3C,T3C,T3C,T3C,T3B,T3C,T3B,T3C,T3C,T3B
	; .DRW	T3B,T3B,T3C,T3B,T3C,T3B,T3D,-1

; WC5_0:	.DRW	C5A,C5C,C5B,C5C,C5B,C5C,C5A,C5C,C5C,C5C
	; .DRW	C5C,C5B,C5C,C5A,-1

; WT2_0:	.DRW	T2E,T2B,T2C,T2D,T2D,T2A,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2E,T2B,T2C
	; .DRW	T2D,T2D,T2A,T2B,T2B,T2C,T2D,T2A,T2B,T2E,-1
	

; WP1_0:	.DRW	P1E,P1G,P1H,P1A,P1B,P1A,P1B,P1C,P1D,P1D,P1G,P1H
	; .DRW	P1B,P1C,P1A,P1H,P1F,P1C,P1A,P1B,P1C,P1D,P1F,P1B,P1C,P1G
	; .DRW	P1F,P1G,P1F,P1B,P1H,P1G,P1E,-1

; WT5_0:	.DRW	T5A,T5B,T5D,T5D,T5C,T5E,T5E,T5B,T5D,T5D,T5D,T5C
	; .DRW    T5E,T5E,T5E,T5B,T5D,T5D,T5D,T5D,T5C,T5E,T5E,T5A,-1

; WD2_0:	.DRW	D2A,D2B,D2B,D2B,D2C,D2B,D2B,D2B,-1

; ENDS:	.DRW	BOSSRM1,BOSSRM6,BOSSRM6,BOSSRM6,BOSSRM6,BOSSRM2,BOSSRM5,BOSSRM5
	; .DRW	BOSSRM5,BOSSRM9,BOSSRM5,BOSSRM7,BOSSRM3,BOSSRM3,BOSSRM3,BOSSRM3,BOSSRM3,BOSSRM4,BOSSRM5,BOSSRM5
	; .DRW	BOSSRM5,BOSSRM5,BOSSRM7,BOSSRM3,BOSSRM3,BOSSRM3,BOSSRM3,BOSSRM4,BOSSRM5,BOSSRM5,BOSSRM5,BOSSRM8
	; .DRW	BOSSRM6,BOSSRM6,BOSSRM6,BOSSRM6,BOSSRM2,BOSSRM5,BOSSRM5,BOSSRM8,BOSSRM6,BOSSRM6,BOSSRM6
	; .DRW	BOSSRM6,BOSSRM6,BOSSRM2,BOSSRM5,BOSSRM5,BOSSRM9,BOSSRM9,BOSSRM5,BOSSRM5,BOSSRM7,BOSSRM3,BOSSRM4
	; .DRW	BOSSRM5,BOSSRM9,BOSSRM5,BOSSRM8,BOSSRM6,BOSSRM6,BOSSRM6,-1
	
; WC4_1:	.DRW	C4C,C4D,C4D,C4B,C4B,C4D,C4B,C4B,C4B,C4D,C4D,C4B,C4D
	; .DRW	C4B,C4C,-1

; WC3_1:	.DRW	C3B,C3D,C3B,C3B,C3B,C3B,C3B,C3B,C3B,C3B,C3C,C3B,C3B,C3B
	; .DRW	C3B,C3C,C3B,C3C,-1

; WJ3_1:	.DRW	J3A,J3C,J3B,J3B,J3B,J3B,J3B
	; .DRW	J3B,J3B,J3C,J3B,J3B,J3A,J3B,J3B,J3B
	; .DRW	J3B,J3B,J3B,J3B,J3B,J3C,J3B
	; .DRW	J3A,-1

; WC2_1:	.DRW	C2E,C2B,C2B,C2F,C2D,C2F,C2B,C2C,C2B,C2B,C2F,C2D,C2B,C2B,C2C,C2F
	; .DRW	C2B,C2B,C2F,C2F,C2B,C2B,C2D,C2C,C2F,C2B,C2C,C2F,C2F,C2F
	; .DRW	C2D,C2F,C2E,-1

; WT1_1:	.DRW	T1A,T1B,T1C,T1B,T1B,T1B,T1B,T1B,T1C
	; .DRW	T1B,T1B,T1B,T1B,T1C,T1B,T1B,T1B,T1B,T1B,T1B
	; .DRW	T1C,T1B,T1B,T1B,T1A,-1

; WJ2_1:	.DRW	J2B,J2C,J2C,J2C,J2C,J2D,J2C,J2C,J2C,J2C,J2C
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2D
	; .DRW	J2A,-1

; WD1_1:	.DRW	D1D,D1B,D1B,D1B,D1B,D1C,D1C,D1C,D1B,D1B,D1B,D1C,D1C
	; .DRW	D1B,D1B,D1C,D1C,D1C,D1C,D1B,D1B,D1B,D1D,D1B,D1B,D1B,D1B
	; .DRW	D1C,D1C,D1C,D1B,D1B,D1B,D1B,D1C,D1B,D1B,D1D,-1

; WDU2_1:	.DRW	DU2B,DU2C,DU2C,DU2E,DU2E,DU2E,DU2E,DU2D,DU2D,DU2D,DU2C,DU2B
	; .DRW	DU2C,DU2D,DU2D,DU2C,DU2E,DU2E,DU2C,DU2D,DU2D,DU2C,DU2E,DU2B
	; .DRW	-1

; WDU4_1:	.DRW	DU4C,DU4D,DU4D,DU4D,DU4B,DU4A,DU4D,DU4D,DU4D,DU4A,DU4D
	; .DRW	DU4D,DU4D,DU4B,DU4A,DU4D,DU4D,DU4A,DU4D,DU4A,DU4A,DU4D,DU4A
	; .DRW	DU4D,DU4A,DU4B,DU4D,DU4C,-1

; WDU1_1:	.DRW	DU1D,DU1F,DU1B,DU1B,DU1G,DU1F,DU1B
	; .DRW	DU1B,DU1G,DU1C,DU1C,DU1C,DU1C
	; .DRW	DU1C,DU1A,DU1F,DU1B,DU1B,DU1G,DU1A
	; .DRW	DU1C,DU1C,DU1D,DU1C,DU1C
	; .DRW	DU1F,DU1B,DU1B,DU1G,DU1A,DU1B,DU1B,DU1G,DU1C,DU1C,DU1C,DU1C
	; .DRW	DU1C,DU1F,DU1B,DU1B,DU1G,DU1C,DU1D,-1

; WDU3_1:	.DRW	DU3D,DU3B,DU3B,DU3B,DU3B,DU3A,DU3B,DU3B,DU3B,DU3B,DU3B
	; .DRW	DU3B,DU3B,DU3B,DU3B,DU3B,DU3B,DU3B,DU3B,DU3C,DU3E,-1

; WT4_1:	.DRW	T4A,T4D,T4B,T4B,T4B,T4B,T4B,T4B,T4D,T4D,T4B
	; .DRW	T4B,T4D,T4B,T4B,T4B,T4B,T4D,T4B,T4D,T4B,T4D
	; .DRW	T4B,T4D,T4B,T4E,-1

; WP2_1:	.DRW	P2E,P2C,P2C,P2C,P2C,P2D,P2C,P2C,P2C,P2B,P2C,P2C,P2C,P2D
	; .DRW	P2C,P2C,P2C,P2D,P2C,P2C,P2D,P2C,P2C,P2C,P2C,P2C,P2F,-1

; WT3_1:	.DRW	T3A,T3C,T3C,T3C,T3B,T3C,T3B,T3B,T3B,T3C,T3B,T3A,T3C,T3B,T3C
	; .DRW	T3C,T3C,T3B,T3B,T3B,T3C,T3D,-1

; WC5_1:	.DRW	C5A,C5C,C5C,C5B,C5C,C5C,C5B,C5C,C5C,C5B,C5C,C5C,C5C,C5C
	; .DRW	C5B,C5C,C5C,C5A,-1

; WT2_1:	.DRW	T2E,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2C,T2D
	; .DRW	T2D,T2A,T2B,T2B,T2C,T2D,T2D,T2A,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2B
	; .DRW	T2C,T2D,T2A,T2B,T2B,T2B,T2E,-1

; WP1_1:	.DRW	P1E,P1B,P1A,P1B,P1C,P1G,P1H,P1F,P1B,P1A,P1B,P1C
	; .DRW	P1F,P1G,P1F,P1H,P1F,P1B,P1A,P1H,P1G,P1C,P1F,P1B,P1C,P1G
	; .DRW	P1F,P1G,P1F,P1B,P1H,P1G,P1E,-1

; WT5_1:	.DRW	T5A,T5E,T5E,T5B,T5D,T5C,T5E,T5E,T5E,T5B,T5E,T5A,T5E
	; .DRW    T5C,T5E,T5E,T5B,T5D,T5C,T5E,T5E,T5C,T5E,T5B,T5A,-1

; WD2_1:	.DRW	D2B,D2B,D2B,D2B,D2C,D2B,D2B,D2B,-1


; WC4_2:	.DRW	C4A,C4D,C4D,C4D,C4B,C4B,C4D,C4B,C4B,C4D,C4B,C4D,C4B
	; .DRW	C4B,C4B,C4D,C4B,C4D,C4D,C4D,C4B,C4B,C4B,C4C,-1

; WC3_2:	.DRW	C3A,C3B,C3B,C3B,C3B,C3B,C3C,C3B,C3B,C3B,C3B,C3B,C3B
	; .DRW	C3A,C3B,C3B,C3B,C3B,C3B,C3B,C3C,C3B,C3B,C3B,C3C,C3B,C3D,-1

; WC2_2:	.DRW	C2E,C2F,C2F,C2B,C2B,C2C,C2F,C2B,C2B,C2F,C2D,C2B,C2F,C2B,C2B
	; .DRW	C2B,C2F,C2F,C2B,C2C,C2B,C2F,C2F,C2B,C2F,C2D,C2F,C2F,C2B
	; .DRW	C2B,C2F,C2F,C2B,C2C,C2F,C2D,C2B,C2F,C2C,C2F
        ; .DRW    C2F,C2D,C2B,C2B,C2E,-1

; WT1_2:	.DRW	T1E,T1B,T1B,T1B,T1B,T1C,T1B,T1B
	; .DRW	T1C,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1E,T1B,T1B,T1B,T1C,T1B
	; .DRW	T1B,T1B,T1B,T1B,T1C,T1B,T1B,T1B,T1B,T1C,T1B,T1B,T1B,T1B,T1B,T1B,T1E,-1

; WJ2_2:	.DRW	J2B,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2D,J2C,J2C
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2D,J2C,J2C
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2D,J2C,J2C,J2D,J2C,J2C,J2C,J2C,J2A,-1

; WD1_2:	.DRW	D1D,D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1C,D1C,D1C,D1C
	; .DRW	D1B,D1B,D1B,D1B,D1C,D1B,D1B,D1C,D1C,D1B,D1B,D1B,D1B
	; .DRW	D1C,D1C,D1B,D1B,D1C,D1C,D1B,D1B,D1B,D1C,D1B,D1C,D1B
	; .DRW	D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1B,D1B
	; .DRW	D1B,D1B,-1

; WDU2_2:	.DRW	DU2B,DU2C,DU2C,DU2E,DU2E,DU2C,DU2E,DU2E,DU2D,DU2D,DU2D,DU2C,DU2B
	; .DRW	DU2C,DU2D,DU2E,DU2D,DU2C,DU2E,DU2E,DU2C,DU2D,DU2D,DU2C,DU2E,DU2B
	; .DRW	-1

; WDU1_2:	.DRW	DU1D,DU1A,DU1A,DU1F,DU1B,DU1B,DU1G,DU1F,DU1B,DU1B,DU1G,DU1C
	; .DRW	DU1C,DU1B,DU1B,DU1G,DU1C,DU1C,DU1F,DU1B,DU1B,DU1G
	; .DRW	DU1F,DU1B,DU1B,DU1G,DU1C,DU1C,DU1A,DU1D,DU1C,DU1B,DU1G,DU1A
	; .DRW	DU1B,DU1B,DU1G,DU1C,DU1C,DU1C,DU1C,DU1C,DU1B,DU1B
	; .DRW	DU1D,DU1B,DU1G,DU1A,DU1C,DU1C,DU1B,DU1G
	; .DRW	DU1B,DU1B,DU1C,DU1C,DU1F,DU1B,DU1G,DU1A
	; .DRW	DU1D,-1

; WDU3_2:	.DRW	DU3D,DU3B,DU3B,DU3B,DU3B,DU3B,DU3B,DU3A,DU3B,DU3B
	; .DRW	DU3B,DU3B,DU3C,DU3B,DU3D,DU3B,DU3B,DU3B,DU3B,DU3B
	; .DRW	DU3B,DU3B,DU3C,DU3B,DU3E,-1
; ;ON 9/20 THIS WAS LINE # 17268
; WT4_2:	.DRW	T4A,T4D,T4D,T4B,T4B,T4B,T4B,T4D,T4B,T4D,T4B
	; .DRW	T4B,T4B,T4B,T4B,T4B,T4B,T4B,T4D,T4D,T4D,T4B
	; .DRW	T4B,T4B,T4B,T4B,T4B,T4B,T4B,T4E,-1

; WP2_2:	.DRW	P2E,P2F,P2C,P2C,P2C,P2C,P2D,P2C,P2C,P2B,P2C,P2D,P2D,P2C
	; .DRW	P2C,P2C,P2F,P2C,P2C,P2C,P2B,P2C,P2D,P2C,P2C,P2C,P2F,P2C
	; .DRW	P2C,P2C,P2C,P2D,P2D,P2C,P2C,P2C,P2B,P2C,P2C,P2D,P2D,P2C
	; .DRW	P2C,P2C,P2C,P2F,P2C,P2C,-1

; WT3_2:	.DRW	T3D,T3B,T3B,T3C,T3C,T3C,T3C,T3C,T3B,T3B,T3C,T3C,T3B,T3C
	; .DRW	T3C,T3B,T3C,T3B,T3C,T3C,T3B,T3B,T3C,T3B,T3C,T3B,T3B
	; .DRW	T3B,T3C,T3C,T3C,T3C,T3B,T3B,T3C,T3A,-1

; WC5_2:	.DRW	C5A,C5C,C5C,C5B,C5C,C5C,C5C,C5C
	; .DRW	C5C,C5B,C5C,C5C,C5C,C5C,C5B,C5C
	; .DRW	C5C,C5B,C5C,C5C,C5C,C5C,C5C,C5B
	; .DRW	C5C,C5C,C5A,-1

; WT2_2:	.DRW	T2E,T2B,T2B,T2C,T2D,T2D,T2D,T2A
	; .DRW	T2B,T2C,T2D,T2D,T2A,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2C
	; .DRW	T2D,T2D,T2A,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2C,T2D,T2A,T2B,-1

; WP1_2:	.DRW	P1E,P1F,P1G,P1F,P1H,P1B,P1A,P1B,P1C,P1D,P1C,P1B
	; .DRW	P1A,P1B,P1C,P1G,P1G,P1F,P1A,P1F,P1H,P1B,P1C,P1D,P1B,P1B
	; .DRW	P1F,P1F,P1E,-1
; WT5_2:	.DRW	T5A,T5B,T5D,T5C,T5E,T5B,T5D,T5D,T5D,T5C,T5E,T5E
	; .DRW    T5C,T5E,T5B,T5D,T5D,T5C,T5E,T5E,T5E,T5B,T5D,T5C
	; .DRW    T5E,T5E,T5B,T5D,T5C,T5A,-1



; WD2_2:	.DRW	D2B,D2B,D2B,D2B,D2C,D2B,D2B,D2D,-1


; WC4_3:	.DRW	C4C,C4D,C4B,C4B,C4D,C4D,C4B,C4B,C4B,C4B,C4D
	; .DRW	C4D,C4B,C4B,C4D,C4C,C4B,C4D,C4B,C4B,C4B,C4B,C4D
	; .DRW	C4B,C4D,C4B,C4D,C4A,-1

; WC3_3:	.DRW	C3B,C3D,C3B,C3B,C3B,C3B,C3B,C3B,C3C,C3B,C3B,C3C,C3B,C3B
	; .DRW	C3B,C3B,C3B,C3B,C3B,C3C,C3B,C3C,C3B,C3B,C3C,C3B,C3B
	; .DRW	C3B,C3C,C3B,C3A,-1

; WC2_3:	.DRW	C2E,C2B,C2B,C2F,C2D,C2B,C2B
	; .DRW	C2B,C2C,C2F,C2B,C2F,C2F,C2C,C2F,C2B,C2F,C2F
	; .DRW	C2B,C2B,C2B,C2E,C2B,C2F,C2C,C2F,C2B,C2F,C2B,C2C,C2F,C2B
	; .DRW	C2B,C2C,C2D,C2C,C2E,-1

; WT1_3:	.DRW	T1E,T1B,T1B,T1B,T1B,T1C,T1B,T1B
	; .DRW	T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1C
	; .DRW	T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1B,T1C,T1B
	; .DRW	T1B,T1B,T1B,T1B,T1B,T1C,T1F,-1

; WJ2_3:	.DRW	J2B,J2D,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2D,J2C,J2C
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2D
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C
	; .DRW	J2D,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C
	; .DRW	J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2C,J2D,J2A,-1

; WDU2_3:	.DRW	WINC,WINB,WINB,WINB,WINB,WINB,WINB,WINB,WINB,WINB,WINB	
	; .DRW	WINB,WINB,WINB,WINB,-1

; WDU1_3:	.DRW	DU1D,DU1C,DU1C,DU1C,DU1C
	; .DRW	DU1B,DU1B,DU1G,DU1C,DU1C,DU1A,DU1C,DU1A,DU1F,DU1B,DU1B,DU1G
	; .DRW	DU1C,DU1C,DU1C,DU1C,DU1C,DU1C,DU1A,DU1F,DU1B,DU1G,DU1C
	; .DRW	DU1F,DU1B,DU1B,DU1G,DU1A,DU1F,DU1B,DU1B,DU1G,DU1C,DU1C
	; .DRW	DU1C,DU1F,DU1B,DU1B,DU1G,DU1A,DU1C,DU1C,DU1C,DU1F,DU1B,DU1B,DU1G
	; .DRW	DU1C,DU1C,DU1A,-1

; WDU3_3:	.DRW	DU3E,DU3B,DU3B,DU3C,DU3B,DU3B,DU3B,DU3B,DU3B
	; .DRW	DU3B,DU3B,DU3C,DU3B,DU3B,DU3B,DU3B,DU3B,DU3B,DU3A
	; .DRW	DU3B,DU3B,DU3B,DU3C,DU3B,DU3E,-1

; WT4_3:	.DRW	T4A,T4D,T4D,T4B,T4B,T4B,T4B,T4D,T4B,T4B,T4D
	; .DRW	T4D,T4D,T4B,T4B,T4B,T4B,T4B,T4D,T4D,T4D,T4D
	; .DRW	T4D,T4D,T4B,T4D,T4B,T4D,T4B,T4B,T4B,T4E,-1

; WP2_3:	.DRW	P2E,P2F,P2C,P2C,P2C,P2D,P2C,P2C,P2C,P2D,P2C,P2B,P2C,P2C
	; .DRW	P2C,P2D,P2C,P2C,P2C,P2F,P2D,P2C,P2C,P2C,P2D,P2C,P2B,P2C
	; .DRW	P2C,P2C,P2F,P2D,P2C,P2C,P2E,-1


; WT3_3:	.DRW	T3D,T3B,T3C,T3B,T3B,T3B,T3C,T3C,T3B,T3C,T3C,T3C,T3C
	; .DRW	T3C,T3C,T3B,T3B,T3C,T3B,T3C,T3B,T3B,T3C,T3B
	; .DRW	T3C,T3B,T3C,T3C,T3B,T3D,-1

; WC5_3:	.DRW	C5A,C5C,C5C,C5B,C5C,C5C,C5C,C5C
	; .DRW	C5B,C5C,C5C,C5C,C5C,C5C,C5C,C5B
	; .DRW	C5C,C5C,C5C,C5A,C5C,C5C,C5C,C5C
	; .DRW	C5C,C5B,C5C,C5C,C5C,C5B,C5C,C5C,C5A,-1

; WT2_3:	.DRW	T2E,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2B,T2C,T2D,T2D
	; .DRW	T2D,T2A,T2B,T2B,T2C,T2D,T2D,T2D,T2D,T2A,T2B,T2B,T2B,T2B
	; .DRW	T2B,T2B,T2B,T2B,T2C,T2D,T2D,T2D,T2A,T2B,T2B
	; .DRW	T2C,T2D,T2D,T2D,T2D,T2D,T2A,T2B,T2C,T2D,T2A,T2E,-1

; WP1_3:	.DRW	P1E,P1F,P1F,P1G,P1F,P1G,P1H,P1B,P1C,P1D,P1C,P1B
	; .DRW	P1A,P1A,P1B,P1B,P1F,P1F,P1F,P1G,P1F,P1H,P1E,P1B,P1C,P1D
	; .DRW	P1F,P1D,P1D,P1C,P1B,P1F,P1A,P1C,P1D,P1E,-1

; WT5_3:	.DRW	T5A,T5E,T5C,T5E,T5E,T5E,T5B,T5D,T5D,T5C,T5E,T5E
	; .DRW    T5B,T5D,T5C,T5E,T5E,T5C,T5E,T5E,T5B,T5D,T5D,T5C
	; .DRW    T5E,T5E,T5E,T5B,T5D,T5C,T5E,T5E,T5A,-1


; ;	          	WINDOW ROOMS
; WIND0:	.DRW	WINA,WINB,WINB,WIND,WINB,WINB,WIND,WIND,WINB,WINB,WIND,WIND,WIND,WINB,WINB,-1
; WIND1:	.DRW	WINA,WIND,WIND,WINB,WINB,WIND,WINB,WIND,WINB,WINB,WIND,WIND,WIND,WINB,WINB,WINB,WINB,WINB,WINB,-1
; WIND2:	.DRW	WINA,WINB,WIND,WINB,WIND,WINB,WIND,WIND,WIND,WINB,WIND,WIND,WINB,WINB,WINB,-1
; WIND3:	.DRW	WINA,WINB,WIND,WIND,WINB,WINB,WIND,WINB,WINB,WINB,WIND,WINB,WINB,WIND,WINB,WINB,WIND,-1
; WIND4:	.DRW	WINA,WIND,WIND,WINB,WINB,WIND,WIND,WIND,WIND,WIND,WIND,WINB,WINB,-1
; WIND5:	.DRW	WINA,WIND,WINB,WIND,WIND,WINB,WINB,WINB,WINB,WIND,WIND,WINB,WINB,WIND,WINB,-1
; WIND6:	.DRW	WINA,WINB,WINB,WINB,WINB,WIND,WIND,WIND,WINB,WINB,WIND,WIND,WINB,WIND,WINB,-1
; WIND7:	.DRW	WINA,WINB,WINB,WIND,WINB,WINB,WIND,WINB,WINB,WINB,WIND,WIND,WINB,WINB,WIND,WINB,WINB,WINC,-1

DIERM0:	.DRW	DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,-1
DIERM1:	.DRW	DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,-1
DIERM2:	.DRW	DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,-1
DIERM3:	.DRW	DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,-1
DIERM4:	.DRW	DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,-1
DIERM5:	.DRW	DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,DIE1,-1
MESS:	.DRW	FINI,-1
MAPRM:	.DRW	MAPS,-1	

DEFINE( NOLEFT,-1)		;REMOVE COMMENT TO ELIMINATE TABLE START_BACK
  
;THIS TABLE HAS THE BACKGROUND CHARACTER SET TO USE FOR A GIVEN WORLD.  SINCE
;THE SPRITES RUN IN 2 HIGH MODE, THEY ALWAYS USE BOTH SETS IN THIS BANK.

USE_BCHRS:			

;			   LEVEL 0
		.DB 	4		;BOOT 0
		.DB	0	 	;1 
		.DB	8	 	;2 
		.DB	8	 	;3 
		.DB 	8	 	;4 
		.DB	0	 	;5 
		.DB	8	 	;6 
	       	.DB	6		;7
		.DB	0		;8
		.DB	2		;9
		.DB	10		;10
		.DB	10		;11
		.DB	10 		;12
		.DB	10		;13
		.DB	6		;14
		.DB	2		;15
		.DB	6		;16
		.DB	8		;17
		.DB	6		;18
		.DB	2		;19
		.DB	6		;20
		.DB	2		;21
		.DB	12		;22

;			    LEVEL 1
		.DB	8	 	;23
		.DB 	8	 	;24
		.DB	0	 	;25
		.DB	8	 	;26 
	       	.DB	6		;27
		.DB	0		;28
		.DB	2		;29
		.DB	10		;30
		.DB	10		;31
		.DB	10 		;32
		.DB	10		;33
		.DB	6		;34
		.DB	2		;35
		.DB	6		;36
		.DB	8		;37
		.DB	6		;38
		.DB	2		;39
		.DB	6		;40
		.DB	2		;41
					 
;			     LEVEL 2
		.DB	8	 	;42
		.DB 	8	 	;43
		.DB	8	 	;44
	       	.DB	6		;45
		.DB	0		;46
		.DB	2		;47
		.DB	10		;48
		.DB	10 		;49
		.DB	10		;50
		.DB	6		;51
		.DB	2		;52
		.DB	6		;53
		.DB	8		;54
		.DB	6		;55
		.DB	2		;56
		.DB	6		;57
		.DB	2		;58
;			    LEVEL 3

		.DB	8	 	;59
		.DB 	8	 	;60
		.DB	8	 	;61
	       	.DB	6		;62
		.DB	0		;63
		.DB	14		;64
		.DB	10 		;65
		.DB	10		;66
		.DB	6		;67
		.DB	2		;68
		.DB	6		;69
		.DB	8		;70
		.DB	6		;71
		.DB	2		;72
		.DB	6		;73

		.DB	14		;74
		.DB	14		;75
		.DB	14		;76
		.DB	14		;77
		.DB	14		;78
		.DB	14		;79
		.DB	14		;80
		.DB	14		;81
		.DB	14		;82
		.DB	14		;83
		.DB	14		;84
		.DB	14		;85
		.DB	14		;86
		.DB	14		;87
		.DB	4		;88
		.DB	12		;89

;THIS TABLE HAS THE BACKGROUND PALETTE TO USE FOR A GIVEN WORLD #.

USE_BPAL:			;NAME OF BAKGROUND PALETTE TO USE

;			LEVEL 0
	.DRW	BOOTPAL  	;BOOT 0
	.DRW	WRD1PAL	;1
	.DRW	CPAL1	   	;2
	.DRW	CPAL1		;3
	.DRW	DARKPAL	  	;4	  X
	.DRW	DUPAL1	   	;5
	.DRW	CPAL1	  	;6
	.DRW	TPAL1	  	;7
	.DRW	DARKPAL		;8	  X
	.DRW	DPAL1		;9
	.DRW	DUPAL1		;10
	.DRW	DUPAL1		;11
	.DRW	DUPAL1		;12
	.DRW	DARKPAL		;13	  X
	.DRW	TPAL1		;14
	.DRW	DARKPAL		;15	  X
	.DRW	TPAL1		;16
	.DRW	CPAL1		;17
	.DRW	DARKPAL		;18	  X
	.DRW	DARKPAL		;19	  X
	.DRW	DARKPAL		;20	  X
	.DRW	DPAL1		;21
	.DRW	ENDPAL		;22

;			LEVEL1
	.DRW	CPAL1		;23
	.DRW	DARKPAL	  	;24	  X
	.DRW	DUPAL1	   	;25
	.DRW	CPAL1	  	;26
	.DRW	TPAL1	  	;27
	.DRW	DARKPAL		;28	  X
	.DRW	DPAL1		;29
	.DRW	DUPAL1		;30
	.DRW	DUPAL1		;31
	.DRW	DUPAL1		;32
	.DRW	DARKPAL		;33	  X
	.DRW	TPAL1		;34
	.DRW	DARKPAL		;35	  X
	.DRW	TPAL1		;36
	.DRW	CPAL1		;37
	.DRW	DARKPAL		;38	  X
	.DRW	DARKPAL		;39	  X
	.DRW	DARKPAL		;40	  X
	.DRW	DPAL1		;41
				 
;			LEVEL2
	.DRW	CPAL1		;42
	.DRW	CPAL1	  	;43
	.DRW	CPAL1	  	;44
	.DRW	TPAL1	  	;45
	.DRW	DARKPAL		;46	  X
	.DRW	DPAL1		;47
	.DRW	DUPAL1		;48
	.DRW	DUPAL1		;49
	.DRW	DARKPAL		;50	  X
	.DRW	TPAL1		;51
	.DRW	WRD1PAL		;52
	.DRW	TPAL1		;53
	.DRW	CPAL1		;54
	.DRW	DARKPAL		;55	  X
	.DRW	WRD1PAL		;56
	.DRW	DARKPAL		;57	  X
	.DRW	DPAL1		;58

;			LEVEL 3
	.DRW	CPAL1		;59
	.DRW	CPAL1	  	;60
	.DRW	CPAL1	  	;61
	.DRW	TPAL1	  	;62
	.DRW	DARKPAL		;63	  X
	.DRW	DARKPAL		;64  	  X	SECRET ROOM	
	.DRW	DUPAL1		;65
	.DRW	DARKPAL		;66	  X
	.DRW	TPAL1		;67
	.DRW	WRD1PAL		;68
	.DRW	TPAL1		;69
	.DRW	CPAL1		;70
	.DRW	DARKPAL		;71	  X
	.DRW	WRD1PAL		;72
	.DRW	DARKPAL		;73	  X

	.DRW	WINDPAL		;74
	.DRW	WINDPAL		;75
	.DRW	WINDPAL		;76
	.DRW	WINDPAL		;77
	.DRW	WINDPAL		;78
	.DRW	WINDPAL		;79
	.DRW	WINDPAL		;80
	.DRW	WINDPAL		;81
	.DRW	WINDPAL		;82
	.DRW	DARKPAL		;83	  X
	.DRW	WINDPAL		;84
	.DRW	WINDPAL		;85
	.DRW	DARKPAL		;86	  X
	.DRW	DARKPAL		;87	  X
	.DRW	BOOTPAL		;88  	MESSAGE SCREEN
	.DRW	MAPAL1		;89	
;THIS TABLE HAS THE SPRITE PALETTE TO USE FOR A GIVEN WORLD #.

USE_SPAL:			;NAME OF SPRITE PALETTE TO USE
;			LEVEL 0

	.DRW	WRD1SPAL  	;BOOT 0
	.DRW	WRD1SPAL  	;1
	.DRW	CITYSPAL  	;2
	.DRW	CITYSPAL  	;3
	.DRW	DARKENEM  	;4
	.DRW	WRD1SPAL 	;5
	.DRW	CITYSPAL  	;6
	.DRW	TEMPSPAL  	;7
	.DRW	DARKENEM	;8
	.DRW	DOWNSPAL	;9
	.DRW	DUNGSPAL	;10
	.DRW	DUNGSPAL	;11
	.DRW	DUNGSPAL	;12
	.DRW	DARKENEM	;13
	.DRW	TEMPSPAL	;14
	.DRW	DARKENEM	;15
	.DRW	TEMPSPAL	;16
	.DRW	CITYSPAL	;17
	.DRW	DARKENEM	;18
	.DRW	DARKENEM	;19
	.DRW	DARKENEM	;20
	.DRW	DOWNSPAL	;21
	.DRW	ENDSPAL		;22
		
;			LEVEL 1

	.DRW	CITYSPAL  	;23
	.DRW	DARKENEM  	;24
	.DRW	WRD1SPAL 	;25
	.DRW	CITYSPAL  	;26
	.DRW	TEMPSPAL  	;27
	.DRW	DARKENEM	;28
	.DRW	DOWNSPAL	;29
	.DRW	DUNGSPAL	;30
	.DRW	DUNGSPAL	;31
	.DRW	DUNGSPAL	;32
	.DRW	DARKENEM	;33
	.DRW	TEMPSPAL	;34
	.DRW	DARKENEM       	;35
	.DRW	TEMPSPAL	;36
	.DRW	CITYSPAL	;37
	.DRW	DARKENEM	;38
	.DRW	DARKENEM	;39
	.DRW	DARKENEM	;40
	.DRW	DOWNSPAL	;41

;			LEVEL 2

	.DRW	CITYSPAL  	;42
	.DRW	CITYSPAL  	;43
	.DRW	CITYSPAL  	;44
	.DRW	TEMPSPAL  	;45
	.DRW	DARKENEM	;46
	.DRW	DOWNSPAL	;47
	.DRW	DUNGSPAL	;48
	.DRW	DUNGSPAL	;49
	.DRW	DARKENEM	;50
	.DRW	TEMPSPAL	;51
	.DRW	PYRSPAL		;52
	.DRW	TEMPSPAL	;53
	.DRW	CITYSPAL	;54
	.DRW	DARKENEM	;55
	.DRW	PYRSPAL		;56
	.DRW	DARKENEM	;57
	.DRW	DOWNSPAL	;58

;			LEVEL 3

	.DRW	CITYSPAL  	;59
	.DRW	CITYSPAL  	;60
	.DRW	CITYSPAL  	;61
	.DRW	TEMPSPAL  	;62
	.DRW	DARKENEM	;63
	.DRW	DUNGSPAL	;64
	.DRW	DUNGSPAL	;65
	.DRW	DARKENEM	;66
	.DRW	TEMPSPAL	;67
	.DRW	PYRSPAL		;68
	.DRW	TEMPSPAL	;69
	.DRW	CITYSPAL	;70
	.DRW	DARKENEM	;71
	.DRW	PYRSPAL		;72
	.DRW	DARKENEM	;73

	.DRW	WINDSPAL	;74
	.DRW	WINDSPAL	;75
	.DRW	WINDSPAL	;76
	.DRW	WINDSPAL	;77
	.DRW	WINDSPAL	;78
	.DRW	WINDSPAL	;79
	.DRW	WINDSPAL	;80
	.DRW	WINDSPAL	;81
	.DRW	WINDSPAL	;82
	.DRW	DARKENEM	;83
	.DRW	WINDSPAL	;84
	.DRW	WINDSPAL	;85
	.DRW	DARKENEM	;86
	.DRW	DARKENEM	;87
	.DRW	BOOTSPAL	;88
	.DRW	BOOTSPAL	;89

;THESE ARE THE LEFT AND RIGHT POINTS ON SCREEN AT WHICH TO SCROLL.
;THE FIRST IS LEFT, THE SECOND IS RIGHT.  

.EQU	LEFTSCROLL,130		;MAX IS 120!
.EQU	RIGHTSCROLL,140		;MINIMUM IS 136!

;No limits actually, 130 works just fine

;**************************WORLDMAKERS************************************************		
;THIS TABLE SPECIFIES THE LOCATION IN ROM OF THE CONTROL TABLES TO USE FOR 
;EACH WORLD.  

USE_TABLE:			;THE TABLE TO USE FOR EACH WORLD NUMBER.

;			LEVEL 0
	.DRW	BOOTTAB		;BOOT
	.DRW	J1TAB_0         ;1
	.DRW    C1TAB_0         ;2
	.DRW	C4TAB_0		;3
	.DRW	C3TAB_0		;4
	.DRW	J3TAB_0		;5
	.DRW	C2TAB_0		;6
	.DRW	T1TAB_0		;7
	.DRW	J2TAB_0		;8
	.DRW	D1TAB_0		;9
	.DRW	DU2TAB_0	 ;10
	.DRW	DU4TAB_0	 ;11
	.DRW	DU1TAB_0	 ;12
	.DRW	DU3TAB_0	 ;13
	.DRW	T4TAB_0		;14
	.DRW	P2TAB_0		;15
	.DRW	T3TAB_0		;16
	.DRW	C5TAB_0		;17
	.DRW	T2TAB_0		;18
	.DRW	P1TAB_0		;19
	.DRW	T5TAB_0		;20
	.DRW	D2TAB_0		;21
	.DRW    ENDTABLE	;22

;			LEVEL 1

	.DRW	C4TAB_1		;23
	.DRW	C3TAB_1		;24
	.DRW	J3TAB_1		;25
	.DRW	C2TAB_1		;26
	.DRW	T1TAB_1		;27
	.DRW	J2TAB_1		;28
	.DRW	D1TAB_1		;29
	.DRW	DU2TAB_1	;30
	.DRW	DU4TAB_1        ;31
	.DRW	DU1TAB_1        ;32
	.DRW	DU3TAB_1        ;33
	.DRW	T4TAB_1		;34
	.DRW	P2TAB_1		;35
	.DRW	T3TAB_1		;36
	.DRW	C5TAB_1		;37
	.DRW	T2TAB_1		;38
	.DRW	P1TAB_1		;39
	.DRW	T5TAB_1		;40
	.DRW	D2TAB_1		;41
;			LEVEL 2

	.DRW	C4TAB_2		;42
	.DRW	C3TAB_2		;43
	.DRW	C2TAB_2		;44
	.DRW	T1TAB_2		;45
	.DRW	J2TAB_2		;46
	.DRW	D1TAB_2		;47
	.DRW	DU2TAB_2	;48
	.DRW	DU1TAB_2	;49
	.DRW	DU3TAB_2	;50
	.DRW	T4TAB_2		;51
	.DRW	P2TAB_2		;52
	.DRW	T3TAB_2		;53
	.DRW	C5TAB_2		;54
	.DRW	T2TAB_2		;55
	.DRW	P1TAB_2		;56
	.DRW	T5TAB_2		;57
	.DRW	D2TAB_2		;58

;			LEVEL 3

	.DRW	C4TAB_3		;59
	.DRW	C3TAB_3		;60
	.DRW	C2TAB_3		;61
	.DRW	T1TAB_3		;62
	.DRW	J2TAB_3		;63
	.DRW	DU2TAB_3	;64
	.DRW	DU1TAB_3	;65
	.DRW	DU3TAB_3	;66
	.DRW	T4TAB_3		;67
	.DRW	P2TAB_3		;68
	.DRW	T3TAB_3		;69
	.DRW	C5TAB_3		;70
	.DRW	T2TAB_3		;71
	.DRW	P1TAB_3		;72
	.DRW	T5TAB_3		;73
	.DRW	WIN0TAB 	;74
	.DRW	WIN1TAB 	;75
	.DRW	WIN2TAB    	;76
	.DRW	WIN3TAB 	;77
	.DRW	WIN4TAB 	;78
	.DRW	WIN5TAB 	;79
	.DRW	WIN6TAB 	;80
	.DRW	WIN7TAB 	;81
	.DRW	DIETAB0 	;82
	.DRW	DIETAB1		;83
	.DRW	DIETAB2		;84
	.DRW	DIETAB3		;85
	.DRW	DIETAB4		;86
	.DRW	DIETAB5		;87
	.DRW	MESSTABLE	;88
	.DRW	MAPTABLE	;89  
;******************************WORLDCOMMANDS***************************	
;THESE ARE THE CONTROL TABLES.   THEY USE THE 4 BYTE COMMAND FORMAT
;SPECIFIED IN KUNGFU.ASM EXCEPT THAT EACH MUST BE PRECEEDED WITH 
;A COLUMN NUMBER (MAKING 5 BYTES PER COMMAND).  YOU CAN ONLY PUT 
;1 COMMAND ON A COLUMN.  YOU CAN'T PUT A COMMAND ON COLUMN 255 OR 0.

;EACH TABLE MUST BEGIN WITH THE FOLLOWING:
;	.DRW	0,0,0,0

;EACH TABLE MUST END THE FOLLOWING:
;	.DRW	-1,0

;THIS IS THE BOOT SCREEN'S COLUMN COMMAND TABLE.


BOOTTAB:		;32 WIDE

	.DRW	0,0,0,0			
	.DRW	2
      	.DB	H'F0,0,H'0C,H'00,-1,-1		;LAUNCH COPYRIGHT, KEY MONITOR
	.DRW	-1,0	 		
J1TAB_0:
;	X pos
;	h'???(F0), ID/name, Y pos, h'???(00), ???(-1), Entity spawn ID
;         (KUNGSUBS)                  (-1 = respawn w/o relaunch, forever)
;                                     (Same ID = if one is killed, other wont spawn)
	.DRW	0,0,0,0			
	.DRW	2
        .DB	H'F0,62,1,H'00,-1,-1			;LAUNCH cool dead guy(ID 62), at X2 Y1
	.DRW	8
        .DB	H'F0,HEROID,4,H'00,-1,-1	;LAUNCH HERO, at X8 Y4 ;;; X12 Y16
;	.DRW	20
;        .DB	H'F0,63,15,H'00,-1,0	;LAUNCH Horsie (ID 63), x20 y15 (test)
	.DRW	50
        .DB	H'F0,40,3,H'00,-1,1			;LAUNCH Slashem (ID 40), at X50 Y3
	.DRW	65
		.DB	H'F4,0,0,0,0,0			;Screen lock at X65
	.DRW	70
        .DB	H'F0,40,3,H'00,-1,2			;LAUNCH Slashem (ID 40), at X70 Y3
	.DRW	73
        .DB	H'F0,40,3,H'00,-1,3			;LAUNCH Slashem (ID 40), at X73 Y3
	.DRW	85
		.DB	H'F4,0,0,0,0,0			;Screen lock at X85
	.DRW	100
        .DB	H'F0,38,15,H'00,-1,4		;LAUNCH Shootya (ID 38), at X100 Y15
	.DRW	110
        .DB	H'F0,40,10,H'00,-1,6		;LAUNCH Slashem (ID 40), at X110 Y5
	.DRW	115
		.DB	H'F4,0,0,0,0,0			;Screen lock at X115
	.DRW	138
        .DB	H'F0,38,3,H'00,-1,7			;LAUNCH Shootya (ID 38), at X138 Y3
	.DRW	139
        .DB	H'F0,40,3,H'00,-1,8			;LAUNCH Slashem (ID 40), at X139 Y3
	.DRW	140
        .DB	H'F0,9,3,H'00,-1,28			;LAUNCH LOTSMAGIC (ID 9), at X140 Y3
	.DRW	157
        .DB	H'F0,40,15,H'00,-1,9			;LAUNCH Slashem (ID 40), at X157 Y15
	.DRW	175
		.DB	H'F4,0,0,0,0,0			;screen lock
	.DRW	180
        .DB	H'F0,40,10,H'00,-1,10		;LAUNCH Slashem (ID 40), at X180 Y10
	.DRW	187
        .DB	H'F0,6,15,H'00,-1,12			;LAUNCH Medkit (ID 6), at X187 Y15
	.DRW	188
        .DB	H'F0,40,3,H'00,-1,11		;LAUNCH Slashem (ID 40), at X188 Y3
	.DRW	202
        .DB	H'F0,6,3,H'00,-1,13				;LAUNCH Medkit (ID 6), at X202 Y3
	.DRW 	H'8000+223
	.DB     8,23,CLIMB,0,0,0		;LAUNCH ladder, at X223 Y8-23
	.DRW	242
        .DB	H'F0,38,3,H'00,-1,14		;LAUNCH Shootya (ID 38), at X242 Y3
	.DRW	250
        .DB	H'F0,38,3,H'00,-1,15		;LAUNCH Shootya (ID 38), at X250 Y3
	.DRW	256
		.DB	H'F4,0,0,0,0,0			;screen lock at X256
	.DRW	271
        .DB	H'F0,40,3,H'00,-1,16		;LAUNCH Slashem (ID 40), at X271 Y3
	.DRW	275
        .DB	H'F0,40,3,H'00,-1,17		;LAUNCH Slashem (ID 40), at X275 Y3
	.DRW	281;	305;281
        .DB	H'F0,9,20,H'00,-1,18			;LAUNCH LOTSMAGIC (ID 9), at X281 Y20
	.DRW 	H'8000+295
	.DB     8,23,CLIMB,0,0,0		;LAUNCH ladder, at X295 Y8-23
	.DRW	317;296
        .DB	H'F0,38,5,H'00,-1,19		;LAUNCH Shootya (ID 38), at X317 Y5
	.DRW	339
        .DB	H'F0,40,3,H'00,-1,20		;LAUNCH Slashem (ID 40), at X339 Y3
	.DRW	350
        .DB	H'F0,40,3,H'00,-1,21		;LAUNCH Slashem (ID 40), at X350 Y3
	.DRW	356
        .DB	H'F0,40,3,H'00,-1,22		;LAUNCH Slashem (ID 40), at X356 Y3
	.DRW	366
		.DB	H'F4,0,0,0,0,0			;screen lock at X366
	.DRW	376
        .DB	H'F0,38,18,H'00,-1,23		;LAUNCH Shootya (ID 38), at X376 Y18
	.DRW	385
        .DB	H'F0,40,3,H'00,-1,30		;LAUNCH Slashem (ID 40), at X395 Y3
	.DRW	403
        .DB	H'F0,63,10,H'00,-1,31		;LAUNCH Horsie (ID 63), at X405 Y10
	.DRW	410
		.DB	H'F4,0,0,0,0,0			;screen lock at X410
	.DRW	424
        .DB	H'F0,40,5,H'00,-1,27		;LAUNCH Slashem (ID 40) at X434 Y5
	.DRW	453
		.DB	H'F3,0,0,0,0,0			;< screen lock at X453
	.DRW	455
        .DB	H'F0,6,3,H'00,-1,34				;LAUNCH Medkit (ID 6), at X455 Y3
	.DRW	464
        .DB	H'F0,6,3,H'00,-1,33				;LAUNCH Medkit (ID 6), at X464 Y3
	.DRW	475
        .DB	H'F0,63,1,H'00,-1,26		;LAUNCH Horsie (ID 63), x475 y1
	.DRW	490
		.DB	H'F4,0,0,0,0,0			;screen lock at X490
	.DRW	492
        .DB	H'F0,40,3,H'00,-1,35		;LAUNCH Slashem (ID 40), at X495 Y3
	.DRW	495
        .DB	H'F0,40,3,H'00,-1,29		;LAUNCH Slashem (ID 40), at X495 Y3
	.DRW	513
        .DB	H'F0,63,15,H'00,-1,32		;LAUNCH Horsie (ID 63), at X513 Y15
	.DRW 	H'8000+516
	.DB     8,23,CLIMB,0,0,0		;LAUNCH ladder, at X516 Y8-23
	.DRW	517
		.DB	H'F4,0,0,0,0,0			;screen lock at X517
;	.DRW 	H'8000+444
;	.DB     14,17,DOOR,2,UP,UP		;DOOR to 2, at X444 Y14-17
	.DRW	-1,0			

; C1TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	9,10,DOOR,3,UP,UP		;DOOR 2
	; .DRW	3
        ; .DB	H'F0,HEROID,5,H'00,-1,-1	;LAUNCH HERO
	; .DRW	10
        ; .DB	H'F0,SWORDMAN,0,H'00,-1,40	;LAUNCH ANDREW

	; .DRW	31
        ; .DB	H'F0,ARRMAN,6,H'00,-1,37	;LAUNCH ENEMY
	; .DRW	H'8000+33
	; .DB	7,8,DOOR,4,UP,UP		;WINDOW0  DOOR 5

	; .DRW	39
 	; .DB	H'F0,ARRMAN,6,H'00,-1,124	;LAUNCH ENEMY

	; .DRW	H'8000+40
	; .DB	7,8,DOOR,6,UP,UP	    	;DOOR 7

	; .DRW	62
	; .DB	H'F0,ARRMAN,6,H'00,-1,125	;LAUNCH ENEMY
	; .DRW	64
	; .DB	H'F0,ARRMAN,6,H'00,-1,126	;LAUNCH ENEMY
	; .DRW	H'8000+65				
	; .DB	7,8,DOOR,8,UP,UP	        ;DOOR 9

	; .DRW	71
        ; .DB	H'F0,ARRMAN,6,H'00,-1,127      	;LAUNCH ENEMY
	; .DRW	H'8000+72
	; .DB	7,8,DOOR,10,UP,UP 	       	;DOOR 11
	; .DRW	82
	; .DB	H'F0,SWORDMAN,0,H'00,-1,41	;LAUNCH ANDREW

	; .DRW	103
        ; .DB	H'F0,ARRMAN,6,H'00,-1,129	;LAUNCH ENEMY
	; .DRW	H'8000+104				 
	; .DB	7,8,DOOR,12,UP,UP		;DOOR 13

	; .DRW	119
        ; .DB	H'F0,ARRMAN,6,H'00,-1,131	;LAUNCH ENEMY
	; .DRW	H'8000+120
	; .DB	7,8,DOOR,14,UP,UP		;DOOR 15

	; .DRW	127
        ; .DB	H'F0,ARRMAN,6,H'00,-1,132	;LAUNCH ENEMY
	; .DRW	H'8000+128
	; .DB	7,8,DOOR,16,UP,UP	       	;DOOR 17
	; .DRW	130
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+139			      
	; .DB	20,21,DOOR,22,UP,UP		;DOOR 23

	; .DRW	147
        ; .DB	H'F0,ARRMAN,6,H'00,-1,134	;LAUNCH ENEMY
	; .DRW	H'8000+148
	; .DB	7,8,DOOR,18,UP,UP		 ;DOOR 19
	; .DRW	-1,0			

; C4TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	13,14,DOOR,35,UP,UP		;DOOR 30
	; .DRW	4
        ; .DB	H'F0,HEROID,9,H'00,-1,-1	;LAUNCH HERO
	; .DRW 	H'8000+10			 
	; .DB     3,12,CLIMB,0,0,0	
	; .DRW	144
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	160
        ; .DB	H'F0,SWORDMAN,2,H'00,-1,42    	;LAUNCH ANDREW
	; .DRW	176
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+237
	; .DB	15,16,DOOR,28,UP,UP		 ;DOOR 33
	; .DRW	-1,0			

; C3TAB_0:
        ; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,49,UP,UP	        ;DOOR 46
	; .DRW	3
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	73
        ; .DB	H'F0,14,2,H'00,-1,43		;LAUNCH FOOD
	; .DRW	-1,0			

; J3TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	7,8,DOOR,100,UP,UP	        ;DOOR 96
	; .DRW	3
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	32
	; .DB	H'F3,0,0,0,0,0			
	; .DRW	39
        ; .DB	H'F0,40,9,H'00,-1,153		;LAUNCH SKELETON
	; .DRW	45
        ; .DB	H'F0,40,11,H'00,-1,154		;LAUNCH SKELETON
	; .DRW	50
        ; .DB	H'F0,56,1,H'00,-1,-1		;LAUNCH DUMBCODE
	; .DRW	64
	; .DB	H'F4,0,0,0,0,0		
	; .DRW 	H'8000+68			 
	; .DB     7,21,CLIMB,0,0,0	
	; .DRW	H'8000+73
	; .DB	7,8,DOOR,31,UP,UP	      	;DOOR 99
	; .DRW	-1,0			

; C2TAB_0:

        ; .DRW	0,0,0,0			
	; .DRW	2
        ; .DB	H'F0,HEROID,4,H'00,-1,-1     	;LAUNCH HERO
	; .DRW	H'8000+6
	; .DB	7,8,DOOR,23,UP,UP		;DOOR 22
	; .DRW 	H'8000+16		        
	; .DB     5,13,CLIMB,0,0,0	
	; .DRW 	H'8000+72	                
	; .DB     5,13,CLIMB,0,0,0	
	; .DRW 	H'8000+136		        
	; .DB     5,13,CLIMB,0,0,0	
	; .DRW	156
	; .DB	H'F3,0,0,0,0,0	
	; .DRW	186
        ; .DB	H'F0,SWORDMAN,9,H'00,-1,44	;LAUNCH ANDREW
	; .DRW	188
	; .DB	H'F4,0,0,0,0,0		
	; .DRW 	H'8000+212			 
	; .DB     5,13,CLIMB,0,0,0	
	; .DRW	H'8000+230
	; .DB	7,8,DOOR,27,UP,UP	       	;DOOR 25
	; .DRW	-1,0			
; T1TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+4
	; .DB	6,7,DOOR,76,UP,UP		;DOOR 78
	; .DRW	6
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	7
        ; .DB	H'F0,HEROID,2,H'00,-1,-1	;LAUNCH HERO
	; .DRW 	H'8000+27			 
	; .DB     3,22,CLIMB,0,0,0	
	; .DRW	35
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,45	;LAUNCH NINJA
	; .DRW	38
	; .DB	H'F4,0,0,0,0,0		
	; .DRW 	H'8000+59			 
	; .DB     3,22,CLIMB,0,0,0	
	; .DRW	62
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	68
        ; .DB	H'F0,12,8,0,-1,8		;LAUNCH TORCH
	; .DRW 	H'8000+87			 
	; .DB     3,22,CLIMB,0,0,0	
	; .DRW	93
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,46	;LAUNCH NINJA
	; .DRW	94
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+114
	; .DB	21,22,DOOR,80,UP,UP	  	;DOOR 81
	; .DRW	-1,0			

; J2TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	16,17,DOOR,176,UP,UP	       	;DOOR 174
	; .DRW	4
        ; .DB	H'F0,HEROID,12,H'00,-1,-1       	;LAUNCH HERO
	; .DRW 	H'8000+28			 
	; .DB     5,17,CLIMB,0,0,0	
	; .DRW 	H'8000+48			 
	; .DB     5,17,CLIMB,0,0,0	
	; .DRW	H'8000+61
	; .DB	16,17,DOOR,178,UP,UP	       	;DOOR 179
	; .DRW 	H'8000+88			 
	; .DB     5,17,CLIMB,0,0,0	
	; .DRW	H'8000+93
	; .DB	5,6,DOOR,172,UP,UP		;DOOR 177
	; .DRW	-1,0			

; D1TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	19,20,DOOR,183,UP,UP		;DOOR 116
	; .DRW	4
        ; .DB	H'F0,HEROID,15,H'00,-1,-1	;LAUNCH HERO
	; .DRW	18
        ; .DB	H'F0,44,13,H'00,-1,190		;LAUNCH GOOP
	; .DRW	26
        ; .DB	H'F0,44,13,H'00,-1,191		;LAUNCH GOOP
	; .DRW	62
        ; .DB	H'F0,44,13,H'00,-1,192		;LAUNCH GOOP
	; .DRW	76
        ; .DB	H'F0,44,13,H'00,-1,194		;LAUNCH GOOP
	; .DRW	108
        ; .DB	H'F0,44,13,H'00,-1,195		;LAUNCH GOOP
	; .DRW	126
        ; .DB	H'F0,44,13,H'00,-1,196		;LAUNCH GOOP
	; .DRW	H'8000+145
	; .DB	19,20,DOOR,118,UP,UP		;DOOR 119
	; .DRW	-1,0			

; DU2TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	0
        ; .DB	H'F0,17,12,H'00,-1,49		;LAUNCH ROCKGATE
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,146,UP,UP		;DOOR 109
	; .DRW	4
	; .DB 	H'F0,HEROID,8,H'00,-1,-1
	; .DRW	6
	; .DB	H'F3,0,0,0,0,0
	; .DRW	35
        ; .DB	H'F0,WHITEFAKE,6,H'00,-1,47	;LAUNCH RIFLEMAN
	; .DRW	38
	; .DB	H'F4,0,0,0,0,0			
	; .DRW	H'8000+57
	; .DB	15,16,DOOR,142,UP,UP		;DOOR 140  			
	; .DRW	67
	; .DB	H'F3,0,0,0,0,0			
	; .DRW	71
	; .DB 	H'F0,47,4,H'00,-1,187	 	;LAUNCH GRABBY
	; .DRW	95
        ; .DB	H'F0,WHITEFAKE,11,H'00,-1,48	;LAUNCH RIFLEMAN
	; .DRW	99
	; .DB	H'F4,0,0,0,0,0			
	; .DRW	H'8000+121
	; .DB	15,16,DOOR,141,UP,UP	     	;DOOR 144	  	
	; .DRW	-1,0			

; DU4TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	15,16,DOOR,144,UP,UP	     	;DOOR 141
	; .DRW	4
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW 	H'8000+37			 
	; .DB     5,13,CLIMB,0,0,0	
	; .DRW	58
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	80
        ; .DB	H'F0,SKELETON,11,H'00,-1,50	;LAUNCH SKELETON
	; .DRW	90
	; .DB	H'F4,0,0,0,0,0
	; .DRW 	H'8000+97			 
	; .DB     5,13,CLIMB,0,0,0	
	; .DRW	H'8000+170
	; .DB	15,16,DOOR,112,UP,UP		;DOOR 138
	; .DRW	-1,0			

; DU1TAB_0:

	; .DRW	0,0,0,0			
	; .DRW 	H'8000+1			;LADDER TO NEXT WORLD 
	; .DB     13,26,CLIMB,0,0,0	
	; .DRW	4
        ; .DB	H'F0,HEROID,16,H'00,-1,-1	;LAUNCH HERO
	; .DRW	25
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	54
        ; .DB	H'F0,WHITEFAKE,7,H'00,-1,51	;LAUNCH RIFLEMAN
	; .DRW	57
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+73
	; .DB	20,21,DOOR,140,UP,UP		;DOOR 142	
	; .DRW	H'8000+145
	; .DB	20,21,DOOR,110,UP,UP	       	;DOOR 111
	; .DRW	-1,0			

; DU3TAB_0:

	; .DRW	0,0,0,0			
	; .DRW 	H'8000+2			;LADDER TO OTHER LEVEL 
	; .DB     1,18,CLIMB,7,0,0	
	; .DRW	4
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW 	H'8000+22			 
	; .DB     5,18,CLIMB,0,0,0	
	; .DRW	33
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	55
        ; .DB	H'F0,SKELETON,1,H'00,-1,52	;LAUNCH SKELETON
	; .DRW 	H'8000+58			 
	; .DB     5,23,CLIMB,0,0,0	
	; .DRW	65
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+81
	; .DB	5,6,DOOR,155,UP,UP		;DOOR 156	
	; .DRW	-1,0			

; T4TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,57,UP,UP		;DOOR 56	
	; .DRW	4
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW	56
        ; .DB	H'F0,17,12,H'00,-1,53		;LAUNCH ROCKGATE
	; .DRW	H'8000+57
	; .DB	15,16,DOOR,103,UP,UP	    	;DOOR 104
	; .DRW	59
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	83
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,54	;LAUNCH NINJA
	; .DRW	91
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+108
	; .DB	13,14,DOOR,60,UP,UP		;DOOR 61
	; .DRW	-1,0			

; P2TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,148,UP,UP	   	;DOOR 147
	; .DRW	4
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	50
        ; .DB	H'F0,55,8,H'00,-1,-1		;LAUNCH LARGE STAR
	; .DRW 	H'8000+68			 
	; .DB     9,22,CLIMB,0,0,0	
	; .DRW	H'8000+109
	; .DB	4,5,DOOR,149,UP,UP		;DOOR 150
	; .DRW	-1,0			

; T3TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+4
	; .DB	9,10,DOOR,67,UP,UP	     	;DOOR 66
	; .DRW	7
        ; .DB	H'F0,HEROID,5,H'00,-1,-1	;LAUNCH HERO
	; .DRW	44
        ; .DB	H'F0,12,13,0,-1,9		;LAUNCH TORCH
	; .DRW	60
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	75
        ; .DB	H'F0,GREENCAPE,15,H'00,-1,216	;LAUNCH GREENY
	; .DRW	92
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+123
	; .DB	19,20,DOOR,71,UP,UP		;DOOR 69	
	; .DRW	-1,0			

; C5TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	9,10,DOOR,39,UP,UP		;DOOR 38	
	; .DRW	5
        ; .DB	H'F0,HEROID,5,H'00,-1,-1	;LAUNCH HERO
	; .DRW 	H'8000+19			 
	; .DB     5,16,CLIMB,0,0,0	
	; .DRW 	H'8000+35			 
	; .DB     5,16,CLIMB,0,0,0	
	; .DRW	H'8000+50
	; .DB	9,10,DOOR,97,UP,UP	      	;DOOR 101
	; .DRW 	H'8000+91			 
	; .DB     5,16,CLIMB,0,0,0	
	; .DRW	105
        ; .DB	H'F0,39,6,H'00,-1,55		;LAUNCH KEY GATE
	; .DRW	H'8000+106
	; .DB	9,10,DOOR,40,UP,UP     		;DOOR 41	
	; .DRW	-1,0			

; T2TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	12,13,DOOR,175,UP,UP		;DOOR 173
	; .DRW	4
        ; .DB	H'F0,HEROID,8,H'00,-1,-1	;LAUNCH HERO
	; .DRW	23
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	25
        ; .DB	H'F0,QUIKEIGHT,1,H'00,-1,-1	;LAUNCH QUIKGUY
	; .DRW	43
        ; .DB	H'F0,NINJAFAKE,8,H'00,-1,56 	;LAUNCH ENEMY
	; .DRW	55
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+57
	; .DB	12,13,DOOR,163,UP,UP	 	;DOOR 159
	; .DRW	H'8000+105
	; .DB	12,13,DOOR,164,UP,UP		;DOOR 165	
	; .DRW	-1,0			
; P1TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	7,8,DOOR,145,UP,UP	 	;DOOR 143
	; .DRW   	5
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	127
        ; .DB	H'F0,MONGOLIAN,0,0,-1,58	;LAUNCH MONGO
	; .DRW	160
        ; .DB	H'F0,9,4,H'00,-1,59		;LAUNCH TNT BOX
	; .DRW	H'8000+222
	; .DB	7,8,DOOR,109,UP,UP		;DOOR 146	
	; .DRW	-1,0			

; T5TAB_0:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,92,UP,UP		;DOOR 86	
	; .DRW	4
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	68
        ; .DB	H'F0,14,4,H'00,-1,215		;LAUNCH FOOD
	; .DRW	H'8000+117
	; .DB	21,22,DOOR,91,UP,UP	 	;DOOR 89
	; .DRW	-1,0			

; D2TAB_0:		    			;DOOR ON LEFT,LADDER

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	22,23,DOOR,52,UP,UP		;DOOR 54	
	; .DRW	4
        ; .DB	H'F0,HEROID,18,H'00,-1,-1	;LAUNCH HERO
	; .DRW 	H'8000+17			 
	; .DB     1,26,CLIMB,1,0,0
	; .DRW	-1,0			

; ENDTABLE:   					;THE BOSS WORLD,FINALLY
	; .DRW	0,0,0,0
	; .DRW	H'8000+1
	; .DB	11,12,DOOR,106,UP,UP		;DOOR 105	
	; .DRW	5
        ; .DB	H'F0,HEROID,7,H'00,-1,-1	;LAUNCH HERO
	; .DRW	18
        ; .DB	H'F0,FLYBOY,7,H'00,-1,163	;LAUNCH LITTLE BOSS
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	64
        ; .DB	H'F0,FLYBOY,3,H'00,-1,164	;LAUNCH LITTLE BOSS
	; .DRW	80
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	108
        ; .DB	H'F0,FLYBOY,3,H'00,-1,165	;LAUNCH LITTLE BOSS
	; .DRW	160
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	172
        ; .DB	H'F0,FLYBOY,7,H'00,-1,166	;LAUNCH LITTLE BOSS
	; .DRW	180
        ; .DB	H'F0,FLYBOY,7,H'00,-1,181	;LAUNCH LITTLE BOSS
	; .DRW	204
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	220
        ; .DB	H'F0,BOSSMAN,1,H'00,-1,168	;LAUNCH BIG,UGLY BOSS
	; .DRW	-1,0


; C4TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,37,UP,UP		;DOOR 32
	; .DRW	3
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW	56
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	71
        ; .DB	H'F0,SWORDMAN,2,H'00,-1,60 	;LAUNCH ANDREW
	; .DRW	88
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	113
        ; .DB	H'F0,9,5,H'00,-1,61		;LAUNCH TNT BOX
	; .DRW	H'8000+137
	; .DB	15,16,DOOR,30,UP,UP		;DOOR 35	
	; .DRW	-1,0			

; C3TAB_1:
        ; .DRW	0,0,0,0			
	; .DRW	2
        ; .DB	H'F0,HEROID,7,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+4
	; .DB	13,14,DOOR,51,UP,UP		;DOOR 58	
	; .DRW	23
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	40
        ; .DB	H'F0,60,7,H'00,-1,62		;LAUNCH TED
	; .DRW	51
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	55
	; .DB	H'F4,0,0,0,0,0
	; .DRW	69
        ; .DB	H'F0,9,2,H'00,-1,63		;LAUNCH TNT BOX
	; .DRW	75
        ; .DB	H'F0,SWORDMAN,0,H'00,-1,64	;LAUNCH ANDREW
	; .DRW	82
        ; .DB	H'F0,11,2,0,-1,5		;LAUNCH BOOMERRANG
	; .DRW	-1,0					
; J3TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	7,8,DOOR,95,UP,UP		;DOOR 94	
	; .DRW	3
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+4
	; .DB	7,20,CLIMB,0,0,0  
	; .DRW	7
	; .DB	H'F3,0,0,0,0,0	
	; .DRW	23
        ; .DB	H'F0,40,1,H'00,-1,156		;LAUNCH SKELETON
	; .DRW	H'8000+36
	; .DB	7,20,CLIMB,0,0,0 
	; .DRW	39
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	H'8000+49
	; .DB	7,8,DOOR,101,UP,UP     		;DOOR 97
	; .DRW	55
	; .DB	H'F3,0,0,0,0,0	
	; .DRW	60
        ; .DB	H'F0,56,1,H'00,-1,-1		;LAUNCH DUMBCODE
	; .DRW	80
        ; .DB	H'F0,40,1,H'00,-1,155		;LAUNCH SKELETON
	; .DRW	H'8000+84
	; .DB	7,20,CLIMB,0,0,0  
	; .DRW	87
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	H'8000+93
	; .DB	7,8,DOOR,96,UP,UP		;DOOR 100
	; .DRW	-1,0			
; C2TAB_1:

        ; .DRW	0,0,0,0				
	; .DRW	3
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+6
	; .DB	7,8,DOOR,29,UP,UP		;DOOR 24
	; .DRW	H'8000+32
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	H'8000+76
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	H'8000+148
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	158
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	176
        ; .DB	H'F0,SWORDMAN,9,H'00,-1,65	;LAUNCH ANDREW
	; .DRW	190
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+192
	; .DB	5,13,CLIMB,0,0,0
	; .DRW	H'8000+206
	; .DB	7,8,DOOR,25,UP,UP		;DOOR 27	
	; .DRW	-1,0			

; T1TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	21,22,DOOR,81,UP,UP		;DOOR 80	
	; .DRW	5
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+15
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	H'8000+43
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	49
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	H'8000+67
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	77
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,66	;LAUNCH NINJA
	; .DRW	81
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+99
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	H'8000+118
	; .DB	21,22,DOOR,82,UP,UP		;DOOR 83
	; .DRW	-1,0			

; J2TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	5,6,DOOR,165,UP,UP		;DOOR 164
	; .DRW	4
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+20
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	45
        ; .DB	H'F0,14,15,H'00,-1,67		;LAUNCH FOOD
	; .DRW	50
        ; .DB	H'F0,56,1,H'00,-1,-1		;LAUNCH DUMBCODE
	; .DRW	H'8000+80
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	H'8000+85
	; .DB	16,17,DOOR,166,UP,UP		;DOOR 167
	; .DRW	-1,0			
; D1TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	19,20,DOOR,119,UP,UP		;DOOR 118	
	; .DRW	4
        ; .DB	H'F0,HEROID,15,H'00,-1,-1	;LAUNCH HERO
	; .DRW	12
        ; .DB	H'F0,44,13,H'00,-1,197		;LAUNCH GOOP
	; .DRW	38
        ; .DB	H'F0,44,13,H'00,-1,199		;LAUNCH GOOP
	; .DRW	80
        ; .DB	H'F0,44,13,H'00,-1,200		;LAUNCH GOOP
	; .DRW	87
        ; .DB	H'F0,44,13,H'00,-1,201		;LAUNCH GOOP
	; .DRW	H'8000+89
	; .DB	19,20,DOOR,124,UP,UP	       	;DOOR 122
	; .DRW	91
        ; .DB	H'F0,44,13,H'00,-1,202		;LAUNCH GOOP
	; .DRW	144
        ; .DB	H'F0,44,13,H'00,-1,204		;LAUNCH GOOP
	; .DRW	H'8000+149
	; .DB	19,20,DOOR,120,UP,UP	      	;DOOR 121
	; .DRW	-1,0			

; DU2TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,138,UP,UP		;DOOR 112		
	; .DRW	4
        ; .DB	H'F0,HEROID,8,H'00,-1,-1	;LAUNCH HERO
	; .DRW	6
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	33
        ; .DB	H'F0,SKELETON,17,H'00,-1,68	;LAUNCH SKELETON
	; .DRW	36
        ; .DB	H'F0,SKELETON,17,H'00,-1,69	;LAUNCH SKELETON
	; .DRW	38
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	54
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	H'8000+57
	; .DB	15,16,DOOR,137,UP,UP		;DOOR 135	
	; .DRW	71
	; .DB 	H'F0,47,4,H'00,-1,188	 	;LAUNCH GRABBY
	; .DRW	84
        ; .DB	H'F0,WHITEFAKE,6,H'00,-1,70	;LAUNCH RIFLEMAN
	; .DRW	86
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	88
        ; .DB	H'F0,12,9,0,-1,24		;LAUNCH TORCH
	; .DRW	H'8000+121
	; .DB	15,16,DOOR,136,UP,UP	 	;DOOR 139
	; .DRW	-1,0			

; DU4TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	15,16,DOOR,139,UP,UP		;DOOR 136	
	; .DRW	4
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+25
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	43
        ; .DB	H'F0,16,4,0,-1,149		;LAUNCH KEY
	; .DRW	H'8000+77
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	128
        ; .DB	H'F0,12,4,0,-1,13		;LAUNCH TORCH
	; .DRW	H'8000+173
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	H'8000+182
	; .DB	15,16,DOOR,129,UP,UP	  	;DOOR 132
	; .DRW	-1,0			

; DU1TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	20,21,DOOR,111,UP,UP	       	;DOOR 110
	; .DRW	4
        ; .DB	H'F0,HEROID,16,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+97
	; .DB	20,21,DOOR,135,UP,UP		;DOOR 137	
	; .DRW	123
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	155
        ; .DB	H'F0,WHITEFAKE,16,H'00,-1,71	;LAUNCH RIFLEMAN
	; .DRW	157
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+185
	; .DB	20,21,DOOR,113,UP,UP		;DOOR 114	
	; .DRW	-1,0			

; DU3TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	5,6,DOOR,156,UP,UP		;DOOR 155	
	; .DRW	4
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW	17
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	H'8000+22
	; .DB	5,23,CLIMB,0,0,0	
	; .DRW	47
        ; .DB	H'F0,WHITEFAKE,1,H'00,-1,72	;LAUNCH RIFLEMAN
	; .DRW	49
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+78
	; .DB	5,23,CLIMB,0,0,0	
	; .DRW	H'8000+81
	; .DB	21,22,DOOR,157,UP,UP	  	;DOOR 158
	; .DRW	-1,0			

; T4TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,61,UP,UP		;DOOR 60	
	; .DRW	3
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW	60
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	82
        ; .DB	H'F0,GREENCAPE,5,H'00,-1,73	;LAUNCH GREENY
	; .DRW	92
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+108
	; .DB	13,14,DOOR,62,UP,UP	  	;DOOR 63
	; .DRW	-1,0			

; P2TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,150,UP,UP		;DOOR 149	 	
	; .DRW	5
        ; .DB	H'F0,HEROID,0,H'00,-1,-1	;LAUNCH HERO
	; .DRW	20
        ; .DB	H'F0,55,8,H'00,-1,-1		;LAUNCH LARGE STAR
	; .DRW	26
        ; .DB	H'F0,12,3,0,-1,26		;LAUNCH TORCH
	; .DRW	H'8000+36
	; .DB	9,22,CLIMB,0,0,0	
	; .DRW	55
        ; .DB	H'F0,12,20,0,-1,25		;LAUNCH TORCH
	; .DRW	95
        ; .DB	H'F0,16,14,0,-1,219		;LAUNCH KEY
	; .DRW	99
        ; .DB	H'F0,16,14,0,-1,12		;LAUNCH KEY
	; .DRW	-1,0				;END OF THIS COLUMN TABLE

; T3TAB_1:
     
	; .DRW	0,0,0,0			
	; .DRW	H'8000+4
	; .DB	9,10,DOOR,77,UP,UP		;DOOR 68	
	; .DRW	7
        ; .DB	H'F0,HEROID,5,H'00,-1,-1	;LAUNCH HERO
	; .DRW	11
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	39
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,74	;LAUNCH NINJA
	; .DRW	43
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+72
	; .DB	9,10,DOOR,69,UP,UP		;DOOR 71	
	; .DRW	96
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	118
        ; .DB	H'F0,GREENCAPE,11,H'00,-1,75	;LAUNCH NINJA
	; .DRW	128
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	134
        ; .DB	H'F0,39,15,H'00,-1,160		;LAUNCH KEY GATE
	; .DRW	H'8000+135
	; .DB	19,20,DOOR,70,UP,UP		;DOOR 75	
	; .DRW	-1,0			

; C5TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	9,10,DOOR,41,UP,UP		;DOOR 40	
	; .DRW	4
        ; .DB	H'F0,HEROID,5,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+27
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+51
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+75
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	79
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	101
        ; .DB	H'F0,60,5,H'00,-1,77		;LAUNCH TED
	; .DRW	111
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	112				;FREEMAN
        ; .DB	H'F0,7,4,0,-1,177	
	; .DRW 	H'8000+115			 
	; .DB     5,16,CLIMB,0,0,0	
	; .DRW	H'8000+138
	; .DB	9,10,DOOR,42,UP,UP		;DOOR 43
	; .DRW	-1,0			

; T2TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	12,13,DOOR,179,UP,UP		;DOOR 178	   	
	; .DRW	4
        ; .DB	H'F0,HEROID,8,H'00,-1,-1	;LAUNCH HERO
	; .DRW	5
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	25
        ; .DB	H'F0,QUIKEIGHT,1,H'00,-1,-1	;LAUNCH QUIKGUY
	; .DRW	34
        ; .DB	H'F0,GREENCAPE,8,H'00,-1,78	;LAUNCH NINJA
	; .DRW	37
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	74
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	86
        ; .DB	H'F0,NINJAFAKE,8,H'00,-1,80 	;LAUNCH ENEMY
	; .DRW	97
        ; .DB	H'F0,GREENCAPE,8,H'00,-1,79	;LAUNCH NINJA
	; .DRW	106
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+133
	; .DB	12,13,DOOR,180,UP,UP		;DOOR 181	
	; .DRW	-1,0			

; P1TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	7,8,DOOR,143,UP,UP		;DOOR 145	
	; .DRW	4
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	94
        ; .DB	H'F0,12,5,0,-1,23		;LAUNCH TORCH
	; .DRW	155
        ; .DB	H'F0,MONGOLIAN,1,0,-1,81	;LAUNCH MONG
	; .DRW	H'8000+206
	; .DB	7,8,DOOR,147,UP,UP		;DOOR 148	
	; .DRW	-1,0			

; T5TAB_1:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,104,UP,UP		;DOOR 103
	; .DRW	4
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+57
	; .DB	21,22,DOOR,90,UP,UP		;DOOR 87	
	; .DRW	71
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	100
        ; .DB	H'F0,GREENCAPE,1,H'00,-1,82	;LAUNCH ENEMY
	; .DRW	104
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+129
	; .DB	21,22,DOOR,86,UP,UP		;DOOR 92	
	; .DRW	-1,0			

; D2TAB_1:	 				;LADDER,NO DOORS

	; .DRW	0,0,0,0			
	; .DRW	3
        ; .DB	H'F0,HEROID,18,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+17
	; .DB	1,26,CLIMB,4,0,0	
	; .DRW	-1,0			


; C4TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	13,14,DOOR,36,UP,UP		;DOOR 34	
	; .DRW	4
        ; .DB	H'F0,HEROID,9,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+10
	; .DB	3,12,CLIMB,0,0,0	
	; .DRW	131
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	148
        ; .DB	H'F0,SWORDMAN,2,H'00,-1,85  	;LAUNCH ANDREW
	; .DRW	150
        ; .DB	H'F0,SWORDMAN,2,H'00,-1,84  	;LAUNCH ANDREW
	; .DRW	163
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	200
        ; .DB	H'F0,12,5,0,-1,3		;LAUNCH TORCH
	; .DRW	H'8000+245
	; .DB	15,16,DOOR,32,UP,UP		;DOOR 37	
	; .DRW	-1,0			

; C3TAB_2:
        ; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,53,UP,UP		;DOOR 48	
	; .DRW	4
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+57
	; .DB	21,22,DOOR,47,UP,UP		;DOOR 59	
	; .DRW	60
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	80
        ; .DB	H'F0,60,7,H'00,-1,86		;LAUNCH TED
	; .DRW	92
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+116
	; .DB	13,14,DOOR,58,UP,UP		;DOOR 51	
	; .DRW	-1,0			

; C2TAB_2:

        ; .DRW	0,0,0,0			
	; .DRW	3
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+6
	; .DB	7,8,DOOR,98,UP,UP	 	;DOOR 26
	; .DRW	H'8000+68
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	80
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	108
        ; .DB	H'F0,60,3,H'00,-1,87 	;LAUNCH TED
	; .DRW	112
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+160
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	178
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	204
        ; .DB	H'F0,SWORDMAN,9,H'00,-1,88	;LAUNCH ANDREW
	; .DRW	210
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+216
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	H'8000+248
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	H'8000+274
	; .DB	7,8,DOOR,24,UP,UP		;DOOR 29	
	; .DRW	-1,0			

; T1TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+4
	; .DB	6,7,DOOR,83,UP,UP	 	;DOOR 82
	; .DRW	7
        ; .DB	H'F0,HEROID,2,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+27
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	H'8000+43
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	91
        ; .DB	H'F0,39,3,H'00,-1,159		;LAUNCH KEYGATE
	; .DRW	H'8000+92
	; .DB	6,7,DOOR,73,UP,UP	 	;DOOR 85
	; .DRW	H'8000+111
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	118
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	H'8000+139
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	148
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,90	;LAUNCH NINJA
	; .DRW	150
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+163
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	195
        ; .DB	H'F0,17,3,H'00,-1,89		;LAUNCH ROCKGATE
	; .DRW	H'8000+196
	; .DB	6,7,DOOR,84,UP,UP		;DOOR 72	
	; .DRW	-1,0			

; J2TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	5,6,DOOR,177,UP,UP		;DOOR 172	
	; .DRW	4
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW	39
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	42
        ; .DB	H'F0,56,1,H'00,-1,-1		;LAUNCH DUMBCODE
	; .DRW	52
        ; .DB	H'F0,40,12,H'00,-1,218		;LAUNCH BIRDFAKE
	; .DRW	71
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+76
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	H'8000+168
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	H'8000+204
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	H'8000+216
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	H'8000+237
	; .DB	16,17,DOOR,173,UP,UP		;DOOR 175
	; .DRW	-1,0			

; D1TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	19,20,DOOR,121,UP,UP		;DOOR 120	
	; .DRW	4
        ; .DB	H'F0,HEROID,15,H'00,-1,-1	;LAUNCH HERO
	; .DRW	18
        ; .DB	H'F0,44,13,H'00,-1,205		;LAUNCH GOOP
	; .DRW	28
        ; .DB	H'F0,44,13,H'00,-1,206		;LAUNCH GOOP
	; .DRW	76
        ; .DB	H'F0,44,13,H'00,-1,207		;LAUNCH GOOP
	; .DRW	92
        ; .DB	H'F0,44,13,H'00,-1,208		;LAUNCH GOOP
	; .DRW	164
        ; .DB	H'F0,44,13,H'00,-1,210		;LAUNCH GOOP
	; .DRW	202
        ; .DB	H'F0,44,13,H'00,-1,212		;LAUNCH GOOP
	; .DRW	213				;FREEMAN
        ; .DB	H'F0,7,6,0,-1,162	
	; .DRW	-1,0			
; DU2TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,117,UP,UP		;DOOR 115	
	; .DRW	4
        ; .DB	H'F0,HEROID,8,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+65
	; .DB	15,16,DOOR,132,UP,UP		;DOOR 129	
	; .DRW	75
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	77
	; .DB 	H'F0,47,4,H'00,-1,189	 	;LAUNCH GRABBY
	; .DRW	106
        ; .DB	H'F0,WHITEFAKE,11,H'00,-1,92	;LAUNCH RIFLEMAN
	; .DRW	107
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+133
	; .DB	15,16,DOOR,127,UP,UP		;DOOR 133		
	; .DRW	-1,0			


; DU1TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	20,21,DOOR,114,UP,UP		;DOOR 113
	; .DRW	4
        ; .DB	H'F0,HEROID,16,H'00,-1,-1	;LAUNCH HERO
	; .DRW	12
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	35
        ; .DB	H'F0,WHITEFAKE,9,H'00,-1,93	;LAUNCH RIFLEMAN
	; .DRW	44
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+129
	; .DB	20,21,DOOR,182,UP,UP		;DOOR 131	
	; .DRW	H'8000+193
	; .DB	20,21,DOOR,115,UP,UP		;DOOR 117
	; .DRW	212
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	232
        ; .DB	H'F0,WHITEFAKE,7,H'00,-1,94	;LAUNCH RIFLEMAN
	; .DRW	244
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+265
	; .DB	20,21,DOOR,116,UP,UP		;DOOR 183	
	; .DRW	-1,0			

; DU3TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	5,6,DOOR,158,UP,UP		;DOOR 157	
	; .DRW	4
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW	23
        ; .DB	H'F0,WHITEFAKE,13,H'00,-1,95	;LAUNCH RIFLEMAN
	; .DRW	H'8000+30
	; .DB	5,23,CLIMB,0,0,0	
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+50
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	56
        ; .DB	H'F0,17,2,H'00,-1,96		;LAUNCH ROCKGATE
	; .DRW	H'8000+57
	; .DB	5,6,DOOR,159,UP,UP		;DOOR 163	
	; .DRW	60
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	70
        ; .DB	H'F0,SKELETON,7,H'00,-1,97	;LAUNCH SKELETON
	; .DRW	H'8000+90
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	92
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+97
	; .DB	21,22,DOOR,160,UP,UP		;DOOR 161
	; .DRW	-1,0			

; T4TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,63,UP,UP		;DOOR 62	
	; .DRW	3
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW	38
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	66
        ; .DB	H'F0,GREENCAPE,11,H'00,-1,213	;LAUNCH GREENY
	; .DRW	70
	; .DB	H'F4,0,0,0,0,0 
	; .DRW	85
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	111
        ; .DB	H'F0,NINJAFAKE,11,H'00,-1,99	;LAUNCH NINJA
	; .DRW	117
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+124
	; .DB	13,14,DOOR,64,UP,UP	 	;DOOR 65		
	; .DRW	-1,0			

; P2TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,126,UP,UP		;DOOR 125	
	; .DRW	3
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+36
	; .DB	9,22,CLIMB,0,0,0	
	; .DRW	40
        ; .DB	H'F0,55,8,H'00,-1,-1		;LAUNCH LARGE STAR
	; .DRW	54
        ; .DB	H'F0,12,14,0,-1,15		;LAUNCH TORCH
	; .DRW	H'8000+80
	; .DB	9,22,CLIMB,0,0,0	
	; .DRW	84
        ; .DB	H'F0,12,8,0,-1,16		;LAUNCH TORCH
	; .DRW	118
        ; .DB	H'F0,12,20,0,-1,17		;LAUNCH TORCH
	; .DRW	137
        ; .DB	H'F0,16,8,H'00,-1,100		;LAUNCH KEY 
	; .DRW	H'8000+144
	; .DB	9,22,CLIMB,0,0,0	
	; .DRW	187
        ; .DB	H'F0,12,3,0,-1,18		;LAUNCH TORCH
	; .DRW	-1,0			
; T3TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+3
	; .DB	19,20,DOOR,79,UP,UP		;DOOR 74	
	; .DRW	6
        ; .DB	H'F0,HEROID,15,H'00,-1,-1	;LAUNCH HERO
	; .DRW	62
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	81
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,101	;LAUNCH NINJA
	; .DRW	95
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+225
	; .DB	9,10,DOOR,68,UP,UP		;DOOR 77	
	; .DRW	-1,0			

; C5TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	9,10,DOOR,43,UP,UP  		;DOOR 42	
	; .DRW	4
        ; .DB	H'F0,HEROID,5,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+27
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+75
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+115
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+139
	; .DB	5,16,CLIMB,0,0,0
	; .DRW	148
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	160
        ; .DB	H'F0,60,17,H'00,-1,102		;LAUNCH TED
	; .DRW	180
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+187
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+210
	; .DB	9,10,DOOR,44,UP,UP    		;DOOR 45
	; .DRW	-1,0			

; T2TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	12,13,DOOR,169,UP,UP	 	;DOOR 168
	; .DRW	4
        ; .DB	H'F0,HEROID,8,H'00,-1,-1	;LAUNCH HERO
	; .DRW	25
        ; .DB	H'F0,QUIKEIGHT,1,H'00,-1,-1	;LAUNCH QUIKGUY
	; .DRW	50
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	69
        ; .DB	H'F0,GREENCAPE,8,H'00,-1,103	;LAUNCH NINJA
	; .DRW	82
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	85
        ; .DB	H'F0,12,11,0,-1,31		;LAUNCH TORCH
	; .DRW	103
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	123
        ; .DB	H'F0,NINJAFAKE,8,H'00,-1,104	;LAUNCH ENEMY
	; .DRW	135
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	144
        ; .DB	H'F0,11,11,0,-1,22		;LAUNCH BOOMERRANG
	; .DRW	-1,0			

; P1TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	7,8,DOOR,133,UP,UP		;DOOR 127	
	; .DRW	4
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	87
        ; .DB	H'F0,MONGOLIAN,4,0,-1,105	;LAUNCH ENEMY
	; .DRW	116
	; .DB	H'F3,0,0,0,0,0
	; .DRW	148
	; .DB	H'F4,0,0,0,0,0
	; .DRW	172
        ; .DB	H'F0,MONGOLIAN,1,0,-1,106	;LAUNCH ENEMY
	; .DRW	H'8000+190
	; .DB	7,8,DOOR,152,UP,UP	  	;DOOR 130
	; .DRW	-1,0			

; T5TAB_2:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,87,UP,UP		;DOOR 90	
	; .DRW	4
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+161
	; .DB	21,22,DOOR,88,UP,UP		;DOOR 93	
	; .DRW	-1,0			

; D2TAB_2:					;LADDER,DOOR ON RIGHT

	; .DRW	0,0,0,0			
	; .DRW	3
        ; .DB	H'F0,HEROID,18,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+17
	; .DB	3,26,CLIMB,3,0,0	
	; .DRW	H'8000+29
	; .DB	4,5,DOOR,56,UP,UP	  	;DOOR 57
	; .DRW	-1,0			


; C4TAB_3:

	; .DRW	0,0,0,0			       
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,34,UP,UP		;DOOR 36	
	; .DRW	3
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW	68
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	75
        ; .DB	H'F0,SWORDMAN,2,H'00,-1,107 	;LAUNCH ANDREW
	; .DRW	100
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+149
	; .DB	15,16,DOOR,38,UP,UP		;DOOR 39	
	; .DRW	H'8000+270
	; .DB	13,14,DOOR,94,UP,UP		;DOOR 95	
	; .DRW	H'8000+278
	; .DB	3,14,CLIMB,0,0,0	
	; .DRW	283
        ; .DB	H'F0,14,2,H'00,-1,175    	;LAUNCH FOOD
	; .DRW	-1,0			

; C3TAB_3:
        ; .DRW	0,0,0,0			
	; .DRW	2
        ; .DB	H'F0,HEROID,7,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+4
	; .DB	13,14,DOOR,55,UP,UP		;DOOR 50	
	; .DRW	103
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	120
        ; .DB	H'F0,SWORDMAN,7,H'00,-1,109	;LAUNCH ANDREW
	; .DRW	135
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+145
	; .DB	21,22,DOOR,48,UP,UP		;DOOR 53
	; .DRW	-1,0			

; C2TAB_3:

        ; .DRW	0,0,0,0			
	; .DRW	3
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+6
	; .DB	7,8,DOOR,33,UP,UP		;DOOR 28	
	; .DRW	H'8000+32
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	79
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	108
        ; .DB	H'F0,SWORDMAN,9,H'00,-1,110	;LAUNCH ANDREW
	; .DRW	111
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+146
	; .DB	7,8,DOOR,99,UP,UP		;DOOR 31	
	; .DRW	199
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	215
        ; .DB	H'F0,60,3,H'00,-1,111		;LAUNCH TED
	; .DRW	231
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+232
	; .DB	5,13,CLIMB,0,0,0	
	; .DRW	H'8000+250
	; .DB	7,8,DOOR,26,UP,UP		;DOOR 98	
	; .DRW	-1,0			

; T1TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+4
	; .DB	6,7,DOOR,72,UP,UP		;DOOR 84	
	; .DRW	7
        ; .DB	H'F0,HEROID,2,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+27
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	41
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	71
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,112	;LAUNCH NINJA
	; .DRW	73
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+83
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	102				;FREEMAN
        ; .DB	H'F0,7,8,0,-1,11	
	; .DRW	106
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	H'8000+127
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	130
        ; .DB	H'F0,NINJAFAKE,5,H'00,-1,113	;LAUNCH NINJA
	; .DRW	138
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+159
	; .DB	3,22,CLIMB,0,0,0	
	; .DRW	H'8000+165
	; .DB	1,10,CLIMB,6,0,0	
	; .DRW	-1,0			
; J2TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	5,6,DOOR,167,UP,UP		;DOOR 166	
	; .DRW	3
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+4
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	H'8000+48
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	60
        ; .DB	H'F0,12,4,0,-1,28		;LAUNCH TORCH
	; .DRW	H'8000+84
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	100
        ; .DB	H'F0,12,15,0,-1,29		;LAUNCH TORCH
	; .DRW	H'8000+128
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	182
        ; .DB	H'F0,12,4,0,-1,30		;LAUNCH TORCH
	; .DRW	H'8000+212
	; .DB	5,17,CLIMB,0,0,0	
	; .DRW	H'8000+217
	; .DB	16,17,DOOR,168,UP,UP	    	;DOOR 169
	; .DRW	-1,0			



; DU1TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	20,21,DOOR,131,UP,UP		;DOOR 182	
	; .DRW	4
        ; .DB	H'F0,HEROID,16,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+113
	; .DB	11,12,DOOR,102,UP,UP		;DOOR 134 SPECIAL ROOM	
	; .DRW	240
        ; .DB	H'F0,7,8,H'00,-1,114		;LAUNCH FREE MAN
	; .DRW	-1,0			

; DU3TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,161,UP,UP	 	;DOOR 160		
	; .DRW	4
        ; .DB	H'F0,HEROID,16,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+14
	; .DB	5,18,CLIMB,0,0,0	
	; .DRW	H'8000+46
	; .DB	5,18,CLIMB,0,0,0	
	; .DRW	53
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	61
        ; .DB	H'F0,12,16,0,-1,27		;LAUNCH TORCH
	; .DRW	H'8000+73
	; .DB	5,23,CLIMB,0,0,0	
	; .DRW	80
        ; .DB	H'F0,SKELETON,7,H'00,-1,115	;LAUNCH SKELETON
	; .DRW	83
        ; .DB	H'F0,WHITEFAKE,7,H'00,-1,116	;LAUNCH RIFLEMAN
	; .DRW	85
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+90
	; .DB	5,18,CLIMB,0,0,0	
	; .DRW	H'8000+98
	; .DB	21,22,DOOR,162,UP,UP	  	;DOOR 151
	; .DRW	-1,0			

; T4TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	15,16,DOOR,65,UP,UP		;DOOR 64	
	; .DRW	3
        ; .DB	H'F0,HEROID,11,H'00,-1,-1	;LAUNCH HERO
	; .DRW	15
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	35
        ; .DB	H'F0,NINJAFAKE,0,H'00,-1,117	;LAUNCH NINJA
	; .DRW	40
        ; .DB	H'F0,GREENCAPE,17,H'00,-1,214	;LAUNCH GREENY
	; .DRW	47
        ; .DB	H'F4,0,0,0,0,0
	; .DRW	65
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	84
        ; .DB	H'F0,GREENCAPE,17,H'00,-1,118	;LAUNCH GREENY
	; .DRW	97
        ; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+132
	; .DB	13,14,DOOR,66,UP,UP		;DOOR 67	
	; .DRW	-1,0			

; P2TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,128,UP,UP		;DOOR 123	
	; .DRW	3
        ; .DB	H'F0,HEROID,1,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+44
	; .DB	9,22,CLIMB,0,0,0	
	; .DRW	50
        ; .DB	H'F0,55,8,H'00,-1,-1		;LAUNCH LARGE STAR
	; .DRW	101
        ; .DB	H'F0,11,8,0,-1,167		;LAUNCH BOOMERRANG
	; .DRW	H'8000+104
	; .DB	9,22,CLIMB,0,0,0	
	; .DRW	136
        ; .DB	H'F0,39,2,H'00,-1,119		;LAUNCH KEY GATE
	; .DRW	H'8000+137
	; .DB	4,5,DOOR,125,UP,UP		;DOOR 126	
	; .DRW	-1,0			

; T3TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+3
	; .DB	19,20,DOOR,78,UP,UP		;DOOR 76	
	; .DRW	6
        ; .DB	H'F0,HEROID,15,H'00,-1,-1	;LAUNCH HERO
	; .DRW	50
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	72
        ; .DB	H'F0,GREENCAPE,10,H'00,-1,217	;LAUNCH GREENY
	; .DRW	82
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	120
        ; .DB	H'F0,14,8,H'00,-1,185    	;LAUNCH SHIELD
	; .DRW	H'8000+183
	; .DB	19,20,DOOR,74,UP,UP		;DOOR 79	
	; .DRW	-1,0			

; C5TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	9,10,DOOR,45,UP,UP		;DOOR 44	
	; .DRW	4
        ; .DB	H'F0,HEROID,5,H'00,-1,-1	;LAUNCH HERO
	; .DRW	H'8000+27
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+67
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+123
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+154
	; .DB	9,10,DOOR,59,UP,UP	 	;DOOR 47		
	; .DRW	H'8000+203
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+235
	; .DB	5,16,CLIMB,0,0,0	
	; .DRW	H'8000+258
	; .DB	9,10,DOOR,46,UP,UP		;DOOR 49	
	; .DRW	-1,0			

; T2TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	12,13,DOOR,181,UP,UP		;DOOR 180	
	; .DRW	4
        ; .DB	H'F0,HEROID,8,H'00,-1,-1	;LAUNCH HERO
	; .DRW	5
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	25
        ; .DB	H'F0,GREENCAPE,8,H'00,-1,120	;LAUNCH ENEMY
	; .DRW	37
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	87
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	105			
        ; .DB	H'F0,NINJAFAKE,8,H'00,-1,161  	;LAUNCH ENEMY
	; .DRW	108
        ; .DB	H'F0,NINJAFAKE,8,H'00,-1,186  	;LAUNCH ENEMY
	; .DRW	119
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	H'8000+193
	; .DB	12,13,DOOR,105,UP,UP 		;DOOR 106 
	; .DRW	-1,0			

; P1TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+2
	; .DB	7,8,DOOR,130,UP,UP    		;DOOR 152
	; .DRW	5
        ; .DB	H'F0,HEROID,3,H'00,-1,-1	;LAUNCH HERO
	; .DRW	81
        ; .DB	H'F0,MONGOLIAN,4,0,-1,121	;LAUNCH MONGO
	; .DRW	H'8000+138
	; .DB	7,8,DOOR,122,UP,UP  		;DOOR 124 
	; .DRW	190
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	191
	; .DB	H'F3,0,0,0,0,0	
	; .DRW	211
        ; .DB	H'F0,MONGOLIAN,0,0,-1,122	;LAUNCH MONGO
	; .DRW	223
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	H'8000+234
	; .DB	7,8,DOOR,123,UP,UP	  	;DOOR 128
	; .DRW	-1,0			
; T5TAB_3:

	; .DRW	0,0,0,0			
	; .DRW	H'8000+1
	; .DB	21,22,DOOR,93,UP,UP		;DOOR 88	
	; .DRW	4
        ; .DB	H'F0,HEROID,17,H'00,-1,-1	;LAUNCH HERO
	; .DRW	55
        ; .DB	H'F0,11,4,0,-1,7		;LAUNCH BOOMERRANG
	; .DRW	99
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	100
        ; .DB	H'F0,GREENCAPE,1,H'00,-1,123	;LAUNCH ENEMY
	; .DRW	115
	; .DB	H'F4,0,0,0,0,0
	; .DRW	H'8000+169
	; .DB	21,22,DOOR,89,UP,UP		;DOOR 91	
	; .DRW	-1,0			

; WIN0TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,5,UP,UP  		;DOOR 4
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	12
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,37   	;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	-1,0
; WIN1TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,7,UP,UP    		;DOOR 6
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	14
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,124  	;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	72
        ; .DB	H'F0,14,4,0,-1,19		;LAUNCH FOOD
	; .DRW	-1,0
; WIN2TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,9,UP,UP    		;DOOR 8
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	12
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,125   ;LAUNCH MAN IN WINDOW
	; .DRW	14
        ; .DB	H'F0,WINDOWMAN,11,H'00,-1,126   ;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0
	; .DRW	-1,0
; WIN3TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,11,UP,UP    		;DOOR 10
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	14
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,127   ;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	64
        ; .DB	H'F0,9,19,H'00,-1,128		;LAUNCH TNT BOX
	; .DRW	-1,0
; WIN4TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,13,UP,UP		;DOOR 12
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	15
        ; .DB	H'F0,WINDOWMAN,11,H'00,-1,129  	;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	45
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,130   ;LAUNCH MAN IN WINDOW
	; .DRW	54
        ; .DB	H'F0,14,4,0,-1,36		;LAUNCH FOOD
	; .DRW	-1,0
; WIN5TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,15,UP,UP  		;DOOR 14
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	12
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,131   ;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	-1,0
; WIN6TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,17,UP,UP   		;DOOR 16
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	15
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,132  	;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	57
        ; .DB	H'F0,9,19,H'00,-1,133		;LAUNCH TNT BOX
	; .DRW	-1,0
; WIN7TAB:
        ; .DRW	0,0,0,0	
	; .DRW	H'8000+1
	; .DB	14,15,DOOR,19,UP,UP	 	;DOOR 18		
	; .DRW	3
	; .DB	H'F0,HEROID,10,H'00,-1,-1
	; .DRW	12
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,134  	;LAUNCH MAN IN WINDOW
	; .DRW	32
	; .DB	H'F3,0,0,0,0,0		
	; .DRW	37
        ; .DB	H'F0,WINDOWMAN,11,H'00,-1,135  	;LAUNCH MAN IN WINDOW
	; .DRW	45
        ; .DB	H'F0,WINDOWMAN,16,H'00,-1,136  	;LAUNCH MAN IN WINDOW
	; .DRW	65
	; .DB	H'F4,0,0,0,0,0		
	; .DRW	72
        ; .DB	H'F0,17,2,H'00,-1,137		;LAUNCH ROCKGATE
	; .DRW	H'8000+73
	; .DB	5,6,DOOR,20,UP,UP  		;DOOR 21
	; .DRW	-1,0

; DIETAB0:				      	;82
	; .DRW 	0,0,0,0
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,1,UP,UP       		;DOOR 0
	; .DRW	3
	; .DB 	H'F0,HEROID,0,H'00,-1,-1
	; .DRW	H'8000+5
	; .DB	4,18,CLIMB,0,0,0	
	; .DRW	20
        ; .DB	H'F0,KNIFEJUMP,16,H'00,-1,138	;LAUNCH JUMPER
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0
	; .DRW	37
        ; .DB	H'F0,29,19,0,-1,139		;LAUNCH MAP
	; .DRW	-1,0

; DIETAB1: 					;83
	; .DRW 	0,0,0,0
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,21,UP,UP	 	;DOOR 20
	; .DRW	3
	; .DB 	H'F0,HEROID,0,H'00,-1,-1
	; .DRW	H'8000+5
	; .DB	4,18,CLIMB,0,0,0	
	; .DRW	20
        ; .DB	H'F0,KNIFEJUMP,16,H'00,-1,140	;LAUNCH JUMPER
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	35
        ; .DB	H'F0,16,19,0,-1,2		;LAUNCH KEY
	; .DRW	H'8000+41
	; .DB	4,18,CLIMB,0,0,0	
	; .DRW	H'8000+45
	; .DB	4,5,DOOR,107,UP,UP     		;DOOR X
	; .DRW	-1,0
; DIETAB2:       					;84
	; .DRW 	0,0,0,0
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,54,UP,UP    		;DOOR 52
	; .DRW	3
	; .DB 	H'F0,HEROID,0,H'00,-1,141
	; .DRW	H'8000+5
	; .DB	4,18,CLIMB,0,0,0	
	; .DRW	17
        ; .DB	H'F0,12,19,0,-1,4		;LAUNCH TORCH
	; .DRW	20
        ; .DB	H'F0,KNIFEJUMP,16,H'00,-1,142	;LAUNCH JUMPER
	; .DRW	25
        ; .DB	H'F0,KNIFEJUMP,16,H'00,-1,143	;LAUNCH JUMPER
	; .DRW	H'8000+29
	; .DB	4,18,CLIMB,0,0,0	
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	H'8000+33
	; .DB	4,5,DOOR,50,UP,UP    		;DOOR 55
	; .DRW	-1,0
; DIETAB3:   					;85
	; .DRW 	0,0,0,0
	; .DRW	0
        ; .DB	H'F0,39,1,H'00,-1,160		;LAUNCH KEY GATE
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,75,UP,UP  		;DOOR 70
	; .DRW	3
	; .DB 	H'F0,HEROID,0,H'00,-1,-1
	; .DRW	5
	; .DB	H'F3,0,0,0,0,0	
	; .DRW	17
        ; .DB	H'F0,15,19,0,-1,10		;LAUNCH SUCTION CUPS
	; .DRW	20
        ; .DB	H'F0,KNIFEJUMP,16,H'00,-1,144	;LAUNCH JUMPER
	; .DRW	32
        ; .DB	H'F0,39,1,H'00,-1,159		;LAUNCH KEY GATE
	; .DRW	H'8000+33
	; .DB	4,5,DOOR,85,UP,UP   		;DOOR 73
	; .DRW	-1,0
; DIETAB4:			   		;86    		
	; .DRW 	0,0,0,0
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,151,UP,UP		;DOOR 162
	; .DRW	3
	; .DB 	H'F0,HEROID,0,H'00,-1,-1
	; .DRW	H'8000+5
	; .DB	4,18,CLIMB,0,0,0	
	; .DRW	20
        ; .DB	H'F0,KNIFEJUMP,16,H'00,-1,145	;LAUNCH JUMPER
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	35
        ; .DB	H'F0,9,19,H'00,-1,146		;LAUNCH TORCH
	; .DRW	39				;FREEMAN
        ; .DB	H'F0,7,19,0,-1,180	
	; .DRW	-1,0
; DIETAB5:      					;87
	; .DRW 	0,0,0,0
	; .DRW	H'8000+1
	; .DB	4,5,DOOR,174,UP,UP   		;DOOR 176
	; .DRW	3
	; .DB 	H'F0,HEROID,0,H'00,-1,-1
	; .DRW	H'8000+5
	; .DB	4,18,CLIMB,0,0,0	
	; .DRW	20
        ; .DB	H'F0,KNIFEJUMP,16,H'00,-1,147	;LAUNCH JUMPER
	; .DRW	32
	; .DB	H'F4,0,0,0,0,0	
	; .DRW	35
        ; .DB	H'F0,10,19,H'00,-1,148		;LAUNCH TNT BOX
	; .DRW	-1,0
MAPTABLE:
	.DRW	0,0,0,0
	.DRW	31
        .DB	H'F0,43,24,H'00,-1,-1		;LAUNCH MAP CODE
	.DRW	-1,0	

; DU2TAB_3:    					;SPECIAL ROOM   			     
	; .DRW 	0,0,0,0
	; .DRW	H'8000+1
	; .DB	5,6,DOOR,134,UP,UP  		;DOOR 102
	; .DRW	4
	; .DB 	H'F0,HEROID,1,H'00,-1,-1
	; .DRW	10
        ; .DB	H'F0,12,4,0,-1,173		;LAUNCH TORCH
	; .DRW	14
        ; .DB	H'F0,12,14,0,-1,170		;LAUNCH TORCH
	; .DRW	34
        ; .DB	H'F0,13,14,0,-1,171		;LAUNCH KNUCKLES
	; .DRW	50
        ; .DB	H'F0,14,4,0,-1,172		;LAUNCH FOOD
	; .DRW	56
        ; .DB	H'F0,9,19,H'00,-1,169		;LAUNCH TNT BOX
	; .DRW	-1,0

MESSTABLE:	      				;MESSAGE SCREEN 
	.DRW	0,0,0,0
	.DRW	-1,0




